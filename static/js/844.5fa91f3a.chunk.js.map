{"version":3,"file":"static/js/844.5fa91f3a.chunk.js","mappings":"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","sources":["components/sidebar/SidebarTitle.tsx","components/sidebar/sidebarDayForm/useDataSidebarSelects.tsx","components/sidebar/sidebarDayForm/validationSidebarDayFormik.tsx","components/sidebar/sidebarDayForm/useSidebarDayFormik.tsx","components/sidebar/sidebarDayForm/SidebarDayForm.tsx","useReduxDatabase.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/useMonthPanelHeaderFormik.tsx","components/sidebar/SidebarHoursForm.tsx","components/sidebar/sidebarHoursForm/SidebarHoursFormCollapse.tsx","components/sidebar/sidebarMonthForm/dataSidebarMonthForm.tsx","components/sidebar/sidebarMonthForm/useValidationSidebarMonthForm.tsx","components/sidebar/sidebarMonthForm/useSidebarMonthFormik.tsx","components/sidebar/sidebarMonthForm/SidebarMonthForm.tsx","components/sidebar/sidebarMonthFormCollapse/SidebarMonthFormColapse.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","data/firebaseConfig.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useURLValues.tsx","hooks/useMonthURLToString.tsx","components/sidebar/sidebarMonthList/SidebarMonthsList.tsx","components/sidebar/SidebarMonthCollapse.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderSummary.tsx","utils/alertHelpers.tsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport { alert } from \"../../utils/alertHelpers\";\r\nimport useAutoLogout from \"../../hooks/useAutoLogout\";\r\n\r\nconst SidebarTitle = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // useAutoLogout();\r\n\r\nconsole.log('ooo',)\r\n\r\n  const logout = () => {\r\n    setIsLoading(true);\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch(error => alert(error))\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  let btnContent = <div className=\"text-start w-100\">Wyloguj</div>;\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        variant=\"secondary\"\r\n        className=\"mx-auto\"\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  // const [counter, setCounter] = useState(0);\r\n\r\n  // useEffect(() => {\r\n  //   const interval = setInterval(() => {\r\n  //     setCounter(prevCounter => prevCounter + 1);\r\n  //   }, 1000); // 1000 ms = 1 second\r\n\r\n  //   // Cleanup: clear the interval when the component unmounts to avoid memory leaks\r\n  //   return () => clearInterval(interval);\r\n  // }, []);\r\n\r\n\r\n  return (\r\n    <Button\r\n      onClick={logout}\r\n      className=\"fw-bolder text-info p-0 bg-transparent border-0 w-50\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n        fontSize: \"0.8rem\",\r\n      }}\r\n      disabled={isLoading}\r\n    >\r\n      {btnContent}\r\n      {/* <div>\r\n        <h1>Counter: {counter}</h1>\r\n      </div> */}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarTitle;\r\n","import { useUsersQuery } from \"../../../services/apiSliceUsers\";\r\nimport { ModelUser } from \"../../../pages/settings/settingsUserForm/useSettingsUserFormik\";\r\n\r\nconst useDataSidebarSelects = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers ? dataUsers : [];\r\n\r\n  const names = users?.map(({ userName }: ModelUser) => {\r\n    return userName;\r\n  });\r\n\r\n  const dataSelects = [\r\n    {\r\n      name: \"userName\",\r\n      firstOption: `${names.length === 0 ? \"Zapisz w ustawieniach\" : \"Imię\"}`,\r\n      labelText: \"Podaj imię\",\r\n      options: names,\r\n    },\r\n    {\r\n      name: \"hours\",\r\n      firstOption: \"Liczba godzin\",\r\n      labelText: \"Podaj liczbę godzin\",\r\n      options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    },\r\n\r\n    {\r\n      name: \"place\",\r\n      firstOption: \"Lokalizacja\",\r\n      labelText: \"Podaj lokalizację\",\r\n      options: [\"Wewnątrz\", \"Poza\"],\r\n    },\r\n  ];\r\n\r\n  return { dataSelects };\r\n};\r\nexport default useDataSidebarSelects;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  hours: yup\r\n    .string()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { dateInNext14Days } from \"../../../data/dataCurrentDates\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { ModelUser } from \"../../../pages/settings/settingsUserForm/useSettingsUserFormik\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useAddDayMutation\r\n} from \"../../../services/apiSliceMonths\";\r\nimport { validationSchema } from \"./validationSidebarDayFormik\";\r\n\r\ninterface ModelDay {\r\n  id: string;\r\n  date: string;\r\n  hours: string;\r\n  userName: string;\r\n  place: string;\r\n  userColor: string;\r\n}\r\n\r\nconst useSidebarDayFormik = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n  const [addDay, success] = useAddDayMutation();\r\n  const firstColumn = month && month?.columns?.[0];\r\n\r\n  const formik = useFormik<ModelDay>({\r\n    initialValues: {\r\n      id: \"\",\r\n      date: dateInNext14Days,\r\n      hours: \"\",\r\n      userName: \"Imię\",\r\n      place: \"\",\r\n      userColor: \"\",\r\n    },\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async (values) => {\r\n      if (\r\n        month?.calc?.currentHours - +values.hours < 0 ||\r\n        month?.calc?.currentHours === 0\r\n      )\r\n        return;\r\n\r\n      const userColor = users?.find((user: ModelUser) => {\r\n        return user.userName === values.userName;\r\n      })?.userColor;\r\n\r\n      const valuesToDatabase = {\r\n        ...values,\r\n        id: crypto.randomUUID(),\r\n        hours: +values.hours,\r\n        userColor: userColor || \"\",\r\n      };\r\n\r\n      await addDay({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        firstColumnBody: {\r\n          ...firstColumn,\r\n          days: firstColumn?.days\r\n            ? [...firstColumn.days, valuesToDatabase]\r\n            : [valuesToDatabase],\r\n        },\r\n      });\r\n\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useSidebarDayFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport {\r\n  dateInNext14Days,\r\n  dateInNext60Days,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport \"./_dayForm.scss\";\r\nimport useDataSidebarSelects from \"./useDataSidebarSelects\";\r\nimport useSidebarDayFormik from \"./useSidebarDayFormik\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\n\r\nconst SidebarDayForm = () => {\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const { dataSelects } = useDataSidebarSelects();\r\n  const { formik, success } = useSidebarDayFormik();\r\n  const { btnContent } = useHTTPState(success, \"Dodaj dzień\");\r\n  const { isMonthInURL } = useURLValues();\r\n\r\n  const allHours = month?.calc?.allHours;\r\n  const currentHours = month?.calc?.currentHours;\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={formik.handleSubmit}\r\n      className={`mt-2 ${!month || !isMonthInURL ? \"d-none\" : \"\"} ${\r\n        allHours === 0 ? \"formContainer\" : \"\"\r\n      }`}\r\n    >\r\n      {dataSelects.map(({ name, firstOption, labelText, options }) => {\r\n        return (\r\n          <Form.Group key={labelText}>\r\n            <Form.Label htmlFor={name} className=\"mb-0 fs-7\">\r\n              {labelText}\r\n            </Form.Label>\r\n\r\n            <Form.Select\r\n              id={name}\r\n              name={name}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className={`p-0 px-1 border border-primary ${\r\n                firstOption === \"Zapisz w ustawieniach\" ? \"text-danger\" : \"\"\r\n              }`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <option>{firstOption}</option>\r\n\r\n              {options?.map((option: string | number) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n\r\n            <div\r\n              className=\"text-danger d-block mt-0 fs-8\"\r\n              style={{ height: \"0.7rem\" }}\r\n            >\r\n              {formik.touched[name as keyof typeof formik.touched] &&\r\n                formik.errors[name as keyof typeof formik.touched] &&\r\n                formik.errors[name as keyof typeof formik.touched]}\r\n            </div>\r\n          </Form.Group>\r\n        );\r\n      })}\r\n\r\n      <Form.Group>\r\n        <Form.Label htmlFor=\"date\" className=\"mb-0 fs-7\">\r\n          Podaj dzień\r\n        </Form.Label>\r\n        <Form.Control\r\n          id=\"date\"\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={formik.values.date}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          min={dateInNext14Days}\r\n          max={dateInNext60Days}\r\n          placeholder=\"Liczba\"\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 border border-primary\"\r\n          style={{ minHeight: 0, cursor: \"pointer\" }}\r\n        />\r\n        <div\r\n          className=\"text-danger d-block mt-0 fs-8\"\r\n          style={{ height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.date && formik.errors.date && formik.errors.date}\r\n        </div>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 bg-info text-white\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div\r\n        className=\"text-danger d-block mt-0 fs-8\"\r\n        style={{ height: \"0.7rem\" }}\r\n      >\r\n        {currentHours - +formik.values.hours < 0 || currentHours === 0\r\n          ? \"Brak dostępnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SidebarDayForm;\r\n","import { useDispatch } from \"react-redux\";\r\nimport useURLValues from \"./hooks/useURLValues\";\r\nimport {\r\n  useMonthDataQuery,\r\n  useMonthsInfoQuery,\r\n} from \"./services/apiSliceMonths\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  getMonth,\r\n  getMonthError,\r\n  getMonthIsLoading,\r\n} from \"./redux/storeFeatures/monthsPanelSlice\";\r\nimport { useUsersQuery } from \"./services/apiSliceUsers\";\r\nimport {\r\n  getUsers,\r\n  getUsersError,\r\n  getUsersIsLoading,\r\n} from \"./redux/storeFeatures/usersSlice\";\r\nimport {\r\n  getInfoMonths,\r\n  getInfoMonthError,\r\n  getInfoMonthIsLoading,\r\n} from \"./redux/storeFeatures/infoMonthsSlice\";\r\n\r\nconst useReduxDatabase = () => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data, error, isLoading } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  const {\r\n    data: dataUsers,\r\n    error: errorUsers,\r\n    isLoading: isLoadingUsers,\r\n  } = useUsersQuery();\r\n  const {\r\n    data: dataInfoMonths,\r\n    error: errorInfoMonths,\r\n    isLoading: isLoadingInfoMonths,\r\n  } = useMonthsInfoQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(getMonth(data));\r\n    dispatch(getMonthError(error));\r\n    dispatch(getMonthIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers(dataUsers));\r\n    dispatch(getUsersError(errorUsers));\r\n    dispatch(getUsersIsLoading(isLoadingUsers));\r\n  }, [dataUsers, errorUsers, isLoadingUsers, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getInfoMonths(dataInfoMonths));\r\n    dispatch(getInfoMonthError(errorInfoMonths));\r\n    dispatch(getInfoMonthIsLoading(isLoadingInfoMonths));\r\n  }, [dataInfoMonths, errorInfoMonths, isLoadingInfoMonths, dispatch]);\r\n\r\n  return {};\r\n};\r\n\r\nexport default useReduxDatabase;\r\n","import { useFormik } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useURLValues from \"../../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useAddAllHoursMutation } from \"../../../../services/apiSliceMonths\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useMonthPanelHeaderFormik = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n\r\n  const submittedHours = month?.calc?.submittedHours;\r\n  const acceptedHours = month?.calc?.acceptedHours;\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n\r\n    onSubmit: async values => {\r\n      if (submittedHours + acceptedHours > +formik.values.allHours) return;\r\n\r\n      await addAllHours({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        allHours: +values.allHours,\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useMonthPanelHeaderFormik;\r\n","import React from \"react\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useMonthPanelHeaderFormik from \"../../pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/useMonthPanelHeaderFormik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nconst SidebarHoursForm = () => {\r\n  const { formik, success } = useMonthPanelHeaderFormik();\r\n  const { btnContent } = useHTTPState(success, \"Dodaj godziny\");\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n\r\n  const submittedHours = month?.calc.submittedHours;\r\n  const acceptedHours = month?.calc.acceptedHours;\r\n\r\n  const gradientValue = formik.values.allHours / 3.2;\r\n  const gradientBackground: string = `linear-gradient(to right, rgba(180,120,255) ${gradientValue}%, rgba(180,180,255) ${gradientValue}%)`;\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit} className=\"\">\r\n      <div className=\"d-flex\">\r\n        <Form.Control\r\n          type=\"number\"\r\n          name=\"allHours\"\r\n          min={0}\r\n          max={320}\r\n          value={formik.values.allHours}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          placeholder=\"Liczba\"\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 mb-2 border border-primary\"\r\n          style={{ minHeight: 0, cursor: \"pointer\", width: \"fit-content\" }}\r\n        />\r\n        <span> &nbsp; h</span>\r\n      </div>\r\n\r\n      {/* <div\r\n        className=\"text-danger d-block mt-0 fs-8 text-center\"\r\n        style={{ height: \"0.7rem\" }}\r\n      >\r\n        {submittedHours + acceptedHours > +formik.values.allHours\r\n          ? `Min. ${submittedHours + acceptedHours} h`\r\n          : \"\"}\r\n      </div> */}\r\n\r\n      <Form.Group className=\"mt-2 d-flex align-items-center w-100\">\r\n        <Form.Range\r\n          name=\"allHours\"\r\n          min={0}\r\n          max={320}\r\n          value={formik.values.allHours}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          className=\"form-range custom-range medium\"\r\n          style={{\r\n            height: 10,\r\n            background: gradientBackground,\r\n          }}\r\n        />\r\n      </Form.Group>\r\n\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div className=\"fw-medium\">0 h</div>\r\n\r\n        <div className=\"text-danger  mt-auto fs-8\">\r\n          {submittedHours + acceptedHours > +formik.values.allHours\r\n            ? `Min. ${submittedHours + acceptedHours} h`\r\n            : \"\"}\r\n        </div>\r\n        <div className=\"fw-medium\">320 h</div>\r\n      </div>\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"info\"\r\n        size=\"sm\"\r\n        className=\"fw-medium w-100\"\r\n        disabled={success.isLoading}\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SidebarHoursForm;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\nimport SidebarHoursForm from \"../SidebarHoursForm\";\r\n\r\n\r\nconst SidebarHoursFormCollapse = () => {\r\n\r\n const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        className=\"fw-medium w-100 mt-2 bg-info text-white\"\r\n        // className={`fw-medium w-100 mt-1 d-flex justify-content-center align-items-center bg-primary border-0 p-1 ${\r\n        //   open ? \"rounded-bottom-0\" : \"\"\r\n        // }`}\r\n      >\r\n        Dodaj godziny\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-5 fw-medium\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div className=\"bg-white p-0\">\r\n          <SidebarHoursForm />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarHoursFormCollapse;\r\n","export interface ModelDay {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n  date: string;\r\n  hours: number;\r\n  place: string;\r\n}\r\n\r\nexport interface ModelColumn {\r\n  id: string;\r\n  days: ModelDay[];\r\n}\r\n\r\nexport interface ModelCalc {\r\n  allHours: number;\r\n  currentHours: number;\r\n  submittedHours: number;\r\n  acceptedHours: number;\r\n  rejectedHours: number;\r\n}\r\n\r\nexport interface ModelMonthPattern {\r\n  id: string;\r\n  columns: ModelColumn[];\r\n  calc: ModelCalc;\r\n}\r\n\r\nexport interface ModelMonthsPatern {\r\n  [key: string]: {\r\n    [key: string]: ModelMonthPattern\r\n  };\r\n}\r\n\r\nconst columns: ModelColumn[] = [\r\n  { id: \"submitted\", days: [] },\r\n  { id: \"accepted\", days: [] },\r\n  { id: \"rejected\", days: [] },\r\n];\r\n\r\nconst calc: ModelCalc = {\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submittedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n};\r\n\r\nexport const monthPattern: ModelMonthPattern = {\r\n  id: \"\",\r\n  columns,\r\n  calc,\r\n};\r\n","import * as yup from \"yup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst useValidationSidebarMonthForm = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const validationSchema = yup.object({\r\n    monthDate: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Miesiąc zapisany\",\r\n        value => value !== undefined && !infoMonths?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationSidebarMonthForm;\r\n","import { useFormik } from \"formik\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  currMonthDigits,\r\n  currYearDigits,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateMonthInfoMutation,\r\n  useUpdateMonthMutation\r\n} from \"../../../services/apiSliceMonths\";\r\nimport { alert } from \"../../../utils/alertHelpers\";\r\nimport { ModelMonthPattern, monthPattern } from \"./dataSidebarMonthForm\";\r\nimport useValidationSidebarMonthForm from \"./useValidationSidebarMonthForm\";\r\ninterface ModelFormValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useSidebarMonthFormik = () => {\r\n  const navigate = useNavigate();\r\n  const [updateMonth, success] = useUpdateMonthMutation()\r\n  const [updateMonthInfo] = useUpdateMonthInfoMutation();\r\n  const [deleteMonth] = useDeleteMonthMutation();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n  const { validationSchema } = useValidationSidebarMonthForm();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { monthDate: `${currYearDigits}-${currMonthDigits}` },\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async values => {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      const monthBody: ModelMonthPattern = {\r\n        ...monthPattern,\r\n        id: values.monthDate,\r\n      };\r\n\r\n      await updateMonth({ year, month, monthBody });\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (success.isSuccess) {\r\n      setIsSuccess(true);\r\n    } else setIsSuccess(false);\r\n  }, [success.isSuccess]);\r\n\r\n  useEffect(() => {\r\n    const executeAddMonthInfo = async () => {\r\n      if (isSuccess) {\r\n        const year = formik.values.monthDate.slice(0, 4);\r\n        const month = formik.values.monthDate.slice(-2);\r\n        const months = infoMonths ? infoMonths : [];\r\n        await updateMonthInfo([...months, `${year}-${month}`]);\r\n        navigate(`/${formik.values.monthDate}`);\r\n      } else if (success.isError) {\r\n        const year = formik.values.monthDate.slice(0, 4);\r\n        const month = formik.values.monthDate.slice(-2);\r\n        await deleteMonth({ year, month });\r\n        alert(\"\");\r\n      }\r\n    };\r\n\r\n    executeAddMonthInfo();\r\n  }, [isSuccess, updateMonthInfo]);\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useSidebarMonthFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport {\r\n  currMonthDigits,\r\n  currYearDigits,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport useSidebarMonthFormik from \"./useSidebarMonthFormik\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst SidebarMonthForm = () => {\r\n  const { formik, success } = useSidebarMonthFormik();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-info\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"mt-1\">\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"monthDate\" className=\"mb-0 fs-7\">\r\n            Podaj miesiąc\r\n          </Form.Label>\r\n          <div className=\"d-flex\">\r\n            <Form.Control\r\n              id=\"monthDate\"\r\n              type=\"month\"\r\n              name=\"monthDate\"\r\n              min={`${currYearDigits}-${currMonthDigits}`}\r\n              max=\"2025-12\"\r\n              value={formik.values.monthDate}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className=\"p-0 px-1 d-block border border-primary text-capitalize\"\r\n              style={{ minHeight: 0, height: \"fit-content\", cursor: \"pointer\" }}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={success.isLoading}\r\n              className=\"col-2 d-flex justify-content-center align-items-center m-0 justify-content-center p-0 m-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n            >\r\n              {btnContent}\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n        <Form.Text\r\n          className=\"text-danger d-block mt-0 lh-0\"\r\n          style={{ fontSize: \"0.6rem\", height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.monthDate &&\r\n            formik.errors.monthDate &&\r\n            formik.errors.monthDate}\r\n        </Form.Text>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthForm;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\nimport SidebarMonthForm from \"../sidebarMonthForm/SidebarMonthForm\";\r\n\r\n\r\nconst SidebarMonthFormColapse = () => {\r\n const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        className=\"fw-medium w-100 mt-2 bg-info text-white\"\r\n        // className={`fw-medium w-100 mt-1 d-flex justify-content-center align-items-center bg-primary border-0 p-1 ${\r\n        //   open ? \"rounded-bottom-0\" : \"\"\r\n        // }`}\r\n      >\r\n        Dodaj miesiąc\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-4 fw-medium\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div className=\"bg-white p-0\">\r\n          <SidebarMonthForm />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthFormColapse;\r\n","import \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { AiTwotoneSetting } from \"react-icons/ai\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport {\r\n  getInfoMonthError,\r\n  getInfoMonthIsLoading,\r\n  getInfoMonths,\r\n} from \"../../redux/storeFeatures/infoMonthsSlice\";\r\nimport { useMonthsInfoQuery } from \"../../services/apiSliceMonths\";\r\nimport SidebarMonthCollapse from \"./SidebarMonthCollapse\";\r\nimport SidebarTitle from \"./SidebarTitle\";\r\nimport SidebarDayForm from \"./sidebarDayForm/SidebarDayForm\";\r\nimport SidebarMonthForm from \"./sidebarMonthForm/SidebarMonthForm\";\r\nimport useReduxDatabase from \"../../useReduxDatabase\";\r\nimport MonthPanelHeaderForm from \"../../pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/MonhPanelHeaderForm\";\r\nimport SidebarHoursForm from \"./SidebarHoursForm\";\r\nimport MonthPanelHeaderSummary from \"../../pages/monthPanel/monthPanelHeader/MonthPanelHeaderSummary\";\r\nimport \"./../../pages/monthPanel/indexMonthPanel/_bgImage.scss\";\r\nimport SidebarHoursFormCollapse from \"./sidebarHoursForm/SidebarHoursFormCollapse\";\r\nimport SidebarMonthFormColapse from \"./sidebarMonthFormCollapse/SidebarMonthFormColapse\";\r\n\r\n\r\nconst IndexSidebar = () => {\r\n  useReduxDatabase();\r\n  const { pathname } = useLocation();\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(s => !s);\r\n\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    windowWidth > 575 && setShow(true);\r\n  }, [windowWidth]);\r\n\r\n  let offCanvasWidth = \"100%\";\r\n  if (windowWidth > 575) {\r\n    offCanvasWidth = \"35%\";\r\n  }\r\n  if (windowWidth > 766) {\r\n    offCanvasWidth = \"25%\";\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(pathname) ? (\r\n        <aside>\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={toggleShow}\r\n            className={`me-2 p-2 mt-1  ${\r\n              windowWidth > 575 ? \"d-none\" : \"d-block\"\r\n            }`}\r\n            style={{ position: \"absolute\", right: 0, borderRadius: \"50%\" }}\r\n          >\r\n            <GiHamburgerMenu className=\"fs-1\" />\r\n          </Button>\r\n\r\n          <Offcanvas\r\n            show={show}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            style={{\r\n              width: offCanvasWidth,\r\n              backgroundColor: windowWidth > 575 && \"rgba(255, 255, 255, 0)\",\r\n            }}\r\n          >\r\n            <div className={`${windowWidth < 575 && \"backgroundImage\"}`}>\r\n              <div style={{ backgroundColor: \"rgba(255, 255, 255, 0.5)\" }}>\r\n                <Offcanvas.Header\r\n                  closeButton={windowWidth < 575}\r\n                  className=\"pb-0\"\r\n                >\r\n                  <SidebarTitle />\r\n                </Offcanvas.Header>\r\n                <Offcanvas.Body className=\"d-flex flex-column pt-0 w-0 m-3 bg-white\">\r\n                  <SidebarMonthFormColapse />\r\n                  <SidebarHoursFormCollapse />\r\n                  {windowWidth < 575 ? <MonthPanelHeaderSummary /> : null}\r\n                  <SidebarDayForm />\r\n                  {/* <SidebarMonthCollapse /> */}\r\n                  <Link\r\n                    to=\"/ustawienia\"\r\n                    className=\"text-info mt-auto fw-medium text-decoration-none \"\r\n                  >\r\n                    <AiTwotoneSetting /> Ustawienia\r\n                  </Link>\r\n                </Offcanvas.Body>\r\n              </div>\r\n            </div>\r\n          </Offcanvas>\r\n        </aside>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext14Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext60Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext14Days = formatDate(futureDateInNext14Days);\r\nexport const dateInNext60Days = formatDate(futureDateInNext60Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getDatabase, ref, get } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nexport const app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\nexport const database = getDatabase(app);\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const sortedInfoMonths = infoMonths && [...infoMonths]?.sort(\r\n    (a: string, b: string) => {\r\n      const dateA = new Date(a).getTime();\r\n      const dateB = new Date(b).getTime();\r\n\r\n      return dateA - dateB;\r\n    }\r\n  );\r\n\r\n \r\n\r\n  const databaseMonthsDatesToString = sortedInfoMonths?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { sortedInfoMonths, databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useParams } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return {monthURLStringFormat};\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return {monthURLStringFormat};\r\n  }\r\n\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport \"./_monthList.scss\";\r\n\r\nconst SidebarMonthsList = () => {\r\n  const { sortedInfoMonths, databaseMonthsDatesToString } = useMonthDates();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n  const { monthURL, isMonthInURL } = useURLValues();\r\n\r\n  const monthURLToDateFormat = isMonthInURL ? new Date(monthURL) : null;\r\n\r\n  const curMonthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup className=\"monthListContainer bg-white rounded-0 border border-primary\">\r\n      {!infoMonths || infoMonths.length === 0 ? (\r\n        <p className=\"py-1 px-2 text-warning text-center\">Brak danych</p>\r\n      ) : (\r\n        databaseMonthsDatesToString?.map((month: string, idx: number) => {\r\n          return (\r\n            <ListGroup.Item key={month} className=\"border-0 p-0 px-1\">\r\n              <Link\r\n                to={`/${sortedInfoMonths?.[idx]}`}\r\n                className={`${\r\n                  curMonthURLStringFormat !== month || !curMonthURLStringFormat\r\n                    ? \"text-reset\"\r\n                    : \"text-warning\"\r\n                } text-decoration-none text-capitalize`}\r\n              >\r\n                {month}\r\n              </Link>\r\n            </ListGroup.Item>\r\n          );\r\n        })\r\n      )}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthsList;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport SidebarMonthsList from \"./sidebarMonthList/SidebarMonthsList\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\n\r\nconst SidebarMonthCollapse = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        size=\"sm\"\r\n        className=\"p-0 px-1 border border-primary w-100 mt-1 text-start bg-white fw-medium d-flex justify-content-between align-items-center\"\r\n      >\r\n        {monthURLStringFormat}\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3 me-1\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div>\r\n          <SidebarMonthsList />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthCollapse;\r\n","import { useSelector } from \"react-redux\";\r\nimport useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport SidebarMonthCollapse from \"../../../components/sidebar/SidebarMonthCollapse\";\r\n\r\nconst MonthPanelHeaderSummary = () => {\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  return (\r\n    <>\r\n      <SidebarMonthCollapse />\r\n      {/* <div className=\"text-capitalize fw-medium mt-2 text-center d-md-none\">\r\n        {monthURLStringFormat}\r\n      </div> */}\r\n\r\n      <div className=\" d-flex justify-content-center my-2 fw-medium position-relative\">\r\n        <div className=\"text-capitalize fw-medium d-none d-md-block  position-absolute end-0\">\r\n          {monthURLStringFormat}\r\n        </div>\r\n\r\n        <div className=\"col-3 text-end\">Wszystkie</div>\r\n        <div className=\"mx-2\">\r\n          {month?.calc?.allHours} -{\" \"}\r\n          <span\r\n            className={`${month?.calc?.currentHours <= 0 ? \"text-danger\" : \"\"}`}\r\n          >\r\n            {month?.calc?.currentHours}\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`col-3 ${\r\n            month?.calc?.currentHours <= 0 ? \"text-danger\" : \"\"\r\n          }`}\r\n        >\r\n          {month?.calc?.currentHours < 0 ? \"Brak\" : \"Dostępne\"}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderSummary;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n"],"names":["navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","console","log","btnContent","_jsx","className","children","Spinner","animation","size","variant","Button","onClick","auth","signOut","then","catch","error","alert","finally","style","cursor","fontSize","disabled","dataUsers","useUsersQuery","data","users","names","map","_ref","userName","dataSelects","name","firstOption","concat","length","labelText","options","validationSchema","yup","test","value","required","hours","place","_month$columns","_useURLValues","useURLValues","yearFromURL","monthFromURL","month","useSelector","state","monthsPanel","_useAddDayMutation","useAddDayMutation","_useAddDayMutation2","addDay","success","firstColumn","columns","formik","useFormik","initialValues","id","date","dateInNext14Days","userColor","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_month$calc","_month$calc2","_users$find","valuesToDatabase","wrap","_context","prev","next","calc","currentHours","abrupt","find","user","_objectSpread","crypto","randomUUID","year","firstColumnBody","days","_toConsumableArray","stop","_x","apply","arguments","useDataSidebarSelects","_useSidebarDayFormik","useSidebarDayFormik","useHTTPState","isMonthInURL","allHours","_jsxs","Form","handleSubmit","Group","Label","htmlFor","Select","onChange","handleChange","onBlur","handleBlur","option","height","touched","errors","Control","type","min","max","dateInNext60Days","placeholder","minHeight","dispatch","useDispatch","_useMonthDataQuery","useMonthDataQuery","_useUsersQuery","errorUsers","isLoadingUsers","_useMonthsInfoQuery","useMonthsInfoQuery","dataInfoMonths","errorInfoMonths","isLoadingInfoMonths","useEffect","getMonth","getMonthError","getMonthIsLoading","getUsers","getUsersError","getUsersIsLoading","getInfoMonths","getInfoMonthError","getInfoMonthIsLoading","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","addAllHours","submittedHours","acceptedHours","_useMonthPanelHeaderF","useMonthPanelHeaderFormik","gradientValue","gradientBackground","width","Range","background","open","setOpen","_Fragment","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","SidebarHoursForm","monthPattern","rejectedHours","infoMonths","monthDate","undefined","includes","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","updateMonth","_useUpdateMonthInfoMu","useUpdateMonthInfoMutation","updateMonthInfo","_useDeleteMonthMutati","useDeleteMonthMutation","deleteMonth","useValidationSidebarMonthForm","isSuccess","setIsSuccess","currYearDigits","currMonthDigits","monthBody","slice","executeAddMonthInfo","_callee2","months","_year","_month","_context2","isError","_useSidebarMonthFormi","useSidebarMonthFormik","AiOutlinePlusCircle","Text","SidebarMonthForm","useReduxDatabase","pathname","useLocation","show","setShow","_useState3","window","innerWidth","_useState4","windowWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","offCanvasWidth","s","position","right","borderRadius","GiHamburgerMenu","Offcanvas","onHide","scroll","backdrop","backgroundColor","Header","closeButton","SidebarTitle","Body","SidebarMonthFormColapse","SidebarHoursFormCollapse","MonthPanelHeaderSummary","SidebarDayForm","Link","to","AiTwotoneSetting","today","Date","formatDate","getFullYear","String","padStart","day","getDate","futureDateInNext14Days","getTime","futureDateInNext60Days","currMonthDateToString","Intl","DateTimeFormat","timeZone","format","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","getDatabase","btnText","errMsg","status","Swal","text","confirmButtonColor","sortedInfoMonths","sort","a","b","databaseMonthsDatesToString","monthToDateFormat","monthURL","split","useParams","_Intl$DateTimeFormat","monthURLToDateFormat","monthURLStringFormat","_useMonthDates","useMonthDates","curMonthURLStringFormat","ListGroup","idx","Item","useMonthURLToString","SidebarMonthsList","_month$calc3","_month$calc4","_month$calc5","SidebarMonthCollapse","alertHelper","message","title","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText"],"sourceRoot":""}
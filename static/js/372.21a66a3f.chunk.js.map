{"version":3,"file":"static/js/372.21a66a3f.chunk.js","mappings":"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","sources":["pages/hoursPanel/utils.tsx","pages/hoursPanel/DayPrintData.tsx","pages/hoursPanel/Day.tsx","pages/hoursPanel/Column.tsx","components/inputs/TextInput.tsx","pages/hoursPanel/HeaderInPanel.tsx","components/inputs/RadioInput.tsx","pages/hoursPanel/dayForm/dataDayForm.tsx","pages/hoursPanel/dayForm/validationDayForm.tsx","pages/hoursPanel/dayForm/useDayForm.tsx","pages/hoursPanel/dayForm/DayForm.tsx","pages/hoursPanel/IndexHoursPanel.tsx"],"sourcesContent":["// export const createDaysInColumn = (num: number) => {\r\n//   let days = [];\r\n\r\n//   for (let i = 1; i <= num; i++) {\r\n//     days.push({\r\n//       id: crypto.randomUUID(),\r\n//       userName: \"\",\r\n//       date:\"\",\r\n//       hours: 0,\r\n//       location: \"\",\r\n//     });\r\n//   }\r\n\r\n//   return days;\r\n// };\r\n\r\nexport const addDaysToEmptyColumns = (arr: any) => {\r\n  return arr?.map((obj: any) => {\r\n    if (!obj.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId\r\n     &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","interface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <small>Imię:{props.day.userName}</small>\r\n      <small>{props.day.date}</small>\r\n      <small>Godz.: {props.day.hours}</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport DayForm from \"./dayForm/DayForm\";\r\nimport {\r\n  useUpdateColumnsMutation,\r\n  useDeleteAllColumnsMutation,\r\n  useColumnsQuery,\r\n} from \"../../services/apiSlice\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { addDaysToEmptyColumns } from \"./utils\";\r\nimport DayPrintData from \"./DayPrintData\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  const [updateColumns] = useUpdateColumnsMutation();\r\n\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const columnsIdFRomDatabase = data && Object.keys(data).join();\r\n  const columnsFromDatabase = data ? Object.values(data).flat() : [];\r\n  const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n\r\n  const updatedColumnsx = data ? [...columnsToPrint] : [];\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    const updatedColumnsWithFilteredDay = updatedColumnsx.map((column: any) => {\r\n      if (column && column.days) {\r\n        return {\r\n          ...column,\r\n          days: column.days.filter((day: any) => day.id !== id),\r\n        };\r\n      }\r\n      return column;\r\n    });\r\n\r\n    await updateColumns({\r\n      id: columnsIdFRomDatabase,\r\n      columns: updatedColumnsWithFilteredDay,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props?.day?.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <strong>{props.day.content}</strong>\r\n              <DayPrintData day={props.day} />\r\n              <button onClick={() => handleUpdate(props.day.id)}>\r\n                <FaTrashAlt />\r\n              </button>\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>{props.column.columnName} </h4>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: \"30vw\",\r\n                minHeight: \"100vh\",\r\n                height: \"fit-content\",\r\n              }}\r\n            >\r\n              {props.column.days && props.column.days.length >0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} \r\n                    />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","export interface Props {\r\n  type: string;\r\n  name: string;\r\n  value: string | number;\r\n  label: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextInput = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={props.name}>{props.label}</label>\r\n      <input\r\n        id={props.name}\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        onBlur={props.handleBlur}\r\n        placeholder={props.placeholder}\r\n        style={{ width: 50 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","\r\nimport TextInput from \"../../components/inputs/TextInput\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  useColumnsQuery,\r\n  useDeleteAllColumnsMutation\r\n} from \"../../services/apiSlice\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { handleChange } from \"../../redux/storeFeatures/hoursPanelSlice\";\r\n\r\nconst HeaderInPanel = () => {\r\n   const dispatch = useDispatch();\r\n   const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n  const { data, error } = useColumnsQuery(undefined);\r\n\r\n  const [deleteAllColumns, isLoading] = useDeleteAllColumnsMutation();\r\n\r\n  const columnsIdFRomDatabase = data && Object.keys(data).join();\r\n\r\n  const handleDelete = async () => {\r\n    await deleteAllColumns(columnsIdFRomDatabase);\r\n  };\r\n\r\n\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    dispatch(handleChange(value));\r\n  };\r\n\r\n  const handleAddDays = async () => {\r\n    ;\r\n  };\r\n\r\n\r\n  return (\r\n    <header>\r\n      <TextInput\r\n        type=\"number\"\r\n        name=\"numberOfDays\"\r\n        value={numberOfDays}\r\n        label=\"Godziny w miesiącu \"\r\n        placeholder=\"Dni\"\r\n        handleChange={handleInputChange}\r\n      />\r\n      <button onClick={handleAddDays}>Dodaj dni</button>\r\n\r\n      <button onClick={handleDelete}> usuń wszystko</button>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderInPanel;\r\n","import { ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  value: string;\r\n  name: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  checked: boolean;\r\n  containerClass?: string;\r\n  inuptClass?: string;\r\n  labelClass?: string;\r\n  label?: ReactNode;\r\n}\r\n\r\nconst RadioInput = (props: Props) => {\r\n  return (\r\n    <div className={props.containerClass}>\r\n      <input\r\n        type=\"radio\"\r\n        name={props.name}\r\n        value={props.value}\r\n        checked={props.checked}\r\n        onChange={props.handleChange}\r\n        className={props.inuptClass}\r\n        id={props.value}\r\n      />\r\n      <label htmlFor={props.value} className={props.labelClass}>\r\n       <small> {props.label ? props.label : props.value}</small>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioInput;\r\n","export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n\r\ninterface DayModel {\r\n  id?: string;\r\n  userName: string;\r\n  date: string;\r\n  hours: string | number;\r\n  place: string;\r\n}\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  columnName: string;\r\n  days?: DayModel[];\r\n}\r\n\r\nexport const columnsWithAddedDays: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    columnName: \"Miesiąc\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    columnName: \"Oczekujące\",\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    columnName: \"Zatwierdzone\",\r\n  },\r\n];\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup.string().required(\"Podaj imię\"),\r\n  date: yup.string().required(\"Podaj datę\"),\r\n  hours: yup.number().required(\"Podaj liczbę godzin\").moreThan(0, \"Liczba godzin musi być większa od 0\"),\r\n  place: yup.string().required(\"Podaj lokalizację\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport {\r\n  useAddDaysMutation,\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../../services/apiSlice\";\r\n\r\nimport { addDaysToEmptyColumns } from \"../utils\";\r\nimport { initialValues, columnsWithAddedDays } from \"./dataDayForm\";\r\nimport { validationSchema } from \"./validationDayForm\";\r\n\r\ninterface FormValues {\r\n  date: string;\r\n  hours: number | string;\r\n  userName: string;\r\n  place: string;\r\n}\r\n\r\nconst useDayForm = () => {\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [addDays, success] = useAddDaysMutation();\r\n  const [updateColumns] = useUpdateColumnsMutation();\r\n\r\n  const formik = useFormik<FormValues>({\r\n    initialValues: initialValues,\r\n    validationSchema: validationSchema,\r\n    onSubmit: async values => {\r\n      const columnsIdFRomDatabase = data && Object.keys(data).join();\r\n      const columnsFromDatabase = data ? Object.values(data).flat() : [];\r\n      const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n      const updatedColumns = data ? [...columnsToPrint] : [];\r\n\r\n      formik.setFieldValue(\"id\", crypto.randomUUID());\r\n      columnsWithAddedDays[0].days = [values];\r\n\r\n      updatedColumns[0] = data &&\r\n        columnsFromDatabase?.length > 0 && {\r\n          ...columnsToPrint?.[0],\r\n          days: [...columnsToPrint?.[0]?.days, ...[values]],\r\n        };\r\n\r\n      data === null\r\n        ? await addDays(columnsWithAddedDays)\r\n        : await updateColumns({\r\n            id: columnsIdFRomDatabase,\r\n            columns: updatedColumns,\r\n          });\r\n    },\r\n  });\r\n\r\n  return { formik };\r\n};\r\n\r\nexport default useDayForm;\r\n","import { FormEvent, useState } from \"react\";\r\nimport TextInput from \"../../../components/inputs/TextInput\";\r\nimport RadioInput from \"../../../components/inputs/RadioInput\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\nimport useDayForm from \"./useDayForm\";\r\n\r\ninterface FormValues {\r\n  userName: string;\r\n}\r\n\r\nconst DayForm = () => {\r\n  const { formik } = useDayForm();\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={formik.handleSubmit} style={{ marginTop: 20 }}>\r\n        {[\r\n          { type: \"text\", value: \"userName\", label: \"Imię\" },\r\n          { type: \"date\", value: \"date\", label: \"Dzień\" },\r\n          { type: \"number\", value: \"hours\", label: \"Godz.\" },\r\n        ].map(({ type, value, label }) => {\r\n          return (\r\n            <div key={value}>\r\n              <TextInput\r\n                type={type}\r\n                name={value}\r\n                value={formik.values[value as keyof typeof formik.values]}\r\n                label={label}\r\n                placeholder={label}\r\n                handleChange={formik.handleChange}\r\n                handleBlur={formik.handleBlur}\r\n              />\r\n              <div style={{ color: \"red\" }}>\r\n                {formik.touched[value as keyof typeof formik.values] &&\r\n                  formik.errors[value as keyof typeof formik.values] && (\r\n                    <small>\r\n                      {formik.errors[value as keyof typeof formik.values]}\r\n                    </small>\r\n                  )}\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        {[\"Wewnątrz\", \"Poza\"].map(place => {\r\n          return (\r\n            <RadioInput\r\n              key={place}\r\n              value={place}\r\n              name={\"place\"}\r\n              handleChange={formik.handleChange}\r\n              checked={formik.values.place === place}\r\n            />\r\n          );\r\n        })}\r\n        <div style={{ color: \"red\" }}>\r\n          {formik.touched.place && formik.errors.place && (\r\n            <small>{formik.errors.place}</small>\r\n          )}\r\n        </div>\r\n\r\n        <button type={\"submit\"}>\r\n          <FcApproval />\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport {\r\n  useDeleteAllColumnsMutation,\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderInPanel from \"./HeaderInPanel\";\r\nimport { handleDragDrop, addDaysToEmptyColumns } from \"./utils\";\r\nimport DayForm from \"./dayForm/DayForm\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\n\r\nconst IndexHoursPanel = () => {\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [deleteAllColumns, isLoading] = useDeleteAllColumnsMutation();\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n  const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const columnsFromDatabase = data && Object.values(data).flat();\r\n  const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  const columnsId = data && Object.keys(data).join();\r\n  const columnsToUpdate = { id: columnsId, columns: columns };\r\n\r\n  useEffect(() => {\r\n    setColumns(columnsToPrint);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    updateColumns(columnsToUpdate);\r\n  }, [columns]);\r\n\r\n  return (\r\n    <>\r\n      <HeaderInPanel />\r\n      <DayForm />\r\n      <div style={{ display: \"flex\" }}>\r\n        <p>wszystkie godziny: {numberOfDays}</p>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          {columns &&\r\n            columns.length > 0 &&\r\n            columns.map((column: any, idx: any) => {\r\n              return <Column column={column} key={column.id} />;\r\n            })}\r\n        </DragDropContext>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexHoursPanel;\r\n"],"names":["addDaysToEmptyColumns","arr","map","obj","hasOwnProperty","_objectSpread","days","props","_jsxs","children","day","userName","_jsx","date","hours","_props$day","_useUpdateColumnsMuta","useUpdateColumnsMutation","updateColumns","_slicedToArray","_useColumnsQuery","useColumnsQuery","undefined","data","columnsIdFRomDatabase","error","Object","keys","join","columnsFromDatabase","values","flat","columnsToPrint","updatedColumnsx","_toConsumableArray","handleUpdate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","updatedColumnsWithFilteredDay","wrap","_context","prev","next","column","filter","columns","stop","_x","apply","arguments","style","border","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","content","DayPrintData","onClick","FaTrashAlt","columnName","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","width","minHeight","height","length","idx","Day","crypto","randomUUID","placeholder","htmlFor","name","label","type","value","onChange","handleChange","onBlur","handleBlur","dispatch","useDispatch","numberOfDays","useSelector","state","hoursPanel","_useDeleteAllColumnsM","useDeleteAllColumnsMutation","_useDeleteAllColumnsM2","deleteAllColumns","handleDelete","handleAddDays","_ref2","_callee2","_context2","TextInput","e","target","className","containerClass","checked","inuptClass","labelClass","initialValues","place","columnsWithAddedDays","validationSchema","yup","required","moreThan","_useAddDaysMutation","useAddDaysMutation","_useAddDaysMutation2","addDays","formik","useFormik","onSubmit","_onSubmit","_columnsToPrint$","updatedColumns","setFieldValue","concat","useDayForm","_Fragment","handleSubmit","marginTop","color","touched","errors","RadioInput","FcApproval","_useUpdateColumnsMuta2","_useState","useState","_useState2","setColumns","columnsToUpdate","useEffect","HeaderInPanel","DayForm","display","DragDropContext","onDragEnd","results","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","Column"],"sourceRoot":""}
{"version":3,"file":"static/js/615.3abc7fa6.chunk.js","mappings":"sOAyBA,EAhBkB,SAACA,GACjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAAD,SAAQF,EAAMI,SACdD,EAAAA,EAAAA,KAAA,SACEE,KAAML,EAAMK,KACZC,KAAMN,EAAMM,KACZC,MAAOP,EAAMO,MACbC,SAAUR,EAAMS,aAChBC,YAAaV,EAAMU,YACnBC,MAAO,CAAEC,MAAO,QAIxB,ECSA,EAnBmB,SAACZ,GAClB,OACEC,EAAAA,EAAAA,MAAA,OAAKY,UAAWb,EAAMc,eAAeZ,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACEE,KAAK,QACLC,KAAMN,EAAMM,KACZC,MAAOP,EAAMO,MACbQ,QAASf,EAAMe,QACfP,SAAUR,EAAMS,aAChBI,UAAWb,EAAMgB,WACjBC,GAAIjB,EAAMO,SAEZJ,EAAAA,EAAAA,KAAA,SAAOe,QAASlB,EAAMO,MAAOM,UAAWb,EAAMmB,WAAWjB,UACxDD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,IAAEF,EAAMI,MAAQJ,EAAMI,MAAQJ,EAAMO,aAIlD,E,oBCqCA,EA7DgB,WACd,IAAAa,GAAgCC,EAAAA,EAAAA,UAAS,CACvCC,MAAO,GACPC,SAAU,GACVC,SAAU,KACVC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAJKO,EAAQF,EAAA,GAMTG,GANsBH,EAAA,GAMF,WAE1B,GAOMI,EAAe,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,wBAAAF,EAAAG,OAAA,GAAAL,EAAA,KAAc,kBAAjB,OAAAJ,EAAAU,MAAA,KAAAC,UAAA,KAErB,OACExC,EAAAA,EAAAA,MAAAyC,EAAAA,SAAA,CAAAxC,SAAA,EACED,EAAAA,EAAAA,MAAA,QAAM0C,SATW,SAACC,GACpBA,EAAEC,gBAEJ,EAMiC3C,SAAA,CAC1B,CACC,CAAEG,KAAM,OAAQC,KAAM,OAAQF,MAAO,cACrC,CAAEC,KAAM,SAAUC,KAAM,QAASF,MAAO,QACxC,CAAEC,KAAM,OAAQC,KAAM,WAAYF,MAAO,cACzC0C,KAAI,SAAAC,GAA4B,IAAzB1C,EAAI0C,EAAJ1C,KAAMC,EAAIyC,EAAJzC,KAAMF,EAAK2C,EAAL3C,MACnB,OACED,EAAAA,EAAAA,KAAC6C,EAAS,CAER3C,KAAMA,EACNC,KAAMA,EACNC,MAAOoB,EAASrB,GAChBF,MAAOA,EACPM,YAAaN,EACbK,aAAcmB,GANTtB,EASX,IAEC,CAAC,gBAAY,QAAQwC,KAAI,SAAAtB,GACxB,OACErB,EAAAA,EAAAA,KAAC8C,EAAU,CAET1C,MAAOiB,EACPlB,KAAM,WACNG,aAAcmB,EACdb,QAASY,EAASH,WAAaA,GAJ1BA,EAOX,KACArB,EAAAA,EAAAA,KAAA,UAAAD,UACEC,EAAAA,EAAAA,KAAC+C,EAAAA,IAAU,UAGf/C,EAAAA,EAAAA,KAAA,UAAQgD,QAAStB,EAAgB3B,UAC/BC,EAAAA,EAAAA,KAACiD,EAAAA,IAAU,QAInB,EC9BA,EA1BY,SAACpD,GAGX,OACEG,EAAAA,EAAAA,KAAA,OAAKQ,MAAO,CAAE0C,OAAQ,mBAAoBnD,UACxCC,EAAAA,EAAAA,KAACmD,EAAAA,GAAS,CACRC,YAAavD,EAAMwD,KAAOxD,EAAMwD,IAAIvC,GAAGwC,WACvCC,MAAO1D,EAAM0D,MAAMxD,SAElB,SAAAyD,GACC,OACE1D,EAAAA,EAAAA,MAAA,OAAA2D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMD,EAASE,gBACTF,EAASG,iBAAe,IAC5BC,IAAKJ,EAASK,SAAS9D,SAAA,EAEvBC,EAAAA,EAAAA,KAAA,UAAAD,SAASF,EAAMwD,IAAIS,WACnB9D,EAAAA,EAAAA,KAAC+D,EAAO,OAGd,KAIR,ECOA,EAjCe,SAAClE,GAGd,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,MAAAC,SAAA,CAAKF,EAAMmE,OAAOC,WAAW,QAC7BjE,EAAAA,EAAAA,KAACkE,EAAAA,GAAS,CAACC,YAAatE,EAAMmE,OAAOlD,GAAGf,SACrC,SAACyD,EAAUY,GAAc,IAADC,EAAAC,EACvB,OACExE,EAAAA,EAAAA,MAAA,OAAA2D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMD,EAASe,gBAAc,IAC3BX,IAAKJ,EAASK,SACdrD,MAAO,CACL0C,OAAQ,kBACRzC,MAAO,OACP+D,OAAQ,eACRzE,SAAA,CAEDF,EAAMmE,OAAOS,OACA,QADIJ,EAChBxE,EAAMmE,cAAM,IAAAK,GAAM,QAANC,EAAZD,EAAcI,YAAI,IAAAH,OAAN,EAAZA,EAAoB3B,KAAI,SAACU,EAAUE,GACjC,OACEvD,EAAAA,EAAAA,KAAC0E,EAAG,CAACrB,IAAKA,EAAKE,MAAOA,GAAYoB,OAAOC,aAE7C,KACDpB,EAASjD,eAGhB,MAIR,E,6BCtCasE,EAAqB,SAACC,GAGjC,IAFA,IAAIL,EAAO,GAEFM,EAAI,EAAGA,GAAKD,EAAKC,IACxBN,EAAKO,KAAK,CACRlE,GAAI6D,OAAOC,aACXd,QAASiB,EAAEzB,WACXlC,SAAU,GACV6D,KAAK,GACL9D,MAAO,EACPE,SAAU,KAId,OAAOoD,CACT,EAEaS,EAAwB,SAACC,GACpC,OAAU,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKxC,KAAI,SAACyC,GACf,OAAKA,EAAIC,eAAe,QAGjBD,GAFL3B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY2B,GAAG,IAAEX,KAAM,IAG3B,GACF,ECbaa,EAAiC,CAC5C,CACExE,GAAI,UACJmD,WAAY,eACZQ,KAAM,IAER,CACE3D,GAAI,kBACJmD,WAAY,mBAEd,CACEnD,GAAI,eACJmD,WAAY,iBCkDhB,EA5DsB,WAAO,IAADsB,EACpBC,GAAWC,EAAAA,EAAAA,MACTC,GAAiBC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAAnEH,aAERI,GAAwBC,EAAAA,EAAAA,SAAgBC,GAAhCC,EAAIH,EAAJG,KACRC,GADmBJ,EAALK,OACaC,EAAAA,EAAAA,OAAoBC,GAAA9E,EAAAA,EAAAA,GAAA2E,EAAA,GAAxCI,EAAOD,EAAA,GACdE,GADuBF,EAAA,IACCG,EAAAA,EAAAA,MAAjBC,GAA2ClF,EAAAA,EAAAA,GAAAgF,EAAA,GAA9B,GACpBG,GAAsCC,EAAAA,EAAAA,MAA6BC,GAAArF,EAAAA,EAAAA,GAAAmF,EAAA,GAA5DG,EAAgBD,EAAA,GAAWA,EAAA,GAElCtB,EAAgB,GAAGb,KAAOI,EAAmBa,GAC7C,IAAMoB,EAAYjC,EAAmBa,GAE/BqB,EAAwBd,GAAQe,OAAOC,KAAKhB,GAAMiB,OAClDC,EAAsBlB,EAAOe,OAAOI,OAAOnB,GAAMoB,OAAS,GAC1DC,EAAiBpC,EAAsBiC,GAEvCI,EAAgBtB,GAAIuB,EAAAA,EAAAA,GAAOF,GAAkB,GAEnDC,EAAc,GAAKtB,IACE,OAAnBkB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBM,QAAS,IAAChE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZ,OAAd6D,QAAc,IAAdA,OAAc,EAAdA,EAAiB,IAAE,IACtB7C,KAAK,GAADiD,QAAAF,EAAAA,EAAAA,GAAoB,OAAdF,QAAc,IAAdA,GAAmB,QAAL/B,EAAd+B,EAAiB,UAAE,IAAA/B,OAAL,EAAdA,EAAqBd,OAAI+C,EAAAA,EAAAA,GAAKV,MAG5C,IAKMa,EAAW,eAAAhG,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,OAAAF,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACT,OAAT8D,EAAa,CAAAhE,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACHmE,EAAQhB,GAAgB,OAAArD,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EACxBsE,EAAc,CAClB3F,GAAIiG,EACJa,QAASL,IACR,KAAD,mBAAAtF,EAAAG,OAAA,GAAAL,EAAA,KACP,kBAPgB,OAAAJ,EAAAU,MAAA,KAAAC,UAAA,KASXuF,EAAY,eAAAjF,GAAAhB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgG,IAAA,OAAAjG,EAAAA,EAAAA,KAAAG,MAAA,SAAA+F,GAAA,cAAAA,EAAA7F,KAAA6F,EAAA5F,MAAA,cAAA4F,EAAA5F,KAAA,EACb0E,EAAiBE,GAAuB,KAAD,mBAAAgB,EAAA3F,OAAA,GAAA0F,EAAA,KAC9C,kBAFiB,OAAAlF,EAAAP,MAAA,KAAAC,UAAA,KAMlB,OAFA0F,QAAQC,IAAIhC,IAGVnG,EAAAA,EAAAA,MAAA,UAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC6C,EAAS,CACR3C,KAAK,SACLC,KAAK,eACLC,MAAOsF,EACPzF,MAAM,mCACNM,YAAY,MACZD,aA5BoB,SAACmC,GACzB,IAAQrC,EAAUqC,EAAEyF,OAAZ9H,MACRoF,GAASlF,EAAAA,EAAAA,IAAaF,GACxB,KA2BIJ,EAAAA,EAAAA,KAAA,UAAQgD,QAAS2E,EAAY5H,SAAC,eAC9BC,EAAAA,EAAAA,KAAA,UAAQgD,QAAS6E,EAAa9H,SAAC,0BAGrC,ECrBA,EAvCwB,WACtB,IAAA+F,GAAwBC,EAAAA,EAAAA,SAAgBC,GAAhCC,EAAIH,EAAJG,KACRS,GADmBZ,EAALK,OACwBQ,EAAAA,EAAAA,OAA6BC,GAAArF,EAAAA,EAAAA,GAAAmF,EAAA,GACnEH,GADuBK,EAAA,GAAWA,EAAA,IACDJ,EAAAA,EAAAA,MAA0B2B,GAAA5G,EAAAA,EAAAA,GAAAgF,EAAA,GAApDE,EAAa0B,EAAA,GAEdhB,GAFuBgB,EAAA,GAEDlC,GAAQe,OAAOI,OAAOnB,GAAMoB,QAClDC,EAAiBpC,EAAsBiC,GAC7ClG,GAA8BC,EAAAA,EAAAA,UAAS,IAAGI,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAnC2G,EAAOtG,EAAA,GAAE8G,EAAU9G,EAAA,GAGpB+G,EAAkB,CAAEvH,GADRmF,GAAQe,OAAOC,KAAKhB,GAAMiB,OACHU,QAASA,GAUlD,OARAU,EAAAA,EAAAA,YAAU,WACRF,EAAWd,EACb,GAAG,CAACrB,KAEJqC,EAAAA,EAAAA,YAAU,WACR7B,EAAc4B,EAChB,GAAG,CAACT,KAGF9H,EAAAA,EAAAA,MAAAyC,EAAAA,SAAA,CAAAxC,SAAA,EACEC,EAAAA,EAAAA,KAACuI,EAAa,KAEdvI,EAAAA,EAAAA,KAAA,OAAKQ,MAAO,CAAEgI,QAAS,QAASzI,UAC9BC,EAAAA,EAAAA,KAACyI,EAAAA,GAAe,CACdC,UAAW,SAAAC,GAAO,OHXE,SAACA,EAAcf,EAAcQ,GACzD,IAAQQ,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,YAEhB,GAAKA,IAEHD,EAAOxF,cAAgByF,EAAY1E,aACnCyE,EAAOrF,QAAUsF,EAAYtF,OAI/B,GAAIqF,EAAOzE,cAAgB0E,EAAY1E,YAAa,CAClD,IAAM2E,EAAkBlB,EAAQmB,WAAU,SAAC/E,GACzC,OAAOA,EAAOlD,KAAO8H,EAAOzE,WAC9B,IAEM6E,EAAuBpB,EAAQmB,WAAU,SAAC/E,GAC9C,OAAOA,EAAOlD,KAAO+H,EAAY1E,WACnC,IAEM8E,GAAazB,EAAAA,EAAAA,GAAOI,EAAQkB,GAAiBrE,MAE7CyE,EACJN,EAAOzE,cAAgB0E,EAAYM,YAAU3B,EAAAA,EAAAA,GACrCI,EAAQoB,GAAsBvE,MAClCwE,EAENG,EAAqBH,EAAcI,OAAOT,EAAOrF,MAAO,GAAjD+F,GAAmD/H,EAAAA,EAAAA,GAAA6H,EAAA,GAAzC,GACjBF,EAAmBG,OAAOR,EAAYtF,MAAO,EAAG+F,GAEhD,IAAMC,GAAU/B,EAAAA,EAAAA,GAAOI,GAEvB2B,EAAWT,IAAgBrF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBmE,EAAQkB,IAAgB,IAC3BrE,KAAMwE,IAGRM,EAAWP,IAAqBvF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BmE,EAAQoB,IAAqB,IAChCvE,KAAMyE,IAGRd,EAAWmB,EACb,KAAO,CACL,IAAMC,EAAgBX,EAAYtF,MAE5BuF,EAAkBlB,EAAQmB,WAAU,SAAC/E,GACzC,OAAOA,EAAOlD,KAAO8H,EAAOzE,WAC9B,IAEMM,GAAI+C,EAAAA,EAAAA,GAAOI,EAAQkB,GAAiBrE,MAC1CgF,EAAqBhF,EAAK4E,OAAOT,EAAOrF,MAAO,GAAxC+F,GAA0C/H,EAAAA,EAAAA,GAAAkI,EAAA,GAAhC,GACjBhF,EAAK4E,OAAOG,EAAe,EAAGF,GAE9B,IAAMI,GAAUlC,EAAAA,EAAAA,GAAOI,GAEvB8B,EAAWZ,IAAgBrF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBmE,EAAQkB,IAAgB,IAC3BrE,KAAMA,IAGR2D,EAAWsB,EACb,CACF,CGnDgCC,CAAehB,EAASf,EAASQ,EAAW,EAACrI,SAElE6H,GACCA,EAAQH,OAAS,GACjBG,EAAQjF,KAAI,SAACqB,GACX,OAAOhE,EAAAA,EAAAA,KAAC4J,EAAM,CAAC5F,OAAQA,GAAaA,EAAOlD,GAC7C,UAKZ,C","sources":["components/inputs/TextInput.tsx","components/inputs/RadioInput.tsx","pages/hoursPanel/DayForm.tsx","pages/hoursPanel/Day.tsx","pages/hoursPanel/Column.tsx","pages/hoursPanel/utils.tsx","pages/hoursPanel/dataHoursPanel.tsx","pages/hoursPanel/HeaderInPanel.tsx","pages/hoursPanel/IndexHoursPanel.tsx"],"sourcesContent":["export interface Props {\r\n  type: string;\r\n  name: string;\r\n  value: string | number;\r\n  label: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextInput = (props: Props) => {\r\n  return (\r\n    <div >\r\n      <label>{props.label}</label>\r\n      <input\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        placeholder={props.placeholder}\r\n        style={{ width: 50 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  value: string;\r\n  name: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  checked: boolean;\r\n  containerClass?: string;\r\n  inuptClass?: string;\r\n  labelClass?: string;\r\n  label?: ReactNode;\r\n}\r\n\r\nconst RadioInput = (props: Props) => {\r\n  return (\r\n    <div className={props.containerClass}>\r\n      <input\r\n        type=\"radio\"\r\n        name={props.name}\r\n        value={props.value}\r\n        checked={props.checked}\r\n        onChange={props.handleChange}\r\n        className={props.inuptClass}\r\n        id={props.value}\r\n      />\r\n      <label htmlFor={props.value} className={props.labelClass}>\r\n       <small> {props.label ? props.label : props.value}</small>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioInput;\r\n","import { FormEvent, useState } from \"react\";\r\nimport TextInput from \"../../components/inputs/TextInput\";\r\nimport RadioInput from \"../../components/inputs/RadioInput\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\n\r\nconst DayForm = () => {\r\n  const [userData, setUserData] = useState({\r\n    hours: \"\",\r\n    userName: \"\",\r\n    location: \"\",\r\n  });\r\n\r\n  const handleInputChange = () => {\r\n    return;\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    return;\r\n  };\r\n\r\n  const handleDeleteDay = async () => {};\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        {[\r\n          { type: \"date\", name: \"date\", label: \"Dzień\" },\r\n          { type: \"number\", name: \"hours\", label: \"Godz\" },\r\n          { type: \"text\", name: \"userName\", label: \"Imię\" },\r\n        ].map(({ type, name, label }) => {\r\n          return (\r\n            <TextInput\r\n              key={name}\r\n              type={type}\r\n              name={name}\r\n              value={userData[name as keyof typeof userData]}\r\n              label={label}\r\n              placeholder={label}\r\n              handleChange={handleInputChange}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {[\"Wewnątrz\", \"Poza\"].map(location => {\r\n          return (\r\n            <RadioInput\r\n              key={location}\r\n              value={location}\r\n              name={\"location\"}\r\n              handleChange={handleInputChange}\r\n              checked={userData.location === location}\r\n            />\r\n          );\r\n        })}\r\n        <button>\r\n          <FcApproval />\r\n        </button>\r\n      </form>\r\n      <button onClick={handleDeleteDay}>\r\n        <FaTrashAlt />\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","import { useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport DayForm from \"./DayForm\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n \r\n\r\n  return (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props.day.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <strong>{props.day.content}</strong>\r\n              <DayForm/>\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>{props.column.columnName} </h4>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: \"30vw\",\r\n                height: \"fit-content\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column?.days?.map((day: any, index: any) => {\r\n                  return (\r\n                    <Day day={day} index={index} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","export const createDaysInColumn = (num: number) => {\r\n  let days = [];\r\n\r\n  for (let i = 1; i <= num; i++) {\r\n    days.push({\r\n      id: crypto.randomUUID(),\r\n      content: i.toString(),\r\n      userName: \"\",\r\n      date:\"\",\r\n      hours: 0,\r\n      location: \"\",\r\n    });\r\n  }\r\n\r\n  return days;\r\n};\r\n\r\nexport const addDaysToEmptyColumns = (arr: any) => {\r\n  return arr?.map((obj: any) => {\r\n    if (!obj.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","// interface DayModel {\r\n//   id: string;\r\n//   content: string;\r\n// }\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  columnName: string;\r\n  days?: any;\r\n}\r\n\r\nexport const columnsWithDays: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    columnName: \"Miesiąc\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    columnName: \"Oczekujące\",\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    columnName: \"Zatwierdzone\",\r\n  },\r\n];\r\n","import TextInput from \"../../components/inputs/TextInput\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../redux/storeFeatures/hoursPanelSlice\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport {\r\n  useAddDaysMutation,\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n  useDeleteAllColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport { addDaysToEmptyColumns, createDaysInColumn } from \"./utils\";\r\nimport { columnsWithDays } from \"./dataHoursPanel\";\r\n\r\nconst HeaderInPanel = () => {\r\n  const dispatch = useDispatch();\r\n  const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [addDays, success] = useAddDaysMutation();\r\n  const [updateColumns] = useUpdateColumnsMutation();\r\n  const [deleteAllColumns, isLoading] = useDeleteAllColumnsMutation();\r\n\r\n  columnsWithDays[0].days = createDaysInColumn(numberOfDays);\r\n  const addedDays = createDaysInColumn(numberOfDays);\r\n\r\n  const columnsIdFRomDatabase = data && Object.keys(data).join();\r\n  const columnsFromDatabase = data ? Object.values(data).flat() : [];\r\n  const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n\r\n  const updatedCoumns = data ? [...columnsToPrint] : [];\r\n\r\n  updatedCoumns[0] = data &&\r\n    columnsFromDatabase?.length > 0 && {\r\n      ...columnsToPrint?.[0],\r\n      days: [...columnsToPrint?.[0]?.days, ...addedDays],\r\n    };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    dispatch(handleChange(value));\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    data === null\r\n      ? await addDays(columnsWithDays)\r\n      : await updateColumns({\r\n          id: columnsIdFRomDatabase,\r\n          columns: updatedCoumns,\r\n        });\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    await deleteAllColumns(columnsIdFRomDatabase);\r\n  };\r\n\r\n  console.log(data);\r\n\r\n  return (\r\n    <header>\r\n      <TextInput\r\n        type=\"number\"\r\n        name=\"numberOfDays\"\r\n        value={numberOfDays}\r\n        label=\"Ilość planowanych dni \"\r\n        placeholder=\"Dni\"\r\n        handleChange={handleInputChange}\r\n      />\r\n      <button onClick={handleClick}>Dodaj dni</button>\r\n      <button onClick={handleDelete}> usuń wszystko</button>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderInPanel;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport {\r\n  useDeleteAllColumnsMutation,\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderInPanel from \"./HeaderInPanel\";\r\nimport { handleDragDrop, addDaysToEmptyColumns } from \"./utils\";\r\n\r\nconst IndexHoursPanel = () => {\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [deleteAllColumns, isLoading] = useDeleteAllColumnsMutation();\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n\r\n  const columnsFromDatabase = data && Object.values(data).flat();\r\n  const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  const columnsId = data && Object.keys(data).join();\r\n  const columnsToUpdate = { id: columnsId, columns: columns };\r\n\r\n  useEffect(() => {\r\n    setColumns(columnsToPrint);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    updateColumns(columnsToUpdate);\r\n  }, [columns]);\r\n\r\n  return (\r\n    <>\r\n      <HeaderInPanel />\r\n\r\n      <div style={{ display: \"flex\" }}>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          {columns &&\r\n            columns.length > 0 &&\r\n            columns.map((column: any) => {\r\n              return <Column column={column} key={column.id} />;\r\n            })}\r\n        </DragDropContext>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexHoursPanel;\r\n"],"names":["props","_jsxs","children","_jsx","label","type","name","value","onChange","handleChange","placeholder","style","width","className","containerClass","checked","inuptClass","id","htmlFor","labelClass","_useState","useState","hours","userName","location","_useState2","_slicedToArray","userData","handleInputChange","handleDeleteDay","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","_Fragment","onSubmit","e","preventDefault","map","_ref2","TextInput","RadioInput","FcApproval","onClick","FaTrashAlt","border","Draggable","draggableId","day","toString","index","provided","_objectSpread","draggableProps","dragHandleProps","ref","innerRef","content","DayForm","column","columnName","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","height","days","Day","crypto","randomUUID","createDaysInColumn","num","i","push","date","addDaysToEmptyColumns","arr","obj","hasOwnProperty","columnsWithDays","_columnsToPrint$","dispatch","useDispatch","numberOfDays","useSelector","state","hoursPanel","_useColumnsQuery","useColumnsQuery","undefined","data","_useAddDaysMutation","error","useAddDaysMutation","_useAddDaysMutation2","addDays","_useUpdateColumnsMuta","useUpdateColumnsMutation","updateColumns","_useDeleteAllColumnsM","useDeleteAllColumnsMutation","_useDeleteAllColumnsM2","deleteAllColumns","addedDays","columnsIdFRomDatabase","Object","keys","join","columnsFromDatabase","values","flat","columnsToPrint","updatedCoumns","_toConsumableArray","length","concat","handleClick","columns","handleDelete","_callee2","_context2","console","log","target","_useUpdateColumnsMuta2","setColumns","columnsToUpdate","useEffect","HeaderInPanel","display","DragDropContext","onDragEnd","results","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","Column"],"sourceRoot":""}
{"version":3,"file":"static/js/561.c8dad762.chunk.js","mappings":"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","sources":["components/alert/Alert.tsx","components/inputs/FormErrors.tsx","components/inputs/InputsText.tsx","hooks/updateReduxDatabase/useReduxListUsers.tsx","components/inputs/inputsRange/InputsRange.tsx","components/formHours/FormHoursError.tsx","components/formHours/FormHoursTop.tsx","components/formHours/useFormikHours.tsx","components/formHours/FormHoursContext.tsx","components/CollapseMonthsList.tsx","components/inputs/InputsSelect.tsx","components/formDay/FormDayButton.tsx","components/formDay/useDataFormDay.tsx","components/formDay/validationFormDay.tsx","components/formDay/useFormikDay.tsx","components/formDay/FormDayContext.tsx","components/formMonth/useValidationMonthForm.tsx","components/formMonth/dataFormMonth.tsx","components/formMonth/useFormikMonth.tsx","components/formMonth/FormMonthContext.tsx","components/formUser/useValidationFormUser.tsx","components/formUser/useFormikUser.tsx","components/formUser/FormUserContext.tsx","components/CollapseContainer.tsx","components/sidebar/useDataSidebar.tsx","components/sidebar/SidebarBody.tsx","components/sidebar/SidebarHeader.tsx","components/sidebar/SidebarMenuButton.tsx","components/sidebar/SidebarLogout.tsx","components/sidebar/SettingsReturnButton.tsx","components/sidebar/SidebarNav.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","hooks/useDatabaseListMonths.tsx","hooks/updateReduxDatabase/useReduxListMonths.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { closeAlert, agreeAlert } from \"../../redux/storeFeatures/alertSlice\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./_alert.scss\";\r\n\r\nconst Alert = () => {\r\n  const dispatch = useDispatch();\r\n  const { isPrinted, header } = useSelector((state: RootState) => state.alert);\r\n\r\n  const handleClose = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (\r\n      (e.target as HTMLElement)?.id !== \"opacityContainer\" &&\r\n      (e.target as HTMLElement)?.id !== \"noButton\"\r\n    )\r\n      return;\r\n    dispatch(agreeAlert(false));\r\n    dispatch(closeAlert());\r\n  };\r\n\r\n  const handleAgree = () => {\r\n    dispatch(agreeAlert(true));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isPrinted ? (\r\n        <div\r\n          id=\"opacityContainer\"\r\n          className=\"fixed-top d-flex justify-content-center align-items-center \"\r\n          onClick={e => handleClose(e)}\r\n          style={{\r\n            height: \"100vh\",\r\n            zIndex:\"1060\" ,\r\n            backgroundColor: \"rgba(0,0,0,0.4)\",\r\n          }}\r\n        >\r\n          <div\r\n            className={`p-4 bg-white rounded-1 fs-3 fw-medium ${\r\n              isPrinted ? \"alertAnimationDown\" : \"alertAnimationUp\"\r\n            }`}\r\n          >\r\n            {header}\r\n            <div className=\"w-fit-content m-auto\">\r\n              {header.includes(\"Usunąć\") ? (\r\n                <>\r\n                  <Button id=\"noButton\">Nie</Button>\r\n                  <Button\r\n                    onClick={handleAgree}\r\n                    className=\"bg-danger ms-4 border \"\r\n                  >\r\n                    Tak\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <Button id=\"noButton\">Ok</Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import { FormikTouched, FormikErrors } from \"formik\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  errors: FormikErrors<ModelDay>;\r\n  touched: FormikTouched<ModelDay>;\r\n};\r\n\r\nconst FormErrors = (props: Props) => {\r\n  return (\r\n    <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"0.7rem\" }}>\r\n      {props.touched[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormErrors;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    value: string;\r\n    type: string;\r\n    label?: string;\r\n    placeholder?: string;\r\n    isErrorPrint?: boolean;\r\n    min?: string;\r\n    max?: string;\r\n  }[];\r\n};\r\n\r\nconst InputsText = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue, errors, touched } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(\r\n        ({ value, label, type, isErrorPrint, min, max, placeholder }) => {\r\n          return (\r\n            <Form.Group key={value}>\r\n              {label && (\r\n                <Form.Label\r\n                  htmlFor=\"date\"\r\n                  className=\"mb-0 fs-responsive fw-medium\"\r\n                >\r\n                  {label}\r\n                </Form.Label>\r\n              )}\r\n              <Form.Control\r\n                id={value}\r\n                type={type}\r\n                name={value}\r\n                value={values[value as keyof typeof values]}\r\n                onChange={e => setFieldValue(value, e.target.value)}\r\n                onBlur={handleBlur}\r\n                min={min}\r\n                max={max}\r\n                placeholder={placeholder}\r\n                size=\"sm\"\r\n                className=\"p-0 px-1 border border-primary shadow-sm w-100 \"\r\n                style={{ minHeight: 0  }}\r\n              />\r\n              {isErrorPrint && (\r\n                <FormErrors value={value} errors={errors} touched={touched} />\r\n              )}\r\n            </Form.Group>\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsText;\r\n","import { useEffect } from \"react\";\r\nimport { useUsersQuery } from \"../../services/apiSliceUsers\";\r\nimport {\r\n  geListtUsers,\r\n  getListUsersError,\r\n  getListUsersIsLoading,\r\n} from \"../../redux/storeFeatures/listUsersSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useReduxListUsers = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { data, error, isLoading } = useUsersQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(geListtUsers(data));\r\n\r\n    dispatch(getListUsersError(error));\r\n\r\n    dispatch(getListUsersIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxListUsers;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\ntype Props = {\r\n  inputsValues: string[];\r\n};\r\n\r\nconst InputsRange = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelFormValues>();\r\n\r\n  const gradientValue = values.allHours / 3.2;\r\n  const gradientBackground: string = `linear-gradient(to right, rgba(180,120,255) ${gradientValue}%, rgba(180,180,255) ${gradientValue}%)`;\r\n\r\n  return (\r\n    <>\r\n      {props.inputsValues.map(value => {\r\n        return (\r\n          <Form.Group\r\n            key={value}\r\n            className=\"mt-2 d-flex align-items-center w-100\"\r\n          >\r\n            <Form.Range\r\n              name={value}\r\n              min={0}\r\n              max={320}\r\n              value={values[value as keyof typeof values]}\r\n              onChange={e => setFieldValue(value, e.target.value)}\r\n              onBlur={handleBlur}\r\n              className=\"form-range custom-range medium\"\r\n              style={{\r\n                height: 10,\r\n                background: gradientBackground,\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsRange;\r\n","import { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\nconst FormHoursError = () => {\r\n  const { values } = useFormikContext<ModelFormValues>();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  var content = \"\";\r\n\r\n  if (month) {\r\n    if (\r\n      month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours >\r\n      +values?.allHours\r\n    ) {\r\n      content = `Min. ${\r\n        month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours\r\n      } h`;\r\n    }\r\n  }\r\n\r\n  return <div className=\"text-danger fs-8\">{content}</div>;\r\n};\r\n\r\nexport default FormHoursError;\r\n","import InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormHoursTop = () => {\r\n\r\n  const dataInputsText = [\r\n    { value: \"allHours\", type: \"number\", isErrorPrint: false },\r\n  ];\r\n\r\n  const styles = \"fs-7 d-flex align-items-end\";\r\n  return (\r\n    <div className=\"d-flex justify-content-between fw-medium \">\r\n      <div className={styles}>0 h</div>\r\n\r\n      <div className=\"col-6 col-sm-5 d-flex\" style={{ width: \"62px\" }}>\r\n        <InputsText inputsData={dataInputsText} /> &nbsp;\r\n        <div>h</div>\r\n      </div>\r\n\r\n      <div className={styles}>320 h</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormHoursTop;\r\n","import { useSelector } from \"react-redux\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddAllHoursMutation } from \"../../services/apiSliceMonths\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\nconst useFormikHours = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n\r\n  const calcHours = month && month.calcHours;\r\n\r\n  const initialValues = { allHours: 0 };\r\n\r\n  const onSubmit = async (values: ModelFormValues) => {\r\n   \r\n    if (month) {\r\n      if (\r\n        month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours >\r\n        +values?.allHours\r\n      )\r\n        return;\r\n    }\r\n\r\n    calcHours &&\r\n      values.allHours &&\r\n      (await addAllHours({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        calcHours: {\r\n          ...calcHours,\r\n          allHours: +values.allHours,\r\n          currentHours:\r\n            +values.allHours -\r\n            calcHours.acceptedHours -\r\n            calcHours.submittedHours,\r\n        },\r\n      }));\r\n  };\r\n\r\n  return { initialValues, onSubmit, success };\r\n};\r\n\r\nexport default useFormikHours;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport InputsRange from \"../inputs/inputsRange/InputsRange\";\r\nimport FormHoursError from \"./FormHoursError\";\r\nimport FormHoursTop from \"./FormHoursTop\";\r\nimport useFormikHours from \"./useFormikHours\";\r\n\r\nconst FormHoursContext = () => {\r\n  const { initialValues, onSubmit, success } = useFormikHours();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle\r\n      className=\"text-primary\"\r\n      style={{ fontSize: \"1.4rem\" }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      <Form className=\"py-2\">\r\n        <FormHoursTop />\r\n\r\n        <InputsRange inputsValues={[\"allHours\"]} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mt-2\">\r\n          <FormHoursError />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={success.isLoading}\r\n            className=\"col-2 d-flex justify-content-center align-items-center m-0 justify-content-center p-0 m-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormHoursContext;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useMonthDates from \"../hooks/useMonthDates\";\r\nimport useURLValues from \"../hooks/useURLValues\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { sortListMonths } from \"../utils/sortListMonths\";\r\n\r\nconst CollapseMonthsList = () => {\r\n  const { databaseMonthsDatesToString } = useMonthDates();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { monthURL, isMonthInURL } = useURLValues();\r\n\r\n  const monthURLToDateFormat = isMonthInURL ? new Date(monthURL) : null;\r\n\r\n  const curMonthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup\r\n      className=\"scrolHidden fs-7 fw-medium text-capitalize\"\r\n      style={{ height: \"5rem\" }}\r\n    >\r\n      {!listMonths && (\r\n        <ListGroup.Item className=\"border-0 p-0 text-warning\">\r\n          Brak danych\r\n        </ListGroup.Item>\r\n      )}\r\n\r\n      {databaseMonthsDatesToString?.map((month: string, idx: number) => {\r\n        return (\r\n          <ListGroup.Item key={month} className=\"border-0 p-0\">\r\n            <Link\r\n              to={`/godziny/${listMonths?.[idx]}`}\r\n              className={`${\r\n                curMonthURLStringFormat !== month || !curMonthURLStringFormat\r\n                  ? \"text-dark\"\r\n                  : \"text-info\"\r\n              } text-decoration-none`}\r\n            >\r\n              {month}\r\n            </Link>\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default CollapseMonthsList;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    name: string;\r\n    firstOption: string;\r\n    label: string;\r\n    options: string[] | number[];\r\n   \r\n  }[];\r\n};\r\n\r\nconst InputsSelect = (props: Props) => {\r\n  const { errors, touched, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(({ name, firstOption, label, options }) => {\r\n        return (\r\n          <Form.Group key={label}>\r\n            <Form.Label\r\n              htmlFor={name}\r\n              className=\"mb-0 fw-medium  fs-responsive\"\r\n            >\r\n              {label}\r\n            </Form.Label>\r\n\r\n            <Form.Select\r\n              id={name}\r\n              name={name}\r\n              onChange={e => setFieldValue(name, e.target.value)}\r\n              onBlur={handleBlur}\r\n              size=\"sm\"\r\n              className={`p-0 px-1 border border-primary shadow-sm text-capitalize ${\r\n                firstOption === \"Zapisz imię\" ? \"text-warning\" : \"\"\r\n              }`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <option\r\n                className={` ${\r\n                  firstOption === \"Zapisz imię\"\r\n                    ? \"text-warning\"\r\n                    : \"text-placeholder\"\r\n                }`}\r\n              >\r\n                {firstOption}\r\n              </option>\r\n\r\n              {options?.map((option: string | number) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n            <FormErrors value={name} errors={errors} touched={touched} />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsSelect;\r\n","import { useFormikContext } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\nimport { ModelSuccess } from \"../../sharedModels/modelSucces\";\r\n\r\ntype Props = {\r\n  success: ModelSuccess;\r\n};\r\n\r\nconst FormDayButton = (props: Props) => {\r\n  const { values } = useFormikContext<ModelDay>();\r\n  const { btnContent } = useHTTPState(props.success, \"Dodaj dzień\");\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const currentHours = month?.calcHours?.currentHours || 0;\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={props.success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 ms-auto bg-primary text-white fs-responsive\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"1rem\" }}>\r\n        {currentHours - +values.hours < 0 || currentHours === 0\r\n          ? \"Brak dostępnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormDayButton;\r\n","import {\r\n  dateInNext_14_Days,\r\n  dateInNext_60_Days,\r\n} from \"../../data/dataCurrentDates\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\nconst useDataFormDay = () => {\r\n  const { listUsers: dataUsers } = useSelector(\r\n    (state: RootState) => state.listUsers\r\n  );\r\n\r\n  const users = dataUsers ? dataUsers : [];\r\n\r\n  const names = users?.map(({ userName }: ModelUser) => {\r\n    return userName;\r\n  });\r\n\r\n  const dataInputsSelect = [\r\n    {\r\n      name: \"userName\",\r\n      firstOption: `${names.length === 0 ? \"Zapisz imię\" : \"Imię\"}`,\r\n      label: \"Podaj imię\",\r\n      options: names,\r\n    },\r\n    {\r\n      name: \"hours\",\r\n      firstOption: \"Godziny\",\r\n      label: \"Podaj liczbę godzin\",\r\n      options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    },\r\n\r\n    {\r\n      name: \"place\",\r\n      firstOption: \"Lokalizacja\",\r\n      label: \"Podaj lokalizację\",\r\n      options: [\"Wewnątrz\", \"Poza\"],\r\n    },\r\n  ];\r\n  const dataInputsText = [\r\n    {\r\n      value: \"date\",\r\n      label: \"Podaj dzień\",\r\n      type: \"date\",\r\n      isErrorPrint: true,\r\n      min: dateInNext_14_Days,\r\n      max: dateInNext_60_Days,\r\n    },\r\n  ];\r\n  return { dataInputsSelect, dataInputsText };\r\n};\r\nexport default useDataFormDay;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  hours: yup\r\n    .string()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useSelector } from \"react-redux\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\nimport { dateInNext_14_Days } from \"../../data/dataCurrentDates\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddDayMutation } from \"../../services/apiSliceMonths\";\r\nimport { validationSchema } from \"./validationFormDay\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\nexport type ModelInitialValuesFormikDay = {\r\n  id: string;\r\n  date: string;\r\n  hours: string;\r\n  userName: string;\r\n  place: string;\r\n  userColor: string;\r\n};\r\n\r\nconst useFormikDay = () => {\r\n  const [addDay, success] = useAddDayMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const { listUsers } = useSelector((state: RootState) => state.listUsers);\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    date: dateInNext_14_Days,\r\n    hours: \"\",\r\n    userName: \"Imię\",\r\n    place: \"\",\r\n    userColor: \"\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: ModelInitialValuesFormikDay) => {\r\n    if (\r\n      month &&\r\n      (month?.calcHours?.currentHours - +values.hours < 0 ||\r\n        month?.calcHours?.currentHours === 0)\r\n    )\r\n      return;\r\n\r\n    const userColor =\r\n      listUsers &&\r\n      listUsers?.find((user: ModelUser) => {\r\n        return user.userName === values.userName;\r\n      })?.userColor;\r\n\r\n    const valuesToDatabase = {\r\n      ...values,\r\n      id: UUID(),\r\n      hours: +values.hours,\r\n      userColor: userColor || \"\",\r\n    };\r\n\r\n    month &&\r\n      (await addDay({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        monthBody: {\r\n          ...month,\r\n          calcHours: {\r\n            ...month?.calcHours,\r\n            currentHours: month.calcHours.currentHours - valuesToDatabase.hours,\r\n            submittedHours:\r\n              month.calcHours.submittedHours + valuesToDatabase.hours,\r\n          },\r\n\r\n          columns: [\r\n            {\r\n              ...month.columns[0],\r\n              days: month.columns[0].days\r\n                ? [...month.columns[0].days, valuesToDatabase]\r\n                : [valuesToDatabase],\r\n            },\r\n            ...month.columns.slice(1),\r\n          ],\r\n        },\r\n      }));\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikDay;\r\n","import { Form, Formik, FormikConfig } from \"formik\";\r\nimport InputsSelect from \"../inputs/InputsSelect\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport FormDayButton from \"./FormDayButton\";\r\nimport useDataFormDay from \"./useDataFormDay\";\r\nimport useFormikDay from \"./useFormikDay\";\r\nimport \"./_formDay.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelInitialValuesFormikDay } from \"./useFormikDay\";\r\n\r\n\r\ntype FormData = {\r\n  id: string;\r\n  date: string;\r\n  hours: string;\r\n  userName: string;\r\n  place: string;\r\n  userColor: string;\r\n};\r\n\r\nconst asFormikConfig = <Values extends FormData>(props: FormikConfig<Values>) =>\r\n  props;\r\n\r\nconst FormDayContext = () => {\r\n  const { dataInputsText, dataInputsSelect } = useDataFormDay();\r\n  const { initialValues, validation, onSubmit, success } = useFormikDay();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const allHours = month?.calcHours?.allHours;\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className={`${allHours === 0 ? \"formContainerBlur\" : \"\"} mt-2`}>\r\n        <InputsSelect inputsData={dataInputsSelect} />\r\n        <InputsText inputsData={dataInputsText} />\r\n        <FormDayButton success={success} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormDayContext;\r\n","import * as yup from \"yup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useValidationMonthForm = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const validationSchema = yup.object({\r\n    monthDate: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Miesiąc zapisany\",\r\n        value => value !== undefined && !listMonths?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationMonthForm;\r\n","import { ModelColumn } from \"../../sharedModels/modelColumn\";\r\nimport { ModelCalcHours } from \"../../sharedModels/modelCalcHours\";\r\nimport { ModelMonth } from \"../../sharedModels/modelMonth\";\r\n\r\nconst columns: ModelColumn[] = [\r\n  { id: \"submitted\", days: [] },\r\n  { id: \"accepted\", days: [] },\r\n  { id: \"rejected\", days: [] },\r\n];\r\n\r\n const calcHours: ModelCalcHours = {\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submittedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n};\r\n\r\nexport const monthPattern: ModelMonth = {\r\n  id: \"\",\r\n  columns,\r\n  calcHours,\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateListMonthsMutation,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSliceMonths\";\r\n\r\nimport useValidationMonthForm from \"./useValidationMonthForm\";\r\nimport * as yup from \"yup\";\r\nimport { monthPattern } from \"./dataFormMonth\";\r\nimport { ModelMonth } from \"../../sharedModels/modelMonth\";\r\nimport { sortListMonths } from \"../../utils/sortListMonths\";\r\n\r\n\r\ninterface ModelInitialValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useFormikMonth = () => {\r\n  const navigate = useNavigate();\r\n  const [updateMonth, success] = useUpdateMonthMutation();\r\n  const [updateListMonths] = useUpdateListMonthsMutation();\r\n  const [deleteMonth] = useDeleteMonthMutation();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { validationSchema } = useValidationMonthForm();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [formValues, setFormValues] = useState({ monthDate: \"\" });\r\n\r\n  const initialValues = { monthDate: `${currYearDigits}-${currMonthDigits}` };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: ModelInitialValues) => {\r\n    const year = values.monthDate.slice(0, 4);\r\n    const month = values.monthDate.slice(-2);\r\n    const monthBody: ModelMonth = {\r\n      ...monthPattern,\r\n      id: values.monthDate,\r\n    };\r\n\r\n    await updateMonth({ year, month, monthBody });\r\n    setFormValues(values);\r\n        navigate(`/godziny/${values.monthDate}`);\r\n  };\r\n\r\n  // const executeAddMonthInfo = async (values: ModelInitialValues) => {\r\n  //   if (isSuccess) {\r\n  //     const year = values.monthDate.slice(0, 4);\r\n  //     const month = values.monthDate.slice(-2);\r\n  //     const months = listMonths ? [...listMonths] : [];\r\n  //     const updatedList = [...months, `${year}-${month}`];\r\n  //     const sortedMonths = sortListMonths(updatedList);\r\n\r\n  //     await updateListMonths(sortedMonths);\r\n  //     navigate(`/godziny/${values.monthDate}`);\r\n  //   } else if (success.isError) {\r\n  //     const year = values.monthDate.slice(0, 4);\r\n  //     const month = values.monthDate.slice(-2);\r\n  //     await deleteMonth({ year, month });\r\n  //   }\r\n  // };\r\n\r\n  useEffect(() => {\r\n    if (success.isSuccess) {\r\n      setIsSuccess(true);\r\n    } else setIsSuccess(false);\r\n  }, [success.isSuccess]);\r\n\r\n  // useEffect(() => {\r\n  //   executeAddMonthInfo(formValues);\r\n  // }, [isSuccess, updateListMonths]);\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikMonth;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikMonth from \"./useFormikMonth\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormMonthContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikMonth();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"monthDate\",\r\n      type: \"month\",\r\n      label:\"Podaj miesiąc\",\r\n      isErrorPrint: true,\r\n      min: `${currYearDigits}-${currMonthDigits}`,\r\n      max: \"2025-12\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormMonthContext;\r\n","import { useUsersQuery } from \"../../services/apiSliceUsers\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\nconst useValidationFormUser = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n  const validationSchema = yup.object({\r\n    userName: yup\r\n      .string()\r\n      .min(3, \"Min. 3 litery\")\r\n      .max(10, \"Max. 10 liter\")\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Imię zajęte\",\r\n        value =>\r\n          value !== undefined &&\r\n          !usersNames?.includes(value[0].toUpperCase() + value.slice(1))\r\n      )\r\n      .required(\"Imię wymagane\"),\r\n    userColor: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Kolor zajęty\",\r\n        value => value !== undefined && !UsersColors?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationFormUser;\r\n","import {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../services/apiSliceUsers\";\r\nimport useValidationUserForm from \"./useValidationFormUser\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\nimport { FormikHelpers } from \"formik\";\r\n\r\nconst useFormikUser = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { validationSchema } = useValidationUserForm();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers || [];\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    userName: \"\",\r\n    userColor: \"#e0cce1\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n  const onSubmit = async (\r\n    values: ModelUser,\r\n    { resetForm }: FormikHelpers<ModelUser>\r\n  ) => {\r\n    const userValues = {\r\n      ...values,\r\n      userName:\r\n        values.userName.slice(0, 1).toUpperCase() + values.userName.slice(1),\r\n      id: UUID(),\r\n    };\r\n\r\n    const sortedUsers = [...users, userValues].sort((a, b) =>\r\n      a.userName.localeCompare(b.userName)\r\n    );\r\n\r\n    await addUser(sortedUsers);\r\n    resetForm();\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikUser;\r\n\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikUser from \"./useFormikUser\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst FormUserContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikUser();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"userName\",\r\n      type: \"text\",\r\n      label: \"Podaj imię\",\r\n      isErrorPrint: true,\r\n      placeholder: \"Imię\",\r\n    },\r\n    {\r\n      value: \"userColor\",\r\n      type: \"color\",\r\n      label: \"Podaj kolor\",\r\n      isErrorPrint: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormUserContext;\r\n","import { ReactNode, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n  title: string;\r\n};\r\n\r\nconst CollapseContainer = (props: Props) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline-primary\"\r\n        onClick={() => setOpen(prev => !prev)}\r\n        aria-expanded={isOpen}\r\n        aria-controls=\"example-collapse-text\"\r\n        size=\"sm\"\r\n        className={`fw-medium fs-responsive d-flex justify-content-between align-items-center bg-primary text-white w-100 ${\r\n          isOpen ? \"rounded-bottom-0\" : \"rounded-bottom-1\"\r\n        }`}\r\n        style={{\r\n          transition: \"border-radius 420ms\",\r\n        }}\r\n      >\r\n        {props.title}\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3\"\r\n          style={{\r\n            transform: `${isOpen ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={isOpen}>\r\n        <div className=\"border border-primary rounded-bottom px-1\">\r\n          {props.children}\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CollapseContainer;\r\n","import FormHoursContext from \"../formHours/FormHoursContext\";\r\nimport CollapseMonthsList from \"../CollapseMonthsList\";\r\nimport FormDayContext from \"../formDay/FormDayContext\";\r\nimport FormMonthContext from \"../formMonth/FormMonthContext\";\r\nimport FormUserContext from \"../formUser/FormUserContext\";\r\nimport CollapseContainer from \"../CollapseContainer\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useDataSidebar = () => {\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  const monthStringCapitalize =\r\n    monthURLStringFormat[0]?.toUpperCase() + monthURLStringFormat.slice(1);\r\n\r\n  const printFormHours = month && (\r\n    <div className=\"mt-1\">\r\n      <CollapseContainer title={\"Zapisz godziny\"}>\r\n        <FormHoursContext />\r\n      </CollapseContainer>\r\n    </div>\r\n  );\r\n  const printFormDay = month && <FormDayContext />;\r\n\r\n  const dataMonthPanel = [\r\n    <CollapseContainer title={monthStringCapitalize}>\r\n      <CollapseMonthsList />\r\n    </CollapseContainer>,\r\n    printFormHours,\r\n    printFormDay,\r\n  ];\r\n\r\n  const dataSettings = [\r\n    <CollapseContainer title={\"Zapisz miesiąc\"}>\r\n      <FormMonthContext />\r\n    </CollapseContainer>,\r\n    <div className=\"mt-1\">\r\n      <CollapseContainer title={\"Zapisz użytkownika\"}>\r\n        <FormUserContext />\r\n      </CollapseContainer>\r\n    </div>,\r\n  ];\r\n\r\n  return { dataMonthPanel, dataSettings };\r\n};\r\n\r\nexport default useDataSidebar;\r\n","import React from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport useDataSidebar from \"./useDataSidebar\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst SidebarBody = () => {\r\n  const { pathname } = useLocation();\r\n  const { isMonthInURL } = useURLValues();\r\n  const { dataMonthPanel, dataSettings } = useDataSidebar();\r\n\r\n  return (\r\n    <Offcanvas.Body className=\"scrolHidden flex-grow-0 p-0 border border-4 border-white bg-white rounded\">\r\n      {isMonthInURL &&\r\n        dataMonthPanel.map((component, idx) => {\r\n          return <React.Fragment key={idx}>{component}</React.Fragment>;\r\n        })}\r\n\r\n      {pathname === \"/godziny/ustawienia\" &&\r\n        dataSettings.map((component, idx) => {\r\n          return <React.Fragment key={idx}>{component}</React.Fragment>;\r\n        })}\r\n    </Offcanvas.Body>\r\n  );\r\n};\r\n\r\nexport default SidebarBody;\r\n","import Offcanvas from \"react-bootstrap/Offcanvas\";\r\n\r\nconst SidebarHeader = () => {\r\n  return (\r\n    <Offcanvas.Header\r\n      className=\"d-sm-none w-fit-content ms-auto\"\r\n      closeButton={true}\r\n    ></Offcanvas.Header>\r\n  );\r\n};\r\n\r\nexport default SidebarHeader;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\ntype Props = {\r\n  toggleShow: () => void;\r\n};\r\n\r\nconst SidebarMenuButton = (props: Props) => {\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n  const { isMonthInURL } = useURLValues();\r\n\r\n  return (\r\n    <Button\r\n      variant=\"primary\"\r\n      onClick={props.toggleShow}\r\n      className= \"d-flex d-sm-none justify-content-center align-items-center rounded-0 p-0 fw-medium w-100 px-4 fixed-bottom\"\r\n      style={{\r\n        height: \"2.5rem\",\r\n      }}\r\n    >\r\n      <div>Menu:&nbsp;</div>\r\n      {isMonthInURL ? <div>{monthURLStringFormat}</div> : <div>ustawienia</div>}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarMenuButton;\r\n","import { useState } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport { printAlert } from \"../../redux/storeFeatures/alertSlice\";\r\nimport { RiLogoutBoxLine } from \"react-icons/ri\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst SidebarLogout = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const logout = () => {\r\n    setIsLoading(true);\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigate(\"/godziny\");\r\n      })\r\n\r\n      .catch(error => dispatch(printAlert(error.message)))\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div className=\"d-flex align-center  d-flex align-items-center text-primary w-100\">\r\n      <RiLogoutBoxLine className=\"fs-6 me-1 \" />\r\n      Wyloguj\r\n    </div>\r\n  );\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        variant=\"secondary\"\r\n        className=\"mx-auto\"\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={logout}\r\n      className=\"fs-6 fw-medium text-info p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n      disabled={isLoading}\r\n    >\r\n      {btnContent}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarLogout;\r\n","import { createBrowserHistory } from \"history\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ImArrowLeft } from \"react-icons/im\";\r\n\r\nconst SettingsReturnButton = () => {\r\n  const history = createBrowserHistory();\r\n  const handleGoBack = () => {\r\n    history.back();\r\n  };\r\n  return (\r\n    <Button\r\n      onClick={handleGoBack}\r\n      className=\"fs-6 fw-medium text-primary p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      <div className=\"d-flex align-center  d-flex align-items-center text-start w-100\">\r\n        <ImArrowLeft className=\"fs-6 me-1 \" /> Wróć\r\n      </div>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SettingsReturnButton;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { AiTwotoneSetting } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SidebarLogout from \"./SidebarLogout\";\r\nimport SettingsReturnButton from \"./SettingsReturnButton\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\nconst SidebarNav = () => {\r\n  const { isMonthInURL } = useURLValues();\r\n  const styles = \"bg-transparent border-0 p-0 ps-2\";\r\n\r\n  return (\r\n    <nav className=\"mt-auto mb-2 fw-medium\">\r\n      <ListGroup>\r\n        {!isMonthInURL && (\r\n          <ListGroup.Item className={styles}>\r\n            <SettingsReturnButton />\r\n          </ListGroup.Item>\r\n        )}\r\n        <ListGroup.Item className={styles}>\r\n          <Link to=\"/godziny/ustawienia\" className=\"text-primary text-decoration-none\">\r\n            <AiTwotoneSetting /> Ustawienia\r\n          </Link>\r\n        </ListGroup.Item>\r\n        <ListGroup.Item className={styles}>\r\n          <SidebarLogout />\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SidebarNav;\r\n","import { useEffect, useState } from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport useReduxListMonths from \"../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport useReduxListUsers from \"../../hooks/updateReduxDatabase/useReduxListUsers\";\r\nimport useWindowWidth from \"../../hooks/useWindowWidth\";\r\nimport Alert from \"../alert/Alert\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarMenuButton from \"./SidebarMenuButton\";\r\nimport SidebarNav from \"./SidebarNav\";\r\n\r\nconst IndexSidebar = () => {\r\n  useReduxListUsers();\r\n  useReduxListMonths();\r\n\r\n  const { pathname } = useLocation();\r\n  const [isShow, setShow] = useState(false);\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(prev => !prev);\r\n\r\n  useEffect(() => {\r\n    windowWidth >= 500 && setShow(true);\r\n  }, [windowWidth]);\r\n\r\n  const printSidebar =\r\n    pathname.includes(\"/godziny/ustawienia\") ||\r\n    pathname.includes(\"/godziny/202\");\r\n\r\n  return (\r\n    <>\r\n      {printSidebar && (\r\n        <>\r\n          <Alert />\r\n          <Offcanvas\r\n            show={isShow}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className={`${\r\n              windowWidth <= 500 && \"backgroundImage\"\r\n            } bg-transparent`}\r\n            style={{\r\n              width: windowWidth >= 500 ? \"30%\" : \"100vw\",\r\n              maxWidth: windowWidth >= 500 && \"250px\",\r\n            }}\r\n          >\r\n            <div className=\"p-1 d-flex flex-column bg-opacity-white h-100\">\r\n              <SidebarHeader />\r\n              <SidebarBody />\r\n              <SidebarNav />\r\n            </div>\r\n          </Offcanvas>\r\n          <SidebarMenuButton toggleShow={toggleShow} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext_14_Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext_60_Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext_14_Days = formatDate(futureDateInNext_14_Days);\r\nexport const dateInNext_60_Days = formatDate(futureDateInNext_60_Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","import { onValue, ref } from \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { database } from \"../data/firebaseConfig\";\r\n\r\nconst useDatabaseListMonths = () => {\r\n  const reference = ref(database);\r\n  const [error, setError] = useState(\"\");\r\n  const [databaseListMonths, setDatabaseListMonths] = useState<any>([]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onValue(\r\n      reference,\r\n      snapshot => {\r\n        let keysYears: string[] = [];\r\n        let monthsCollection: any = [];\r\n\r\n        snapshot?.forEach((firstLevelSnapshot: any) => {\r\n          const firstLevelKey = firstLevelSnapshot.key;\r\n          keysYears.push(firstLevelKey);\r\n\r\n          const nestedKeysRef = ref(database, `${firstLevelKey}`);\r\n          onValue(\r\n            nestedKeysRef,\r\n            nestedSnapshot => {\r\n              let keysMonths: string[] = [];\r\n\r\n              nestedSnapshot?.forEach((nestedKeySnapshot: any) => {\r\n                const nestedKey = nestedKeySnapshot.key;\r\n                keysMonths.push(nestedKey.slice(6));\r\n              });\r\n\r\n              monthsCollection.push(keysMonths);\r\n            },\r\n\r\n            nestedError => {\r\n              setError(\"Błąd\");\r\n            }\r\n          );\r\n        });\r\n\r\n        const months = [...monthsCollection]\r\n          .map((monthsInYear, idx) => {\r\n            return monthsInYear.map((month: any) => {\r\n              return keysYears[idx] + \"-\" + month;\r\n            });\r\n          })\r\n          .flat()\r\n          .reverse();\r\n\r\n        setDatabaseListMonths(months);\r\n      },\r\n      error => {\r\n        setError(\"Błąd\");\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n\r\n  return {\r\n    databaseListMonths,\r\n    error,\r\n  };\r\n};\r\n\r\nexport default useDatabaseListMonths;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getListMonths,\r\n  getListMonthsError,\r\n  getListMonthsIsLoading,\r\n} from \"../../redux/storeFeatures/listMonthsSlice\";\r\nimport { useListMonthsQuery } from \"../../services/apiSliceMonths\";\r\nimport useDatabaseListMonths from \"../useDatabaseListMonths\";\r\n\r\nconst useReduxListMonths = () => {\r\n  const dispatch = useDispatch();\r\n  const { databaseListMonths, error } = useDatabaseListMonths();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(getListMonths(databaseListMonths));\r\n    // dispatch(getListMonths(data));\r\n    // dispatch(getListMonthsError(error));\r\n\r\n    // dispatch(getListMonthsIsLoading(isLoading));\r\n  }, [databaseListMonths, dispatch]);\r\n};\r\n\r\nexport default useReduxListMonths;\r\n\r\n\r\n\r\n\r\n\r\n","import { ReactNode } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const databaseMonthsDatesToString =\r\n    listMonths &&\r\n    [...listMonths]?.map((monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    });\r\n\r\n  return { databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(9);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return { monthURLStringFormat };\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return { monthURLStringFormat };\r\n  }\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n"],"names":["dispatch","useDispatch","_useSelector","useSelector","state","alert","isPrinted","header","_jsx","_Fragment","children","id","className","onClick","e","_e$target","_e$target2","target","agreeAlert","closeAlert","handleClose","style","height","zIndex","backgroundColor","_jsxs","concat","includes","Button","props","touched","value","errors","_useFormikContext","useFormikContext","values","handleBlur","setFieldValue","inputsData","map","_ref","label","type","isErrorPrint","min","max","placeholder","Form","Group","Label","htmlFor","Control","name","onChange","onBlur","size","minHeight","FormErrors","_useUsersQuery","useUsersQuery","data","error","isLoading","useEffect","geListtUsers","getListUsersError","getListUsersIsLoading","gradientValue","allHours","gradientBackground","inputsValues","Range","background","_month$calcHours","_month$calcHours2","_month$calcHours3","_month$calcHours4","month","monthPanel","content","calcHours","submittedHours","acceptedHours","styles","width","InputsText","_useURLValues","useURLValues","yearFromURL","monthFromURL","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","_slicedToArray","addAllHours","success","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","t0","year","_objectSpread","currentHours","stop","_x","apply","arguments","initialValues","_useFormikHours","useFormikHours","btnContent","useHTTPState","AiOutlinePlusCircle","fontSize","Formik","FormHoursTop","InputsRange","FormHoursError","disabled","databaseMonthsDatesToString","useMonthDates","listMonths","monthURL","monthURLToDateFormat","isMonthInURL","Date","curMonthURLStringFormat","Intl","DateTimeFormat","timeZone","format","ListGroup","Item","idx","Link","to","firstOption","options","Select","cursor","option","hours","dataUsers","listUsers","users","names","userName","dataInputsSelect","length","dataInputsText","dateInNext_14_Days","dateInNext_60_Days","validationSchema","yup","test","required","place","_useAddDayMutation","useAddDayMutation","_useAddDayMutation2","addDay","date","userColor","validation","_listUsers$find","valuesToDatabase","find","user","UUID","monthBody","columns","days","_toConsumableArray","slice","_useDataFormDay","useDataFormDay","_useFormikDay","useFormikDay","InputsSelect","FormDayButton","monthDate","undefined","monthPattern","rejectedHours","navigate","useNavigate","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","updateMonth","_useUpdateListMonthsM","useUpdateListMonthsMutation","_useDeleteMonthMutati","useDeleteMonthMutation","useValidationMonthForm","_useState","useState","_useState2","setIsSuccess","_useState3","_useState4","setFormValues","currYearDigits","currMonthDigits","isSuccess","_useFormikMonth","useFormikMonth","dataInputs","usersNames","UsersColors","_ref2","toUpperCase","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","useValidationUserForm","resetForm","userValues","sortedUsers","sort","a","b","localeCompare","_x2","_useFormikUser","useFormikUser","isOpen","setOpen","variant","transition","title","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","_monthURLStringFormat","monthURLStringFormat","useMonthURLToString","monthStringCapitalize","printFormHours","CollapseContainer","FormHoursContext","printFormDay","FormDayContext","dataMonthPanel","CollapseMonthsList","dataSettings","FormMonthContext","FormUserContext","pathname","useLocation","_useDataSidebar","useDataSidebar","Offcanvas","Body","component","React","Header","closeButton","toggleShow","setIsLoading","RiLogoutBoxLine","Spinner","animation","auth","signOut","then","catch","printAlert","message","finally","history","createBrowserHistory","back","ImArrowLeft","SettingsReturnButton","AiTwotoneSetting","SidebarLogout","useReduxListUsers","useReduxListMonths","isShow","setShow","windowWidth","useWindowWidth","printSidebar","Alert","show","onHide","scroll","backdrop","maxWidth","SidebarHeader","SidebarBody","SidebarNav","SidebarMenuButton","today","formatDate","getFullYear","String","getMonth","padStart","day","getDate","futureDateInNext_14_Days","getTime","futureDateInNext_60_Days","reference","ref","database","setError","databaseListMonths","setDatabaseListMonths","unsubscribe","onValue","snapshot","keysYears","monthsCollection","forEach","firstLevelSnapshot","firstLevelKey","key","push","nestedKeysRef","nestedSnapshot","keysMonths","nestedKeySnapshot","nestedKey","nestedError","months","monthsInYear","flat","reverse","_useDatabaseListMonth","useDatabaseListMonths","getListMonths","btnText","monthToDateFormat","_Intl$DateTimeFormat","split","window","innerWidth","setWindowWidth","handleResize","addEventListener","removeEventListener"],"sourceRoot":""}
{"version":3,"file":"static/js/734.3d8379c5.chunk.js","mappings":"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","sources":["components/AlertErrors.tsx","components/alert/buttonsAlert/ButtonAlertAccept.tsx","components/alert/buttonsAlert/ButtonAlertDelete.tsx","components/alert/Alert.tsx","components/buttonForm/ButtonForm.tsx","components/inputs/inputError/InputError.tsx","components/inputs/inputsText/labelCover/InputsCover.tsx","components/inputs/inputsText/InputsTextLabel.tsx","components/inputs/inputsText/InputsText.tsx","data/dataCurrentDates.tsx","hooks/useBtnContent.tsx","hooks/useWindowWidth.tsx","pages/login/formLoginContext/useFormikLogin.tsx","pages/login/formLoginContext/FormLoginContext.tsx","pages/login/indexLogin/IndexLogin.tsx"],"sourcesContent":["import { useDispatch } from \"react-redux\";\r\nimport Alert from \"./alert/Alert\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { printAlert } from \"../redux/storeFeatures/alertSlice\";\r\n\r\nconst AlertErrors = () => {\r\n  const dispatch = useDispatch();\r\n  const { header } = useSelector((state: RootState) => state.alert);\r\n\r\n  const closeAlert = () => {\r\n    dispatch(printAlert(\"\"));\r\n  };\r\n\r\n  if (!header) return null;\r\n\r\n  return <Alert action={closeAlert} isPrinted={true} header={header} />;\r\n};\r\n\r\nexport default AlertErrors;\r\n","import Button from \"react-bootstrap/Button\";\r\n\r\ntype Props = {\r\n  action: () => void;\r\n};\r\n\r\nconst ButtonAlertAccept = (props: Props) => {\r\n  return (\r\n    <Button\r\n      id=\"noButton\"\r\n      className=\"_radius bg-primary border-0 px-5 ms-4\"\r\n      onClick={props.action}\r\n    >\r\n      Ok\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonAlertAccept;\r\n","import Button from \"react-bootstrap/Button\";\r\n\r\ntype Props = {\r\n  action: () => void;\r\n};\r\n\r\nconst ButtonAlertDelete = (props: Props) => {\r\n  return (\r\n    <>\r\n      <Button id=\"noButton\" className=\"_radius bg-dark border-0 px-4 px-sm-5\">\r\n        Nie\r\n      </Button>\r\n      <Button\r\n        onClick={props.action}\r\n        className=\"_radius bg-primary border-0 px-4 px-sm-5 ms-4\"\r\n      >\r\n        Tak\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ButtonAlertDelete;\r\n","import { printAlert } from \"../../redux/storeFeatures/alertSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./_alert.scss\";\r\nimport ButtonAlertAccept from \"./buttonsAlert/ButtonAlertAccept\";\r\nimport ButtonAlertDelete from \"./buttonsAlert/ButtonAlertDelete\";\r\n\r\ntype Props = {\r\n  action: () => void;\r\n  isPrinted: boolean;\r\n  header: string;\r\n  setIsPrinted?: React.Dispatch<React.SetStateAction<boolean>>;\r\n};\r\n\r\nconst Alert = (props: Props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (\r\n      ![\"opacityContainer\", \"noButton\"].includes((e.target as HTMLElement)?.id)\r\n    )\r\n      return;\r\n\r\n    if (props?.setIsPrinted) props?.setIsPrinted(false);\r\n    dispatch(printAlert(\"\"));\r\n  };\r\n\r\n  if (!props.isPrinted) return null;\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        id=\"opacityContainer\"\r\n        className=\"fixed-top _d-center _alert\"\r\n        onClick={handleClose}\r\n      >\r\n        <div\r\n          className={`p-5 bg-white _radius text-center fs-2 fw-medium _anim-dropDown`}\r\n        >\r\n          {props.header}\r\n          <div className=\"_w-fitContent m-auto mt-4\">\r\n            {props.header.includes(\"Usunąć\") ? (\r\n              <ButtonAlertDelete action={props.action} />\r\n            ) : (\r\n              <ButtonAlertAccept action={props.action} />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport \"./_buttonForm.scss\";\r\nimport useBtnContent from \"../../hooks/useBtnContent\";\r\nimport \"./_buttonForm.scss\";\r\n\r\ntype Props = {\r\n  isLoading: boolean;\r\n  text?: string;\r\n  styles?: string;\r\n};\r\n\r\nconst ButtonForm = (props: Props) => {\r\n  const buttonText = props.text ? <div>{props.text}</div> : <div>Zapisz</div>;\r\n  const { btnContent } = useBtnContent(props?.isLoading, buttonText);\r\n\r\n  return (\r\n    <Button\r\n      type=\"submit\"\r\n      variant=\"primary\"\r\n      disabled={props?.isLoading}\r\n      className={`_d-center w-50 p-0 py-1 mt-2 ms-auto _radius  _fw-semiBold _fs-primary _buttonForm position-relative ${props.styles}`}\r\n    >\r\n      <div className=\"invisible\">Z</div>\r\n      <div className=\"_buttonForm__content\">{btnContent}</div>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default ButtonForm;\r\n","import { FormikTouched, FormikErrors } from \"formik\";\r\nimport { ModelDay } from \"../../../sharedModels/modelDay\";\r\nimport \"./_inputError.scss\"\r\n\r\ntype Props = {\r\n  value: string;\r\n  errors: FormikErrors<ModelDay>;\r\n  touched: FormikTouched<ModelDay>;\r\n};\r\n\r\nconst InputError = (props: Props) => {\r\n  return (\r\n    <div className=\"text-danger d-block mt-0 fs-5 _inputError\">\r\n      {props.touched[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputError;\r\n","import { useState } from \"react\";\r\nimport \"./_inputsCover.scss\";\r\n\r\ntype Props = {\r\n  text?: string;\r\n};\r\n\r\nconst InputsCover = (props: Props) => {\r\n  const [isPrinted, setPrinted] = useState(true);\r\n\r\n  const handleDelete = () => {\r\n    setPrinted(false);\r\n  };\r\n  \r\n  if (!isPrinted) return null;\r\n\r\n  return (\r\n    <div\r\n      onClick={handleDelete}\r\n      className=\"_inputsCover w-100 _d-center  bg-secondary-light _fs-primary text-light-emphasis  _radius border\"\r\n    >\r\n      {props.text}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputsCover;\r\n","import Form from \"react-bootstrap/Form\";\r\nimport InputsCover from \"./labelCover/InputsCover\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  labelCover?: string;\r\n};\r\n\r\nconst InputsTextLabel = (props: Props) => {\r\n  if (props.labelCover === undefined) return <></>;\r\n\r\n  return (\r\n    <Form.Label htmlFor={props.value} className=\"position-absolute w-100\">\r\n      <InputsCover text={props.labelCover} />\r\n    </Form.Label>\r\n  );\r\n};\r\n\r\nexport default InputsTextLabel;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { ModelDay } from \"../../../sharedModels/modelDay\";\r\nimport InputError from \"../inputError/InputError\";\r\nimport InputsTextLabel from \"./InputsTextLabel\";\r\nimport \"./_inputsText.scss\";\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    value: string;\r\n    type: string;\r\n    label?: string;\r\n    labelCover?: string;\r\n    placeholder?: string;\r\n    isErrorPrint?: boolean;\r\n    min?: string;\r\n    max?: string;\r\n    styles?: string;\r\n  }[];\r\n};\r\n\r\nconst InputsText = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue, errors, touched } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(\r\n        ({\r\n          value,\r\n          labelCover,\r\n          type,\r\n          isErrorPrint,\r\n          min,\r\n          max,\r\n          placeholder,\r\n          styles,\r\n        }) => {\r\n          return (\r\n            <Form.Group key={value} className=\" mt-2 position-relative\">\r\n              <InputsTextLabel value={value} labelCover={labelCover} />\r\n              <Form.Control\r\n                id={value}\r\n                type={type}\r\n                name={value}\r\n                value={values[value as keyof typeof values]}\r\n                onChange={e => setFieldValue(value, e.target.value)}\r\n                onBlur={handleBlur}\r\n                min={min}\r\n                max={max}\r\n                placeholder={placeholder}\r\n                size=\"sm\"\r\n                className={`text-light-emphasis bg-secondary-light _radius w-100 text-capitalize _cursor-pointer _fs-primary text-center \r\n                   ${type === \"color\" ? \"_inputsColor p-0\" : \"py-2\"} ${styles}\r\n                `}\r\n              />\r\n\r\n              {isErrorPrint && (\r\n                <InputError value={value} errors={errors} touched={touched} />\r\n              )}\r\n            </Form.Group>\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsText;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext_14_Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext_60_Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext_14_Days = formatDate(futureDateInNext_14_Days);\r\nexport const dateInNext_60_Days = formatDate(futureDateInNext_60_Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","import Spinner from \"react-bootstrap/Spinner\";\r\n\r\nconst useBtnContent = (isLoading: boolean, btn:  JSX.Element) => {\r\n  let btnContent: JSX.Element = btn;\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        variant=\"primary\"\r\n        className=\"text-dark\"\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useBtnContent;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  \r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import { signInWithEmailAndPassword } from \"firebase/auth\";\r\nimport { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  currMonthDigits,\r\n  currYearDigits,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport { auth } from \"../../../data/firebaseConfig\";\r\nimport { printAlert } from \"../../../redux/storeFeatures/alertSlice\";\r\n\r\ntype InitialValues = {\r\n  password: string;\r\n};\r\n\r\nconst useFormikLogin = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const initialValues = { password: \"wwwwww\" };\r\n\r\n  const onSubmit = (values: InitialValues) => {\r\n    setIsLoading(true);\r\n    signInWithEmailAndPassword(auth, \"ww@wp.pl\", values.password)\r\n      .then(() => {\r\n        navigate(`/${currYearDigits}-${currMonthDigits}`);\r\n        setIsLoading(false);\r\n      })\r\n\r\n      .catch(error => dispatch(printAlert(error.message)))\r\n\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  return { initialValues, onSubmit, isLoading };\r\n};\r\n\r\nexport default useFormikLogin;\r\n","import { Form, Formik } from \"formik\";\r\nimport ButtonForm from \"../../../components/buttonForm/ButtonForm\";\r\nimport InputsText from \"../../../components/inputs/inputsText/InputsText\";\r\nimport useWindowWidth from \"../../../hooks/useWindowWidth\";\r\nimport \"./_formLoginContext.scss\";\r\nimport useFormikLogin from \"./useFormikLogin\";\r\n\r\nconst dataInputs = [\r\n  { value: \"password\", type: \"password\", isErrorPrint: true },\r\n];\r\n\r\nconst FormLoginContext = () => {\r\n  const { initialValues, onSubmit, isLoading } = useFormikLogin();\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      <Form\r\n        className={`border p-5 rounded-1 _bg-opacity-white _formLoginContext _d-center ${\r\n          windowWidth > 500 && \"_anim-dropDown\"\r\n        }`}\r\n      >\r\n        <div>\r\n          <div className=\"text-center fs-2 fw-medium mb-4 \">Podaj hasło</div>\r\n          <InputsText inputsData={dataInputs} />\r\n\r\n          <ButtonForm\r\n            isLoading={isLoading}\r\n            text={\"Zaloguj\"}\r\n            styles={\"_formLoginContext__button\"}\r\n          />\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormLoginContext;\r\n","import AlertErrors from \"../../../components/AlertErrors\";\r\nimport FormLoginContext from \"../formLoginContext/FormLoginContext\";\r\nimport \"./_indexLogin.scss\"\r\n\r\nconst IndexLogin = () => {\r\n  return (\r\n    <main className=\"_d-center bg-primary-light  _indexLogin\">\r\n      <AlertErrors />\r\n      <FormLoginContext />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexLogin;\r\n"],"names":["dispatch","useDispatch","header","useSelector","state","alert","_jsx","Alert","action","printAlert","isPrinted","props","Button","id","className","onClick","children","_jsxs","_Fragment","e","_e$target","includes","target","setIsPrinted","ButtonAlertDelete","ButtonAlertAccept","buttonText","text","btnContent","useBtnContent","isLoading","type","variant","disabled","concat","styles","touched","value","errors","_useState","useState","_useState2","_slicedToArray","setPrinted","undefined","labelCover","Form","Label","htmlFor","InputsCover","_useFormikContext","useFormikContext","values","handleBlur","setFieldValue","inputsData","map","_ref","isErrorPrint","min","max","placeholder","Group","InputsTextLabel","Control","name","onChange","onBlur","size","InputError","today","Date","formatDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","futureDateInNext_14_Days","getTime","futureDateInNext_60_Days","currYearDigits","currMonthDigits","dateInNext_14_Days","dateInNext_60_Days","Intl","DateTimeFormat","timeZone","format","btn","Spinner","animation","window","innerWidth","windowWidth","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","navigate","useNavigate","setIsLoading","initialValues","password","onSubmit","signInWithEmailAndPassword","auth","then","catch","error","message","finally","dataInputs","_useFormikLogin","useFormikLogin","useWindowWidth","Formik","InputsText","ButtonForm","AlertErrors","FormLoginContext"],"sourceRoot":""}
{"version":3,"file":"static/js/311.8f8bd9fa.chunk.js","mappings":"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","sources":["components/sidebar/dayForm/dataDayForm.tsx","components/sidebar/dayForm/validationDayForm.tsx","components/sidebar/dayForm/useDayForm.tsx","components/sidebar/dayForm/DayForm.tsx","components/sidebar/monthForm/dataMonthForm.tsx","components/sidebar/monthForm/useMonthForm.tsx","components/sidebar/monthForm/MonthForm.tsx","components/sidebar/MonthsList.tsx","components/sidebar/IndexSidebar.tsx","data/firebaseConfig.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup.string().required(\"Podaj imię\"),\r\n  date: yup.string().required(\"Podaj datę\"),\r\n  hours: yup.number().required(\"Podaj liczbę godzin\").moreThan(0, \"Liczba godzin musi być większa od 0\"),\r\n  place: yup.string().required(\"Podaj lokalizację\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport { initialValues } from \"./dataDayForm\";\r\nimport { validationSchema } from \"./validationDayForm\";\r\nimport { useUpdateColumnsMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface FormValues {\r\n  date: string;\r\n  hours: number | string;\r\n  userName: string;\r\n  place: string;\r\n}\r\n\r\nconst useDayForm = () => {\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseColumns, databaseMonth, data, dataCurrentHours } =\r\n    useDataBaseValues(lastPartMonthURL);\r\n\r\n  const formik = useFormik<FormValues>({\r\n    initialValues: initialValues,\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async values => {\r\n      formik.setFieldValue(\"id\", crypto.randomUUID());\r\n      if (dataCurrentHours - +formik.values.hours < 0) return;\r\n      const databaseColumnsAddedDays =\r\n        data && databaseMonth && databaseColumns?.length > 0\r\n          ? [...databaseColumns]\r\n          : [];\r\n\r\n      databaseColumnsAddedDays[0] = data &&\r\n        databaseMonth &&\r\n        databaseColumns?.length > 0 && {\r\n          ...databaseColumns?.[0],\r\n          days: [...databaseColumns?.[0]?.days, ...[values]],\r\n        };\r\n\r\n      await updateColumns({\r\n        id: data && databaseMonth.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: databaseColumnsAddedDays,\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useDayForm;\r\n","import { FcApproval } from \"react-icons/fc\";\r\nimport RadioInput from \"../../inputs/RadioInput\";\r\nimport TextInput from \"../../inputs/TextInput\";\r\nimport useDayForm from \"./useDayForm\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst DayForm = () => {\r\n  const { monthURL } = useParams();\r\n  const { formik, success } = useDayForm();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n\r\n  const { dataCurrentHours, databaseAllHours } =\r\n    useDataBaseValues(lastPartMonthURL);\r\n\r\n  let errorHoursContent = <div></div>;\r\n\r\n  if (dataCurrentHours - +formik.values.hours < 0) {\r\n    errorHoursContent = (\r\n      <small style={{ color: \"red\" }}>Brak godzin do wykorzystania </small>\r\n    );\r\n  }\r\n\r\n  if (databaseAllHours === 0) {\r\n    errorHoursContent = (\r\n      <small style={{ color: \"red\" }}> Podaj godziny w miesiącu </small>\r\n    );\r\n  }\r\n\r\n  let btnContent = <FcApproval />;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit} className=\"mt-4\">\r\n      {[\r\n        { type: \"text\", value: \"userName\", label: \"Imię\" },\r\n        { type: \"date\", value: \"date\", label: \"Dzień\" },\r\n        { type: \"number\", value: \"hours\", label: \"Godz.\" },\r\n      ].map(({ type, value, label }) => {\r\n        return (\r\n          <Form.Group key={label} className=\"\">\r\n            <div className=\" fs-6 \">\r\n              <Form.Label htmlFor=\"password\" className=\"mb-0\">\r\n                {label}\r\n              </Form.Label>\r\n            </div>\r\n            <Form.Control\r\n              id={label}\r\n              type={type}\r\n              name={value}\r\n              value={formik.values[value as keyof typeof formik.values]}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              placeholder=\"\"\r\n              size=\"sm\"\r\n              className=\"shadow-sm rounded-0\"\r\n            />\r\n            <Form.Text className=\"text-danger\" style={{ fontSize: \"0.7rem\" }}>\r\n              {formik.touched[value as keyof typeof formik.values] &&\r\n                formik.errors[value as keyof typeof formik.values] &&\r\n                formik.errors[value as keyof typeof formik.values]}\r\n            </Form.Text>\r\n          </Form.Group>\r\n        );\r\n      })}\r\n\r\n      {[\"Wewnątrz\", \"Poza\"].map(place => (\r\n        <Form.Group key={place} className=\"mb-3\">\r\n          <Form.Check\r\n            type=\"radio\"\r\n            id={place}\r\n            name={\"place\"}\r\n            value={place}\r\n            label={place}\r\n            onChange={formik.handleChange}\r\n            checked={formik.values.place === place}\r\n          />\r\n        </Form.Group>\r\n      ))}\r\n\r\n      <Form.Text className=\"text-danger\" style={{ fontSize: \"0.7rem\" }}>\r\n        {formik.touched.place && formik.errors.place && formik.errors.place}\r\n      </Form.Text>\r\n      {errorHoursContent}\r\n      <div className=\"d-grid\">\r\n        <Button\r\n          variant=\"primary\"\r\n          type=\"submit\"\r\n          className=\"rounded-0 fw-medium mt-4\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n\r\ninterface DayModel {\r\n  id?: string;\r\n  userName: string;\r\n  date: string;\r\n  hours: string | number;\r\n  place: string;\r\n}\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  columnName: string;\r\n  days?: any;\r\n}\r\n\r\nconst columns: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    columnName: \"Miesiąc\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    columnName: \"Oczekujące\",\r\n    days: [null],\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    columnName: \"Zatwierdzone\",\r\n    days: [null],\r\n  },\r\n];\r\n\r\nexport const monthPattern = {\r\n  id: \"\",\r\n  month: \"\",\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submitedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n  columns: columns,\r\n};\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { monthPattern } from \"./dataMonthForm\";\r\nimport { useAddMonthMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface ModelFormValues {\r\n  monthYear: string;\r\n}\r\n\r\nconst useMonthForm = () => {\r\n  const [addMonth, success] = useAddMonthMutation();\r\n  const date = new Date();\r\n\r\n  const currYearNum = new Intl.DateTimeFormat(\"pl\", {\r\n    year: \"numeric\",\r\n  }).format(date);\r\n\r\n  const currMonthNum = new Intl.DateTimeFormat(\"pl\", {\r\n    month: \"2-digit\",\r\n  }).format(date);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { monthYear: `${currYearNum}-${currMonthNum}` },\r\n\r\n    onSubmit: async values => {\r\n      const monthToPOST = { ...monthPattern, month: values.monthYear };\r\n      await addMonth(monthToPOST);\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useMonthForm;\r\n","import React, { useState } from \"react\";\r\nimport { monthPattern } from \"./dataMonthForm\";\r\nimport { useAddMonthMutation } from \"../../../services/apiSlice\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../../data/firebaseConfig\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport useMonthForm from \"./useMonthForm\";\r\n\r\nconst MonthForm = () => {\r\n  const { formik, success } = useMonthForm();\r\n\r\n  let btnContent = <FcApproval />;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group className=\"d-flex\">\r\n          <Form.Control\r\n            type=\"month\"\r\n            name=\"monthYear\"\r\n            min=\"2023-06\"\r\n            max=\"2025-12\"\r\n            value={formik.values.monthYear}\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            size=\"sm\"\r\n            className=\"rounded-0\"\r\n          />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            className=\"rounded-0\"\r\n            size=\"sm\"\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n\r\n          {/* <Form.Text\r\n          className=\"text-danger py-1\"\r\n          style={{ fontSize: \"0.7rem\" }}\r\n        >uuuu</Form.Text> */}\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthForm;\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport useDataBaseValues from \"../../pages/monthPanel/useDataBaseValues\";\r\n\r\nconst MonthsList = () => {\r\n  const { data } = useColumnsQuery(undefined);\r\n  const { monthURL } = useParams();\r\n  const { databaseMonthsCollection } = useDataBaseValues(monthURL);\r\n\r\n  const databaseMonthsDatesSorted =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection\r\n          .map(month => month.month)\r\n          .sort((date1: any, date2: any) => {\r\n            if (date1 < date2) {\r\n              return -1;\r\n            } else if (date1 > date2) {\r\n              return 1;\r\n            } else {\r\n              return 0;\r\n            }\r\n          })\r\n      : [];\r\n\r\n  const databaseMonthsDatesToString =\r\n    data &&\r\n    databaseMonthsDatesSorted?.map((monthDate: any) => {\r\n      const monthToDateFormat =\r\n        data && databaseMonthsDatesSorted && new Date(monthDate);\r\n\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    });\r\n\r\n  return (\r\n    <>\r\n      {data === undefined || data === null ? (\r\n        <p>Brak danych</p>\r\n      ) : (\r\n        databaseMonthsDatesToString.map((month: any, idx: any) => {\r\n          return (\r\n            <ListGroup key={month}>\r\n              <ListGroup.Item className=\"border-0 p-0 px-1\">\r\n                <Link\r\n                  to={`/miesiac/${databaseMonthsDatesSorted[idx]}`}\r\n                  key={month}\r\n                  style={{ textDecoration: \"none\" }}\r\n                >\r\n                  {month}\r\n                </Link>\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          );\r\n        })\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthsList;\r\n","import { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../pages/monthPanel/hooksMonthPanel/useDataBaseValues\";\r\nimport { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport DayForm from \"./dayForm/DayForm\";\r\nimport MonthForm from \"./monthForm/MonthForm\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport MonthsList from \"./MonthsList\";\r\n\r\nconst IndexSidebar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const urlPrintNavBar = useLocation().pathname;\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(s => !s);\r\n\r\n  const logout = () => {\r\n    auth.signOut();\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(urlPrintNavBar) ? (\r\n        <>\r\n          <Button variant=\"primary\" onClick={toggleShow} className=\"me-2\">\r\n            <GiHamburgerMenu />\r\n          </Button>\r\n          <Offcanvas\r\n            show={show}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className=\"w-20\"\r\n            style={{ width: 200 }}\r\n          >\r\n            <Offcanvas.Header closeButton>\r\n              <Offcanvas.Title>\r\n                <div\r\n                  onClick={logout}\r\n                  className=\"fs-6\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  Wyloguj\r\n                </div>\r\n              </Offcanvas.Title>\r\n            </Offcanvas.Header>\r\n            <Offcanvas.Body>\r\n              <MonthForm />\r\n              <MonthsList />\r\n              <DayForm />\r\n            </Offcanvas.Body>\r\n          </Offcanvas>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\n","import { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n\r\n\r\n\r\n  // date transformation\r\n const databaseMonthsDates =\r\n   data && databaseMonthsCollection\r\n     ? databaseMonthsCollection.map(month => month.month)\r\n     : [];\r\n \r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["initialValues","id","crypto","randomUUID","date","hours","userName","place","validationSchema","yup","required","moreThan","_useUpdateColumnsMuta","useUpdateColumnsMutation","_useUpdateColumnsMuta2","_slicedToArray","updateColumns","success","urlParts","useLocation","pathname","split","lastPartMonthURL","length","_useDataBaseValues","useParams","monthURL","useDataBaseValues","databaseColumns","databaseMonth","data","dataCurrentHours","formik","useFormik","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_databaseColumns$","databaseColumnsAddedDays","wrap","_context","prev","next","setFieldValue","abrupt","_toConsumableArray","_objectSpread","days","concat","columns","stop","_x","apply","arguments","_useDayForm","useDayForm","databaseAllHours","errorHoursContent","_jsx","style","color","children","btnContent","FcApproval","isLoading","Spinner","animation","size","variant","className","isError","_jsxs","Form","handleSubmit","type","value","label","map","_ref","Group","Label","htmlFor","Control","name","onChange","handleChange","onBlur","handleBlur","placeholder","Text","fontSize","touched","errors","Check","checked","Button","monthPattern","month","allHours","currentHours","submitedHours","acceptedHours","rejectedHours","columnName","_useAddMonthMutation","useAddMonthMutation","_useAddMonthMutation2","addMonth","Date","currYearNum","Intl","DateTimeFormat","year","format","currMonthNum","monthYear","monthToPOST","_useMonthForm","useMonthForm","_Fragment","min","max","useColumnsQuery","undefined","databaseMonthsCollection","databaseMonthsDatesSorted","sort","date1","date2","databaseMonthsDatesToString","monthDate","monthToDateFormat","timeZone","idx","ListGroup","Item","Link","to","textDecoration","navigate","useNavigate","urlPrintNavBar","_useState","useState","_useState2","show","setShow","includes","onClick","s","GiHamburgerMenu","Offcanvas","onHide","scroll","backdrop","width","Header","closeButton","Title","auth","signOut","cursor","Body","MonthForm","MonthsList","DayForm","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","item","addDaysToColumns","find","dataBaseSubmitedHours","databaseAcceptedHours","databaseRejectedHours","submitedHoursSum","reduce","sum","day","acceptedHoursSum","rejectedHoursSum","databaseMonthsDates","string","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","column","hasOwnProperty","handleDragDrop","results","setColumns","source","destination","draggableId","droppableId","index","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
{"version":3,"file":"static/js/839.a08f09f9.chunk.js","mappings":"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","sources":["components/inputs/TextInput.tsx","pages/monthPanel/DayPrintData.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerMonthPanel/FormHeaderMonhPanel.tsx","pages/monthPanel/headerMonthPanel/HeaderMonthPanel.tsx","pages/monthPanel/IndexMonthPanel.tsx","pages/monthPanel/hooksMonthPanel/useDataBaseValues.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["export interface Props {\r\n  type: string;\r\n  name: string;\r\n  value: string | number;\r\n  label: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextInput = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={props.name}>{props.label}</label>\r\n      <input\r\n        id={props.name}\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        onBlur={props.handleBlur}\r\n        placeholder={props.placeholder}\r\n        style={{ width: 50 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","interface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <small>Imię:{props.day.userName}</small>\r\n      <small>{props.day.date}</small>\r\n      <small>Godz.: {props.day.hours}</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\nimport useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  // const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateColumnsMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    databaseMonth,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props?.day?.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <DayPrintData day={props.day} />\r\n              <button onClick={() => handleUpdate(props.day.id)}>\r\n                <FaTrashAlt />\r\n              </button>\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\nimport useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: \"20vw\",\r\n                minHeight: \"100vh\",\r\n                height: \"fit-content\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport TextInput from \"../../../components/inputs/TextInput\";\r\nimport { handleChange } from \"../../../redux/storeFeatures/hoursPanelSlice\";\r\nimport { useUpdateColumnsMutation } from \"../../../services/apiSlice\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const dispatch = useDispatch();\r\n  const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n  const { databaseMonth, data } = useDataBaseValues(monthURL);\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    dispatch(handleChange(value));\r\n  };\r\n\r\n  const handleAddHours = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    await updateColumns({\r\n      id: data && databaseMonth?.id,\r\n      columns: {\r\n        ...databaseMonth,\r\n        allHours: +numberOfDays,\r\n      },\r\n    });\r\n  };\r\n\r\n  let btnContent = <FcApproval />;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleAddHours} style={{ display: \"flex\" }}>\r\n      <TextInput\r\n        type=\"number\"\r\n        name=\"numberOfDays\"\r\n        value={numberOfDays}\r\n        label=\"Godziny w miesiącu \"\r\n        placeholder=\"Liczba\"\r\n        handleChange={handleInputChange}\r\n      />\r\n\r\n      <button type=\"submit\">{btnContent}</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../hooksMonthPanel/useDataBaseValues\";\r\nimport FormHeaderMonhPanel from \"./FormHeaderMonhPanel\";\r\n\r\nconst HeaderMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseAllHours, dataCurrentHours } = useDataBaseValues(monthURL);\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n\r\n  return (\r\n    <header>\r\n      <div style={{ display: \"flex\" }}>\r\n        <FormHeaderMonhPanel />\r\n\r\n        <div style={{ marginLeft: 30 }}>{monthToString}</div>\r\n      </div>\r\n\r\n      <div>\r\n      Wszystkie &nbsp;&nbsp; {databaseAllHours} - {dataCurrentHours}{\" \"}\r\n        &nbsp;&nbsp; Do wykorzystania\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMonthPanel;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport IndexSidebar from \"../../components/sidebar/IndexSidebar\";\r\nimport {\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderMonthPanel from \"./headerMonthPanel/HeaderMonthPanel\";\r\nimport useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\nimport { handleDragDrop } from \"./utils\";\r\nimport DayForm from \"../../components/sidebar/dayForm/DayForm\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateColumnsMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    data && setColumns(databaseMonth?.columns);\r\n  }, [data, monthURL]);\r\n\r\n  console.log('columns',columns)\r\n  // console.log(\"database\", databaseColumns);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      databaseMonth?.month &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [\r\n    columns,\r\n    databaseAllHours,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  ]);\r\n\r\n  let columnsContent = !succes.isError ? (\r\n    <div>\r\n      <div>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          <div style={{ display: \"flex\" }}>\r\n            {[\r\n              { header: \"Złożone:\", counter: dataBaseSubmitedHours },\r\n              { header: \"Zakceptowane:\", counter: databaseAcceptedHours },\r\n              { header: \"Odrzucone:\", counter: databaseRejectedHours },\r\n            ].map(({ header, counter }) => {\r\n              return (\r\n                <h4 key={header} style={{ marginLeft: 20, width: \"20vw\" }}>\r\n                  {header} {\"\"}\r\n                  {counter}\r\n                </h4>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\" }}>\r\n            {columns &&\r\n              columns.length > 0 &&\r\n              columns.map((column: any, idx: any) => {\r\n                return <Column column={column} key={column.id} />;\r\n              })}\r\n          </div>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>Błąd</div>\r\n  );\r\n\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      columnsContent = (\r\n        <div style={{ textAlign: \"center\" }}> {error.error} </div>\r\n      );\r\n  }\r\n  // console.log(\"\", databaseMonth);\r\n  return (\r\n    <>\r\n      {databaseMonth === undefined || databaseMonth === null ? (\r\n        <div style={{ textAlign: \"center\" }}>Wybierz miesiąc</div>\r\n      ) : (\r\n        <div style={{ display: \"flex\", marginLeft: \"30vw\" }}>\r\n          <div>\r\n            <HeaderMonthPanel />\r\n            {columnsContent}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","import { useColumnsQuery } from \"../../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null) => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  return {\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","import { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n\r\n\r\n\r\n  // date transformation\r\n const databaseMonthsDates =\r\n   data && databaseMonthsCollection\r\n     ? databaseMonthsCollection.map(month => month.month)\r\n     : [];\r\n \r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["props","_jsxs","children","_jsx","htmlFor","name","label","id","type","value","onChange","handleChange","onBlur","handleBlur","placeholder","style","width","day","userName","date","hours","_props$day","_useColumnsQuery","useColumnsQuery","undefined","data","_useUpdateColumnsMuta","error","useUpdateColumnsMutation","_useUpdateColumnsMuta2","_slicedToArray","updateColumns","succes","monthURL","useParams","_useDataBaseValues","useDataBaseValues","databaseColumns","databaseMonth","databaseAllHours","handleUpdate","acceptedHoursSum","rejectedHoursSum","submitedHoursSum","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","map","column","days","_objectSpread","filter","columns","stop","_x2","apply","arguments","_x","btnContent","border","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","onClick","FaTrashAlt","isLoading","isError","_Fragment","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","minHeight","height","length","idx","Day","crypto","randomUUID","dispatch","useDispatch","numberOfDays","useSelector","state","hoursPanel","success","handleAddHours","e","preventDefault","allHours","FcApproval","onSubmit","display","TextInput","target","dataCurrentHours","monthToDateFormat","Date","monthToString","Intl","DateTimeFormat","year","month","timeZone","format","FormHeaderMonhPanel","marginLeft","databaseAcceptedHours","databaseRejectedHours","dataBaseSubmitedHours","_useState","useState","_useState2","setColumns","useEffect","console","log","currentHours","submitedHours","acceptedHours","rejectedHours","columnsContent","DragDropContext","onDragEnd","results","handleDragDrop","header","counter","Column","textAlign","HeaderMonthPanel","databaseMonthsId","Object","keys","databaseMonthsWithId","values","flat","item","databaseMonthsCollection","addDaysToColumns","find","reduce","sum","databaseMonthsDates","string","monthDate","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
{"version":3,"file":"static/js/393.bac9d062.chunk.js","mappings":"qRAcA,EAVqB,SAACA,GACpB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACED,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,aAAMF,EAAMG,IAAIC,aACvBC,EAAAA,EAAAA,KAAA,SAAAH,SAAQF,EAAMG,IAAIG,QAClBL,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,UAAQF,EAAMG,IAAII,WAG/B,E,UCqFA,EAhFY,SAACP,GAAkB,IAADQ,EAG5BC,GAAwBC,EAAAA,EAAAA,SAAmBC,GAAnCC,EAAIH,EAAJG,KACRC,GADmBJ,EAALK,OACkBC,EAAAA,EAAAA,OAAwBC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAjDK,EAAaF,EAAA,GAAEG,EAAMH,EAAA,GACpBI,GAAaC,EAAAA,EAAAA,MAAbD,SAERE,GAOIC,EAAAA,EAAAA,GAAkBH,GANpBI,EAAeF,EAAfE,gBAEAC,GADgBH,EAAhBI,iBACaJ,EAAbG,eAMIE,GALYL,EAAhBM,iBACgBN,EAAhBO,iBACgBP,EAAhBQ,iBAGgB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAO,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACjCC,IAAAA,KAAU,CACRC,MAAO,sCACPC,kBAAkB,EAClBC,mBAAoB,UACpBC,kBAAmB,OACnBC,kBAAmB,MACnBC,iBAAkB,QACjBC,KAAI,eAAAC,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAC,SAAAgB,EAAMC,GAAM,IAAAC,EAAA,OAAAnB,EAAAA,EAAAA,KAAAI,MAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,WACdW,EAAOG,YAAY,CAADD,EAAAb,KAAA,QAWnB,OAVKY,GAAgCG,EAAAA,EAAAA,GAAI/B,GAAiBgC,KACzD,SAACC,GACC,OAAIA,GAAUA,EAAOC,MACnBC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKF,GAAM,IACTC,KAAMD,EAAOC,KAAKE,QAAO,SAACzD,GAAQ,OAAKA,EAAIiC,KAAOA,CAAE,MAGjDqB,CACT,IACDJ,EAAAb,KAAA,EAEKtB,EAAc,CAClBkB,GAAIxB,IAAqB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAeW,IAC3ByB,SAAOF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAOlC,GAAa,IAAEoC,QAAST,MACrC,KAAD,mBAAAC,EAAAS,OAAA,GAAAZ,EAAA,KAEL,gBAAAa,GAAA,OAAAd,EAAAe,MAAA,KAAAC,UAAE,CAAF,CAnBM,IAmBJ,wBAAA3B,EAAAwB,OAAA,GAAA3B,EAAA,KACJ,gBA5BiB+B,GAAA,OAAAnC,EAAAiC,MAAA,KAAAC,UAAA,MA8BdE,GACF9D,EAAAA,EAAAA,KAAA,OAAK+D,MAAO,CAAEC,OAAQ,mBAAoBnE,UACxCG,EAAAA,EAAAA,KAACiE,EAAAA,GAAS,CACRC,YAAavE,EAAMG,MAAY,OAALH,QAAK,IAALA,GAAU,QAALQ,EAALR,EAAOG,WAAG,IAAAK,OAAL,EAALA,EAAY4B,GAAGoC,YACzCC,MAAOzE,EAAMyE,MAAMvE,SAElB,SAAAwE,GACC,OACEzE,EAAAA,EAAAA,MAAA,OAAA0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMe,EAASC,gBACTD,EAASE,iBAAe,IAC5BC,IAAKH,EAASI,SAAS5E,SAAA,EAEvBG,EAAAA,EAAAA,KAAC0E,EAAY,CAAC5E,IAAKH,EAAMG,OACzBE,EAAAA,EAAAA,KAAA,UAAQ2E,QAAS,kBAAMrD,EAAa3B,EAAMG,IAAIiC,GAAG,EAAClC,UAChDG,EAAAA,EAAAA,KAAC4E,EAAAA,IAAU,SAInB,MAYN,OAPI9D,EAAO+D,YACTf,GAAa9D,EAAAA,EAAAA,KAAA,OAAAH,SAAK,iBAEhBiB,EAAOgE,UACThB,GAAa9D,EAAAA,EAAAA,KAAA,OAAAH,SAAK,yBAGbG,EAAAA,EAAAA,KAAA+E,EAAAA,SAAA,CAAAlF,SAAGiE,GACZ,ECrDA,EAhCe,SAACnE,GACd,OACEK,EAAAA,EAAAA,KAAA,OAAAH,UACEG,EAAAA,EAAAA,KAACgF,EAAAA,GAAS,CAACC,YAAatF,EAAMyD,OAAOrB,GAAGlC,SACrC,SAACwE,EAAUa,GAAc,IAADC,EAAAC,EACvB,OACExF,EAAAA,EAAAA,MAAA,OAAA0D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMe,EAASgB,gBAAc,IAC3Bb,IAAKH,EAASI,SACdV,MAAO,CACLC,OAAQ,kBACRsB,MAAO,OACPC,UAAW,QACXC,OAAQ,eACR3F,SAAA,CAEDF,EAAMyD,OAAOC,MACZ1D,EAAMyD,OAAOC,KAAKoC,OAAS,IACf,QADgBN,EAC5BxF,EAAMyD,cAAM,IAAA+B,GAAM,QAANC,EAAZD,EAAc9B,YAAI,IAAA+B,OAAN,EAAZA,EAAoBjC,KAAI,SAACrD,EAAU4F,GACjC,OACE1F,EAAAA,EAAAA,KAAC2F,EAAG,CAAC7F,IAAKA,EAAKsE,MAAOsB,GAAUE,OAAOC,aAE3C,KACDxB,EAASyB,eAGhB,KAIR,E,4DCtCaC,EAAmBC,EAAAA,GAAW,CACzCC,SAAUD,EAAAA,KAEPE,IAAI,IAAK,YACTC,SAAS,8BC8Bd,EAvB+B,WAC7B,IAAQpF,GAAaC,EAAAA,EAAAA,MAAbD,SACRP,GAAiCE,EAAAA,EAAAA,MAAwBC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAlDK,EAAaF,EAAA,GAAEyF,EAAOzF,EAAA,GAC7BM,GAAgCC,EAAAA,EAAAA,GAAkBH,GAA1CK,EAAaH,EAAbG,cAAeb,EAAIU,EAAJV,KAEjB8F,GAASC,EAAAA,EAAAA,IAA2B,CACxCC,cAAe,CAAEN,SAAU,GAC3BF,iBAAkBA,EAClBS,SAAS,WAAD,IAAAC,GAAA9E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAgB,EAAO6D,EAAMhF,GAAA,IAAAiF,EAAA,OAAA/E,EAAAA,EAAAA,KAAAI,MAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAAY,OAATwE,EAASjF,EAATiF,UAAS3D,EAAAb,KAAA,EAC3BtB,EAAc,CAClBkB,GAAIxB,IAAqB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAeW,IAC3ByB,SAAOF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlC,GAAa,IAChB6E,SAAUS,EAAOT,aAElB,KAAD,EACDU,IAAY,wBAAA3D,EAAAS,OAAA,GAAAZ,EAAA,KACd,gBAAAgB,EAAAH,GAAA,OAAA+C,EAAA9C,MAAA,KAAAC,UAAA,EATQ,KAYX,MAAO,CAAEyC,OAAAA,EAAQD,QAAAA,EACnB,ECsCA,EAjE4B,WAC1B,IAAAQ,EAA4BC,IAApBR,EAAMO,EAANP,OAAQD,EAAOQ,EAAPR,QAEZtC,GACF9D,EAAAA,EAAAA,KAAC8G,EAAAA,IAAmB,CAAC/C,MAAO,CAAEgD,SAAU,UAe1C,OAZIX,EAAQvB,YACVf,GACE9D,EAAAA,EAAAA,KAACgH,EAAAA,EAAO,CAACC,UAAU,SAAUC,QAAQ,YAAWrH,UAC9CG,EAAAA,EAAAA,KAAA,QAAMmH,UAAU,kBAAiBtH,SAAC,kBAKpCuG,EAAQtB,UACVhB,GAAa9D,EAAAA,EAAAA,KAAA,OAAAH,SAAK,yBAIlBG,EAAAA,EAAAA,KAAA+E,EAAAA,SAAA,CAAAlF,UACEG,EAAAA,EAAAA,KAACoH,EAAAA,EAAI,CAACZ,SAAUH,EAAOgB,aAAcF,UAAU,GAAEtH,UAC/CD,EAAAA,EAAAA,MAACwH,EAAAA,EAAKE,MAAK,CACTH,UAAU,8BACVpD,MAAO,CAAEyB,OAAQ,QAAS3F,SAAA,EAE1BG,EAAAA,EAAAA,KAACoH,EAAAA,EAAKG,MAAK,CAACC,QAAQ,WAAWL,UAAU,OAAMtH,SAAC,kCAGhDD,EAAAA,EAAAA,MAAA,OAAKuH,UAAU,mBAAkBtH,SAAA,EAC/BG,EAAAA,EAAAA,KAACoH,EAAAA,EAAKK,QAAO,CACX1F,GAAG,WACH2F,KAAK,SACLC,KAAK,WACLC,IAAK,EACLC,MAAOxB,EAAOK,OAAOT,SACrB6B,SAAUzB,EAAO0B,aACjBC,OAAQ3B,EAAO4B,WACfC,KAAK,KACLf,UAAU,iBACVpD,MAAO,CAAEuB,MAAO,WAElBtF,EAAAA,EAAAA,KAACoH,EAAAA,EAAKe,KAAI,CACRhB,UAAU,0CACVpD,MAAO,CAAEgD,SAAU,SAAUvB,OAAQ,QAAS3F,SAE7CwG,EAAO+B,QAAQnC,UACdI,EAAOgC,OAAOpC,UACdI,EAAOgC,OAAOpC,eAGpBjG,EAAAA,EAAAA,KAACsI,EAAAA,EAAM,CACLZ,KAAK,SACLR,QAAQ,YACRC,UAAU,sGACVpD,MAAO,CAAEuB,MAAO,MAAOE,OAAQ,QAAS3F,SAEvCiE,UAMb,E,8BC3BA,EAnCyB,WACvB,IAAQ/C,GAAaC,EAAAA,EAAAA,MAAbD,SAERE,GAA+CC,EAAAA,EAAAA,GAAkBH,GAAzDM,EAAgBJ,EAAhBI,iBAAkBkH,EAAgBtH,EAAhBsH,iBAEpBC,EAAoBzH,GAAY,IAAI0H,KAAK1H,GAE7CyH,GACA,IAAIE,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,OACPC,SAAU,QACTC,OAAOP,GAEZ,OACExI,EAAAA,EAAAA,KAAA,UAAAH,UACEG,EAAAA,EAAAA,KAACgJ,EAAAA,EAAS,CAAAnJ,UACRD,EAAAA,EAAAA,MAACqJ,EAAAA,EAAG,CAAApJ,SAAA,EACFG,EAAAA,EAAAA,KAACkJ,EAAAA,EAAG,CAACC,GAAI,EAAGhC,UAAU,0BAAyBtH,UAC7CG,EAAAA,EAAAA,KAACoJ,EAAmB,OAGtBpJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAG,CAACC,GAAI,EAAGhC,UAAU,0BAAyBtH,UAC7CD,EAAAA,EAAAA,MAAA,OAAKuH,UAAU,cAAatH,SAAA,EAC1BD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAAK,cAAYwB,MAEjBzB,EAAAA,EAAAA,MAAA,OAAKuH,UAAU,OAAMtH,SAAA,CAAC,UAAQ0I,gBAO5C,E,UCkFA,EA1GwB,WACtB,IAAAnI,GAAwBC,EAAAA,EAAAA,SAAmBC,GAAnCC,EAAIH,EAAJG,KAAME,EAAKL,EAALK,MACdD,GAAgCE,EAAAA,EAAAA,MAAwBC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAAjDK,EAAaF,EAAA,GAAEG,EAAMH,EAAA,GACpBI,GAAaC,EAAAA,EAAAA,MAAbD,SAERE,GAUIC,EAAAA,EAAAA,GAAkBH,GATpBM,EAAgBJ,EAAhBI,iBACAF,EAAeF,EAAfE,gBACAkI,EAAqBpI,EAArBoI,sBACAC,EAAqBrI,EAArBqI,sBACAC,EAAqBtI,EAArBsI,sBACAnI,EAAaH,EAAbG,cACAK,EAAgBR,EAAhBQ,iBACAF,EAAgBN,EAAhBM,iBACAC,EAAgBP,EAAhBO,iBAGFgI,GAA8BC,EAAAA,EAAAA,UAAgB,IAAGC,GAAA9I,EAAAA,EAAAA,GAAA4I,EAAA,GAA1ChG,EAAOkG,EAAA,GAAEC,EAAUD,EAAA,IAE1BE,EAAAA,EAAAA,YAAU,WACRrJ,GAAQa,GAAiBuI,EAAWxI,EACtC,GAAG,CAACZ,EAAMQ,KAKV6I,EAAAA,EAAAA,YAAU,WACRrJ,IACS,OAAPiD,QAAO,IAAPA,OAAO,EAAPA,EAASiC,QAAS,IACL,OAAbrE,QAAa,IAAbA,OAAa,EAAbA,EAAeyH,QACfhI,EAAc,CACZkB,GAAIxB,IAAqB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAeW,IAC3ByB,SAAOF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFlC,GAAa,IAChBoC,QAASA,EACTqG,aACExI,EACAI,EACAF,EACAC,EACAA,EACFsI,cAAerI,EACfsI,cAAexI,EACfyI,cAAexI,KAGvB,GAAG,CAACgC,IAEJ,IAAIyG,EAAkBnJ,EAAOgE,SAgC3B9E,EAAAA,EAAAA,KAAA,OAAAH,SAAK,oBA/BLG,EAAAA,EAAAA,KAAA,OAAAH,UACEG,EAAAA,EAAAA,KAAA,OAAAH,UACED,EAAAA,EAAAA,MAACsK,EAAAA,GAAe,CACdC,UAAW,SAAAC,GAAO,OAAIC,EAAAA,EAAAA,IAAeD,EAAS5G,EAASmG,EAAW,EAAC9J,SAAA,EAEnEG,EAAAA,EAAAA,KAAA,OAAK+D,MAAO,CAAEuG,QAAS,QAASzK,SAC7B,CACC,CAAE0K,OAAQ,qBAAYC,QAASjB,GAC/B,CAAEgB,OAAQ,gBAAiBC,QAASnB,GACpC,CAAEkB,OAAQ,aAAcC,QAASlB,IACjCnG,KAAI,SAAAzB,GAA0B,IAAvB6I,EAAM7I,EAAN6I,OAAQC,EAAO9I,EAAP8I,QACf,OACE5K,EAAAA,EAAAA,MAAA,MAAiBmE,MAAO,CAAE0G,WAAY,GAAInF,MAAO,QAASzF,SAAA,CACvD0K,EAAO,IAAE,GACTC,IAFMD,EAKb,OAGFvK,EAAAA,EAAAA,KAAA,OAAK+D,MAAO,CAAEuG,QAAS,QAASzK,SAC7B2D,GACCA,EAAQiC,OAAS,GACjBjC,EAAQL,KAAI,SAACC,EAAasC,GACxB,OAAO1F,EAAAA,EAAAA,KAAC0K,EAAM,CAACtH,OAAQA,GAAaA,EAAOrB,GAC7C,aAgBZ,OAPItB,GACE,UAAWA,IACbwJ,GACErK,EAAAA,EAAAA,MAAA,OAAKmE,MAAO,CAAE4G,UAAW,UAAW9K,SAAA,CAAC,IAAEY,EAAMA,MAAM,SAKvDT,EAAAA,EAAAA,KAAA+E,EAAAA,SAAA,CAAAlF,cACqBS,IAAlBc,GAAiD,OAAlBA,GAC9BpB,EAAAA,EAAAA,KAAA,OAAK+D,MAAO,CAAE4G,UAAW,UAAW9K,SAAC,uCAErCG,EAAAA,EAAAA,KAAA,OAAK+D,MAAO,CAAEuG,QAAS,OAAQG,WAAY,QAAS5K,UAClDD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEG,EAAAA,EAAAA,KAAC4K,EAAgB,IACfX,QAMd,C,wDCbA,IAvF0B,WAA2C,IAA1ClJ,EAAa6C,UAAA6B,OAAA,QAAAnF,IAAAsD,UAAA,GAAAA,UAAA,GAAG,KACjCrD,GAASF,EAAAA,EAAAA,SAAmBC,GAA5BC,KAEFsK,EAAmBtK,GAAQuK,OAAOC,KAAKxK,GAEvCyK,EACJH,GACAC,OAAOpE,OAAOnG,GACX0K,OACA9H,KAAI,SAAC+H,EAAWxF,GACf,OAAApC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAY4H,GAAI,IAAEnJ,GAAI8I,EAAiBnF,IACzC,IAEEyF,GAA2BC,EAAAA,EAAAA,IAAiBJ,GAE5C5J,EACJb,GAAQ4K,EAAyB1F,OAAS,EACd,OAAxB0F,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BE,MAAK,SAACxC,GAAU,OAAKA,EAAMA,QAAU9H,CAAQ,SACvET,EAEAa,EAAkBZ,IAAqB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAeoC,SAIzCnC,EAAmBd,EAAoB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAe6E,SAAW,GACpDsC,EAAmBhI,EAAoB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAeyI,aAAe,GACxDN,EAAwBhJ,EAAoB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAe0I,cAAgB,GAC9DT,EAAwB9I,EAAoB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAe2I,cAAgB,GAC9DT,EAAwB/I,EAAoB,OAAba,QAAa,IAAbA,OAAa,EAAbA,EAAe4I,cAAgB,GAI9DvI,EACJlB,GAAQ4K,EAAyB1F,OAAS,GAAoB,OAAftE,QAAe,IAAfA,GAAAA,EAAkB,GAAGkC,KACjD,OAAflC,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGkC,KAAKiI,QAAO,SAACC,EAAUzL,GAC1C,OAAOyL,EAAMzL,EAAII,KACnB,GAAG,GACH,EAEAqB,EACJhB,GAAQ4K,EAAyB1F,OAAS,GAAoB,OAAftE,QAAe,IAAfA,GAAAA,EAAkB,GAAGkC,KACjD,OAAflC,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGkC,KAAKiI,QAAO,SAACC,EAAUzL,GAC1C,OAAOyL,EAAMzL,EAAII,KACnB,GAAG,GACH,EAEAsB,EACJjB,GAAQ4K,EAAyB1F,OAAS,GAAoB,OAAftE,QAAe,IAAfA,GAAAA,EAAkB,GAAGkC,KACjD,OAAflC,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGkC,KAAKiI,QAAO,SAACC,EAAUzL,GAC1C,OAAOyL,EAAMzL,EAAII,KACnB,GAAG,GACH,EAGAsL,EACJjL,GAAQ4K,EACJA,EAAyBhI,KAAI,SAAA0F,GAAK,OAAIA,EAAMA,KAAK,IACjD,GAWN,MAAO,CACL4C,OAVaD,EAAoBrI,KAAI,SAACuI,GACtC,IAAMlD,EAAoB,IAAIC,KAAKiD,GACnC,OAAO,IAAIhD,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,SAAU,QACTC,OAAOP,EACZ,IAIEjI,KAAAA,EACAsK,iBAAAA,EACAM,yBAAAA,EACA/J,cAAAA,EACAD,gBAAAA,EACAE,iBAAAA,EACAkH,iBAAAA,EACAc,sBAAAA,EACAC,sBAAAA,EACAC,sBAAAA,EACAhI,iBAAAA,EACAC,iBAAAA,EACAC,iBAAAA,EACA+J,oBAAAA,EAEJ,C,kHCpEaJ,EAAmB,SAACO,GAC/B,OAAKC,MAAMC,QAAQF,GAIT,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKxI,KAAI,SAAC2I,GAAc,IAADC,EAKNC,EAAtB,OAJ2B,OAAHF,QAAG,IAAHA,GAAY,QAATC,EAAHD,EAAKtI,eAAO,IAAAuI,OAAT,EAAHA,EAAcE,OAAM,SAAC7I,GAAW,OACtDA,EAAO8I,eAAe,OAAO,KAaxBJ,GATLxI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKwI,GAAG,IACNtI,QAAY,OAAHsI,QAAG,IAAHA,GAAY,QAATE,EAAHF,EAAKtI,eAAO,IAAAwI,OAAT,EAAHA,EAAc7I,KAAI,SAACC,GAAW,OAAAE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClCF,GAAM,IACTC,KAAMD,EAAOC,MAAQ,IAAE,KAM/B,IAnBS,EAoBX,EAwBagH,EAAiB,SAACD,EAAc5G,EAAcmG,GACzD,IAAQwC,EAAwB/B,EAAxB+B,OAAQC,EAAgBhC,EAAhBgC,YAEhB,GAAKA,IAEHD,EAAOjI,cAAgBkI,EAAYnH,aACnCkH,EAAO/H,QAAUgI,EAAYhI,OAI/B,GAAI+H,EAAOlH,cAAgBmH,EAAYnH,YAAa,CAClD,IAAMoH,EAAkB7I,EAAQ8I,WAAU,SAAClJ,GACzC,OAAOA,EAAOrB,KAAOoK,EAAOlH,WAC9B,IAEMsH,EAAuB/I,EAAQ8I,WAAU,SAAClJ,GAC9C,OAAOA,EAAOrB,KAAOqK,EAAYnH,WACnC,IAEMuH,GAAatJ,EAAAA,EAAAA,GAAOM,EAAQ6I,GAAiBhJ,MAE7CoJ,EACJN,EAAOlH,cAAgBmH,EAAYM,YAAUxJ,EAAAA,EAAAA,GACrCM,EAAQ+I,GAAsBlJ,MAClCmJ,EAENG,EAAqBH,EAAcI,OAAOT,EAAO/H,MAAO,GAAjDyI,GAAmDjM,EAAAA,EAAAA,GAAA+L,EAAA,GAAzC,GACjBF,EAAmBG,OAAOR,EAAYhI,MAAO,EAAGyI,GAEhD,IAAMC,GAAU5J,EAAAA,EAAAA,GAAOM,GAEvBsJ,EAAWT,IAAgB/I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBE,EAAQ6I,IAAgB,IAC3BhJ,KAAMmJ,IAGRM,EAAWP,IAAqBjJ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BE,EAAQ+I,IAAqB,IAChClJ,KAAMoJ,IAGR9C,EAAWmD,EACb,KAAO,CACL,IAAMC,EAAgBX,EAAYhI,MAE5BiI,EAAkB7I,EAAQ8I,WAAU,SAAClJ,GACzC,OAAOA,EAAOrB,KAAOoK,EAAOlH,WAC9B,IAEM5B,GAAIH,EAAAA,EAAAA,GAAOM,EAAQ6I,GAAiBhJ,MAC1C2J,EAAqB3J,EAAKuJ,OAAOT,EAAO/H,MAAO,GAAxCyI,GAA0CjM,EAAAA,EAAAA,GAAAoM,EAAA,GAAhC,GACjB3J,EAAKuJ,OAAOG,EAAe,EAAGF,GAE9B,IAAMI,GAAU/J,EAAAA,EAAAA,GAAOM,GAEvByJ,EAAWZ,IAAgB/I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBE,EAAQ6I,IAAgB,IAC3BhJ,KAAMA,IAGRsG,EAAWsD,EACb,CACF,C","sources":["pages/monthPanel/DayPrintData.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/validationFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/useFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/FormHeaderMonhPanel.tsx","pages/monthPanel/headerMonthPanel/HeaderMonthPanel.tsx","pages/monthPanel/IndexMonthPanel.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["interface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <small>Imię:{props.day.userName}</small>\r\n      <small>{props.day.date}</small>\r\n      <small>Godz.: {props.day.hours}</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useMonthsDataQuery,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\n// import useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\nimport useDataBaseValues from \"./useDataBaseValues\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  // const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useMonthsDataQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    databaseMonth,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props?.day?.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <DayPrintData day={props.day} />\r\n              <button onClick={() => handleUpdate(props.day.id)}>\r\n                <FaTrashAlt />\r\n              </button>\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n// import useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\n\r\nimport useDataBaseValues from \"./useDataBaseValues\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: \"20vw\",\r\n                minHeight: \"100vh\",\r\n                height: \"fit-content\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUpdateMonthMutation } from \"../../../../services/apiSlice\";\r\nimport useDataBaseValues from \"../../useDataBaseValues\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { validationSchema } from \"./validationFormHeaderMonthPanel\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useFormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n  const { databaseMonth, data } = useDataBaseValues(monthURL);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, {resetForm}) => {\r\n      await updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          allHours: values.allHours,\r\n        },\r\n      });\r\n       resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useFormHeaderMonhPanel;\r\n","\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useFormHeaderMonhPanel from \"./useFormHeaderMonthPanel\";\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n  const { formik, success } = useFormHeaderMonhPanel();\r\n\r\n  let btnContent = (\r\n    <AiOutlinePlusCircle style={{ fontSize: \"2rem\" }} />\r\n  );\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\"  variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group\r\n          className=\"d-flex align-items-end my-3\"\r\n          style={{ height: \"2rem\" }}\r\n        >\r\n          <Form.Label htmlFor=\"allHours\" className=\"mb-0\">\r\n            Podaj ilość godzin\r\n          </Form.Label>\r\n          <div className=\"align-self-start\">\r\n            <Form.Control\r\n              id=\"allHours\"\r\n              type=\"number\"\r\n              name=\"allHours\"\r\n              min={1}\r\n              value={formik.values.allHours}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className=\"rounded-0 ms-2\"\r\n              style={{ width: \"4rem\" }}\r\n            />\r\n            <Form.Text\r\n              className=\"text-danger d-block mt-0 mb-1 lh-0 ms-2\"\r\n              style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n            >\r\n              {formik.touched.allHours &&\r\n                formik.errors.allHours &&\r\n                formik.errors.allHours}\r\n            </Form.Text>\r\n          </div>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            className=\"rounded-0 d-flex align-items-center justify-content-center px-0  bg-transparent  text-dark border-0\"\r\n            style={{ width: \"10%\", height: \"100%\" }}\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useParams } from \"react-router-dom\";\r\n// import useDataBaseValues from \"../hooksMonthPanel/useDataBaseValues\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\n\r\nconst HeaderMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseAllHours, dataCurrentHours } = useDataBaseValues(monthURL);\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n\r\n  return (\r\n    <header>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={7} className=\"order-1 order-sm-2 px-0\">\r\n            <FormHeaderMonhPanel />\r\n          </Col>\r\n\r\n          <Col sm={5} className=\"order-2 order-sm-1 px-0\">\r\n            <div className=\"d-flex my-3\">\r\n              <div>Wszystkie: {databaseAllHours}</div>\r\n\r\n              <div className=\"ms-4\">Wolne: {dataCurrentHours}</div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMonthPanel;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport IndexSidebar from \"../../components/sidebar/IndexSidebar\";\r\nimport {\r\n  useMonthsDataQuery,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderMonthPanel from \"./headerMonthPanel/HeaderMonthPanel\";\r\n// import useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\nimport { handleDragDrop } from \"./utils\";\r\nimport DayForm from \"../../components/sidebar/dayForm/DayForm\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nimport useDataBaseValues from \"./useDataBaseValues\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { data, error } = useMonthsDataQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    data && databaseMonth && setColumns(databaseColumns);\r\n  }, [data, monthURL]);\r\n\r\n  // console.log(\"columns\", columns);\r\n  // console.log(\"database\", databaseColumns);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      columns?.length > 1 &&\r\n      databaseMonth?.month &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [columns]);\r\n\r\n  let columnsContent = !succes.isError ? (\r\n    <div>\r\n      <div>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          <div style={{ display: \"flex\" }}>\r\n            {[\r\n              { header: \"Złożone:\", counter: dataBaseSubmitedHours },\r\n              { header: \"Zakceptowane:\", counter: databaseAcceptedHours },\r\n              { header: \"Odrzucone:\", counter: databaseRejectedHours },\r\n            ].map(({ header, counter }) => {\r\n              return (\r\n                <h6 key={header} style={{ marginLeft: 20, width: \"20vw\" }}>\r\n                  {header} {\"\"}\r\n                  {counter}\r\n                </h6>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\" }}>\r\n            {columns &&\r\n              columns.length > 0 &&\r\n              columns.map((column: any, idx: any) => {\r\n                return <Column column={column} key={column.id} />;\r\n              })}\r\n          </div>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>Błąd</div>\r\n  );\r\n\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      columnsContent = (\r\n        <div style={{ textAlign: \"center\" }}> {error.error} </div>\r\n      );\r\n  }\r\n  // console.log(\"\", databaseMonth);\r\n  return (\r\n    <>\r\n      {databaseMonth === undefined || databaseMonth === null ? (\r\n        <div style={{ textAlign: \"center\" }}>Brak danych, wybierz miesiąc</div>\r\n      ) : (\r\n        <div style={{ display: \"flex\", marginLeft: \"30vw\" }}>\r\n          <div>\r\n            <HeaderMonthPanel /> \r\n             {columnsContent}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","import { useMonthsDataQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data } = useMonthsDataQuery(undefined)\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  // date transformation\r\n  const databaseMonthsDates =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection.map(month => month.month)\r\n      : [];\r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["props","_jsxs","children","day","userName","_jsx","date","hours","_props$day","_useMonthsDataQuery","useMonthsDataQuery","undefined","data","_useUpdateMonthMutati","error","useUpdateMonthMutation","_useUpdateMonthMutati2","_slicedToArray","updateColumns","succes","monthURL","useParams","_useDataBaseValues","useDataBaseValues","databaseColumns","databaseMonth","databaseAllHours","handleUpdate","acceptedHoursSum","rejectedHoursSum","submitedHoursSum","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","id","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","map","column","days","_objectSpread","filter","columns","stop","_x2","apply","arguments","_x","btnContent","style","border","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","onClick","FaTrashAlt","isLoading","isError","_Fragment","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","width","minHeight","height","length","idx","Day","crypto","randomUUID","placeholder","validationSchema","yup","allHours","max","required","success","formik","useFormik","initialValues","onSubmit","_onSubmit","values","resetForm","_useFormHeaderMonhPan","useFormHeaderMonhPanel","AiOutlinePlusCircle","fontSize","Spinner","animation","variant","className","Form","handleSubmit","Group","Label","htmlFor","Control","type","name","min","value","onChange","handleChange","onBlur","handleBlur","size","Text","touched","errors","Button","dataCurrentHours","monthToDateFormat","Date","Intl","DateTimeFormat","year","month","timeZone","format","Container","Row","Col","sm","FormHeaderMonhPanel","databaseAcceptedHours","databaseRejectedHours","dataBaseSubmitedHours","_useState","useState","_useState2","setColumns","useEffect","currentHours","submitedHours","acceptedHours","rejectedHours","columnsContent","DragDropContext","onDragEnd","results","handleDragDrop","display","header","counter","marginLeft","Column","textAlign","HeaderMonthPanel","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","item","databaseMonthsCollection","addDaysToColumns","find","reduce","sum","databaseMonthsDates","string","monthDate","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
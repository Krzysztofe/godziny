{"version":3,"file":"static/js/237.b2a19263.chunk.js","mappings":"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","sources":["pages/monthPanel/DayPrintData.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerColumns.tsx/HeaderColumns.tsx","pages/monthPanel/colmns/Columns.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/validationFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/useFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/FormHeaderMonhPanel.tsx","pages/monthPanel/headerMonthPanel/HeaderMonthPanel.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  const { monthURL } = useParams();\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    })\r\n      .format(monthToDateFormat)\r\n      .slice(0, -5);\r\n\r\n  const date = props.day.date.slice(5);\r\n  const dateToPrint = date[0] === \"0\" ? date.slice(1) : date;\r\n\r\n  // console.log(\"\", monthToString);\r\n\r\n  return (\r\n    <div className=\"px-1 py-2 py-sm-1\">\r\n      <div\r\n        className=\"d-flex justify-content-between\"\r\n        style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n      >\r\n        <div>{props.day.userName}</div>\r\n        <div>\r\n          {props.day.hours} <FiClock className=\"text-primary\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div>{date}</div>\r\n        <div>\r\n          {props.day.place === \"Poza\" ? (\r\n            <TbArrowBigRightLineFilled className=\"text-success\" />\r\n          ) : (\r\n            <MdFactory className=\"text-danger\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useMonthsDataQuery,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\nimport useDataBaseValues from \"./useDataBaseValues\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  // const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useMonthsDataQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    databaseMonth,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id.toString()}\r\n      index={props.index}\r\n    >\r\n      {provided => {\r\n        return (\r\n          <div\r\n            className=\"bg-white card mb-2\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <DayPrintData day={props.day} />\r\n            <Button\r\n              variant=\"info\"\r\n              size=\"sm\"\r\n              className=\"rounded-top-0 w-100 fw-medium \"\r\n              onClick={() => handleUpdate(props.day.id)}\r\n            >\r\n              Usuń\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div className=\"w-100\">\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 bg-primary-subtle\"\r\n              style={{\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import { useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\n\r\nconst HeaderColumns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  // useEffect(() => {\r\n  //   const handleResize = () => {\r\n  //     setWindowWidth(window.innerWidth);\r\n  //   };\r\n\r\n  //   window.addEventListener(\"resize\", handleResize);\r\n\r\n  //   return () => {\r\n  //     window.removeEventListener(\"resize\", handleResize);\r\n  //   };\r\n  // }, []);\r\n\r\n  // const displayHeaderContent = windowWidth > 576;\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: dataBaseSubmitedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: databaseAcceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: databaseRejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <div\r\n            key={headerText}\r\n            className=\"p-1 bg-primary-subtle text-dark-emphasis fw-medium w-100 \"\r\n            style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderColumns;\r\n","import { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { handleDragDrop } from \"../utils\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSlice\";\r\nimport Column from \"../Column\";\r\nimport HeaderColumns from \"../headerColumns.tsx/HeaderColumns\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Columns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    data,\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    dataCurrentHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  // console.log(\"\", databaseMonth);\r\n\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n  \r\n  useEffect(() => {\r\n    data && databaseMonth && setColumns(databaseColumns);\r\n  }, [data, monthURL]);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      columns?.length > 1 &&\r\n      databaseMonth?.month &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [columns, databaseAllHours, dataCurrentHours]);\r\n\r\n  return (\r\n    <>\r\n      <main className=\" mb-2 overflow-y-scroll \">\r\n        <Container className=\"mx-0 ms-sm-auto sticky-top d-flex column-gap-2\">\r\n          <HeaderColumns />\r\n        </Container>\r\n        <Container\r\n          className=\"mx-0 ms-sm-auto mb-5 d-flex column-gap-2\"\r\n          style={{ height: \"fit-content\" }}\r\n        >\r\n          <DragDropContext\r\n            onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n          >\r\n            {columns &&\r\n              columns.length > 0 &&\r\n              columns.map((column: any) => {\r\n                return <Column column={column} key={column.id} />;\r\n              })}\r\n          </DragDropContext>\r\n        </Container>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Columns;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUpdateMonthMutation } from \"../../../../services/apiSlice\";\r\nimport useDataBaseValues from \"../../useDataBaseValues\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { validationSchema } from \"./validationFormHeaderMonthPanel\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useFormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n  const { databaseMonth, data } = useDataBaseValues(monthURL);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values) => {\r\n      await updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          allHours: values.allHours,\r\n        },\r\n      });\r\n      //  resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useFormHeaderMonhPanel;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useFormHeaderMonhPanel from \"./useFormHeaderMonthPanel\";\r\nimport React, { useState } from \"react\";\r\nimport \"./_formHeaderMonthPAnel.scss\";\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n  const { formik, success } = useFormHeaderMonhPanel();\r\n\r\n  let btnContent = (\r\n    <div className={formik.values.allHours === 0 ? \"text-danger\" : \"\"}>\r\n      Zapisz liczbę godzin\r\n    </div>\r\n  );\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group className=\"my-1\">\r\n          <div className=\"text-center fw-medium\">{formik.values.allHours}</div>\r\n          <div className=\"d-flex align-items-center w-100\">\r\n            <div className=\"fw-medium\">0</div>\r\n            <Form.Range\r\n              name=\"allHours\"\r\n              min={0}\r\n              max={320}\r\n              value={formik.values.allHours}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              className=\"form-range custom-range mx-2 medium\"\r\n              style={{\r\n                height: 10,\r\n                background: `linear-gradient(to right, olive 0%, red ${formik.values.allHours}%, transparent ${formik.values.allHours}%, transparent 100%)`,\r\n              }}\r\n            />\r\n            <div className=\"fw-medium\">320</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"info\"\r\n              size=\"sm\"\r\n              className=\"fw-medium mx-auto\"\r\n            >\r\n              {btnContent}\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useParams } from \"react-router-dom\";\r\n// import useDataBaseValues from \"../hooksMonthPanel/useDataBaseValues\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\n\r\nconst HeaderMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseAllHours, dataCurrentHours } = useDataBaseValues(monthURL);\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n\r\n  return (\r\n    <header className=\"me-3\">\r\n      <Container className=\"mx-0 ms-sm-auto\">\r\n        <FormHeaderMonhPanel />\r\n        <div className=\"d-flex justify-content-center mb-1 fw-medium\">\r\n          <div className=\"text-end\" style={{ width: \"25%\" }}>\r\n            Wszystkie\r\n          </div>\r\n          <div className=\"text-center mx-2\" style={{}}>\r\n            {databaseAllHours} - {dataCurrentHours}\r\n          </div>\r\n          <div style={{ width: \"25%\" }}>Wolne</div>\r\n        </div>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMonthPanel;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Columns from \"../colmns/Columns\";\r\nimport HeaderMonthPanel from \"../headerMonthPanel/HeaderMonthPanel\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const { databaseMonth, data, isLoading } = useDataBaseValues(monthURL);\r\n\r\n  let panelContent;\r\n\r\n  if (isLoading) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Spinner animation=\"border\" variant=\"secondary\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      </main>\r\n    );\r\n  } else if (!data) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h3>\r\n          Brak miesięcy zapisanych w bazie danych.\r\n          <br /> Zapisz miesiąc w formularzu\r\n        </h3>\r\n      </main>\r\n    );\r\n  } else if (!databaseMonth) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h3>Brak danych z miesiąca...</h3>\r\n      </main>\r\n    );\r\n  } else {\r\n    panelContent = (\r\n      <main className=\"d-flex flex-column\" style={{ height: \"100vh\" }}>\r\n        <HeaderMonthPanel />\r\n        <Columns />\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return <>{panelContent}</>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","import { useMonthsDataQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  error?: {};\r\n  isLoading: boolean;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data, error, isLoading } = useMonthsDataQuery(undefined)\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  // date transformation\r\n  const databaseMonthsDates =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection.map(month => month.month)\r\n      : [];\r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    error,\r\n    isLoading,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["props","monthURL","useParams","monthToDateFormat","Date","date","Intl","DateTimeFormat","year","month","timeZone","format","slice","day","_jsxs","className","children","style","fontSize","_jsx","userName","hours","FiClock","place","TbArrowBigRightLineFilled","MdFactory","_props$day","_useMonthsDataQuery","useMonthsDataQuery","undefined","data","_useUpdateMonthMutati","error","useUpdateMonthMutation","_useUpdateMonthMutati2","_slicedToArray","updateColumns","succes","_useDataBaseValues","useDataBaseValues","databaseColumns","databaseMonth","databaseAllHours","handleUpdate","acceptedHoursSum","rejectedHoursSum","submitedHoursSum","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","id","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","map","column","days","_objectSpread","filter","columns","stop","_x2","apply","arguments","_x","btnContent","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","Button","variant","size","onClick","isLoading","isError","_Fragment","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","height","length","idx","Day","crypto","randomUUID","placeholder","databaseAcceptedHours","databaseRejectedHours","dataBaseSubmitedHours","headerText","counter","dataCurrentHours","_useState","useState","_useState2","setColumns","useEffect","currentHours","submitedHours","acceptedHours","rejectedHours","Container","HeaderColumns","DragDropContext","onDragEnd","results","handleDragDrop","Column","validationSchema","yup","allHours","max","required","success","formik","useFormik","initialValues","onSubmit","_onSubmit","values","_useFormHeaderMonhPan","useFormHeaderMonhPanel","Spinner","animation","Form","handleSubmit","Group","Range","name","min","value","onChange","handleChange","onBlur","handleBlur","background","concat","type","FormHeaderMonhPanel","width","panelContent","HeaderMonthPanel","Columns","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","item","databaseMonthsCollection","addDaysToColumns","find","reduce","sum","databaseMonthsDates","string","monthDate","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
{"version":3,"file":"static/js/456.d892112e.chunk.js","mappings":"uOA0BA,EAtBqB,WACnB,IAAMA,GAAWC,EAAAA,EAAAA,MAOjB,OACEC,EAAAA,EAAAA,KAAA,OACEC,QAPW,WACbC,EAAAA,EAAKC,UACLL,EAAS,IACX,EAKIM,UAAU,+BACVC,MAAO,CACLC,OAAQ,UACRC,SAAU,UACVC,SACH,WAIL,E,gFCxBaC,EAAgB,CAC3BC,GAAIC,OAAOC,aACXC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,I,UCHIC,EAAmBC,EAAAA,GAAW,CACzCH,SAAUG,EAAAA,KAEPC,KAAK,gBAAiB,sBAAiB,SAAAC,GAAK,MAAc,cAAVA,CAAgB,IAChEC,SAAS,sBACZR,KAAMK,EAAAA,KAAaG,SAAS,iBAC5BP,MAAOI,EAAAA,KAEJC,KACC,iBACA,0BACA,SAAAC,GAAK,MAAc,kBAAVA,CAAyB,IAEnCC,SAAS,0BAEZL,MAAOE,EAAAA,KAEJC,KACC,iBACA,wBACA,SAAAC,GAAK,MAAc,gBAAVA,CAAuB,IAEjCC,SAAS,0B,SCmCd,EA7CmB,WACjB,IAAAC,GAAiCC,EAAAA,EAAAA,MAAwBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlDI,EAAaF,EAAA,GAAEG,EAAOH,EAAA,GACvBI,GAAWC,EAAAA,EAAAA,MAAcC,SAASC,MAAM,KACxCC,EAAmBJ,EAASA,EAASK,OAAS,GAGpDC,IAFqBC,EAAAA,EAAAA,MAAbC,UAGNC,EAAAA,EAAAA,GAAkBL,IADZM,EAAeJ,EAAfI,gBAAiBC,EAAaL,EAAbK,cAAeC,EAAIN,EAAJM,KAAMC,EAAgBP,EAAhBO,iBAGxCC,GAASC,EAAAA,EAAAA,IAAsB,CACnClC,cAAeA,EACfQ,iBAAkBA,EAElB2B,SAAS,WAAD,IAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAMC,GAAM,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC4B,GAAhDd,EAAOe,cAAc,KAAM9C,OAAOC,gBAC9B6B,GAAoBC,EAAOQ,OAAOpC,MAAQ,GAAC,CAAAwC,EAAAE,KAAA,eAAAF,EAAAI,OAAA,iBAe3C,OAbEN,EACJZ,GAAQD,IAAgC,OAAfD,QAAe,IAAfA,OAAe,EAAfA,EAAiBL,QAAS,GAAC0B,EAAAA,EAAAA,GAC5CrB,GACJ,IAEmB,GAAKE,GAC5BD,IACe,OAAfD,QAAe,IAAfA,OAAe,EAAfA,EAAiBL,QAAS,IAAC2B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACP,OAAftB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,IAAE,IACvBuB,KAAK,GAADC,QAAAH,EAAAA,EAAAA,GACgB,OAAfrB,QAAe,IAAfA,GAAoB,QAALa,EAAfb,EAAkB,UAAE,IAAAa,OAAL,EAAfA,EAAsBU,MACtB,EAAAD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAMV,GAAM,IAAEpC,OAAQoC,EAAOpC,YAElCwC,EAAAE,KAAA,EAEE9B,EAAc,CAClBhB,GAAI8B,GAAQD,EAAc7B,GAC1BqD,SAAOH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFrB,GAAa,IAChBwB,QAASX,MAEV,KAAD,mBAAAE,EAAAU,OAAA,GAAAf,EAAA,KACH,gBAAAgB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,EA1BQ,KA6BX,MAAO,CAAEzB,OAAAA,EAAQf,QAAAA,EACnB,E,UCgIA,EAhLgB,WACd,IAAAyC,EAA4BC,IAApB3B,EAAM0B,EAAN1B,OAAQf,EAAOyC,EAAPzC,QACVC,GAAWC,EAAAA,EAAAA,MAAcC,SAASC,MAAM,KACxCuC,EAAqB1C,EAASA,EAASK,OAAS,GAEtDC,GACEG,EAAAA,EAAAA,GAAkBiC,GADZ7B,EAAgBP,EAAhBO,iBAAkB8B,EAAgBrC,EAAhBqC,iBAAkBhC,EAAaL,EAAbK,cAGxCiC,GAAaxE,EAAAA,EAAAA,KAAA,QAAAQ,SAAM,sBAcvB,OAZImB,EAAQ8C,YACVD,GACExE,EAAAA,EAAAA,KAAC0E,EAAAA,EAAO,CAACC,UAAU,SAASC,KAAK,KAAKC,QAAQ,YAAWrE,UACvDR,EAAAA,EAAAA,KAAA,QAAMI,UAAU,kBAAiBI,SAAC,kBAKpCmB,EAAQmD,UACVN,GAAaxE,EAAAA,EAAAA,KAAA,QAAAQ,SAAM,yBAInBuE,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHpC,SAAUF,EAAOuC,aACjB7E,UAAS,QAAA0D,OAAWvB,EAA2B,GAAX,SAAa,KAAAuB,OAC/CvB,GAAsC,IAArBgC,EAAyB,gBAAkB,IAC3D/D,SAAA,EAIHuE,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAAA1E,SAAA,EACTR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKG,MAAK,CAACC,QAAQ,WAAWhF,UAAU,YAAWI,SAAC,qBAIrDuE,EAAAA,EAAAA,MAACC,EAAAA,EAAKK,OAAM,CACV3E,GAAG,WACH4E,KAAK,WACLC,SAAU7C,EAAO8C,aACjBC,OAAQ/C,EAAOgD,WACfd,KAAK,KACLxE,UAAU,iCACVC,MAAO,CACLC,OAAQ,WACRE,SAAA,EAEFR,EAAAA,EAAAA,KAAA,UAAAQ,SAAQ,cACP,CAAC,MAAO,QAAS,WAAWmF,KAAI,SAAAL,GAC/B,OACEtF,EAAAA,EAAAA,KAAA,UAAmBoB,MAAOkE,EAAK9E,SAC5B8E,GADUA,EAIjB,QAGFtF,EAAAA,EAAAA,KAAA,OACEI,UAAU,gCACVC,MAAO,CAAEuF,OAAQ,UAAWpF,SAE3BkC,EAAOmD,QAAQ9E,UACd2B,EAAOoD,OAAO/E,UACd2B,EAAOoD,OAAO/E,eAMpBgE,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAAA1E,SAAA,EACTR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKG,MAAK,CAACC,QAAQ,OAAOhF,UAAU,YAAWI,SAAC,sBAGjDR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKe,QAAO,CACXrF,GAAG,OACHsF,KAAK,OACLV,KAAK,OACLlE,MAAOsB,EAAOQ,OAAOrC,KACrB0E,SAAU7C,EAAO8C,aACjBC,OAAQ/C,EAAOgD,WACfO,IAAKC,EAAAA,GACLC,YAAY,SACZvB,KAAK,KACLxE,UAAU,iCACVC,MAAO,CAAE+F,UAAW,EAAG9F,OAAQ,cAEjCN,EAAAA,EAAAA,KAAA,OACEI,UAAU,gCACVC,MAAO,CAAEuF,OAAQ,UAAWpF,SAE3BkC,EAAOmD,QAAQhF,MAAQ6B,EAAOoD,OAAOjF,MAAQ6B,EAAOoD,OAAOjF,WAMhEkE,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAAA1E,SAAA,EACTR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKG,MAAK,CAACC,QAAQ,QAAQhF,UAAU,YAAWI,SAAC,8BAGlDuE,EAAAA,EAAAA,MAACC,EAAAA,EAAKK,OAAM,CACV3E,GAAG,QACH4E,KAAK,QACLC,SAAU7C,EAAO8C,aACjBC,OAAQ/C,EAAOgD,WACfd,KAAK,KACLxE,UAAU,iCACVC,MAAO,CAAEC,OAAQ,WAAYE,SAAA,EAE7BR,EAAAA,EAAAA,KAAA,UAAAQ,SAAQ,mBACP,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAImF,KAAI,SAAAU,GACnC,OACErG,EAAAA,EAAAA,KAAA,UAAmBoB,OAAQiF,EAAK7F,SAC7B6F,GADUA,EAIjB,QAGFrG,EAAAA,EAAAA,KAAA,OACEI,UAAU,gCACVC,MAAO,CAAEuF,OAAQ,UAAWpF,SAE3BkC,EAAOmD,QAAQ/E,OAAS4B,EAAOoD,OAAOhF,OAAS4B,EAAOoD,OAAOhF,YAMlEiE,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAAA1E,SAAA,EACTR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKG,MAAK,CAACC,QAAQ,QAAQhF,UAAU,YAAWI,SAAC,4BAGlDuE,EAAAA,EAAAA,MAACC,EAAAA,EAAKK,OAAM,CACV3E,GAAG,QACH4E,KAAK,QACLC,SAAU7C,EAAO8C,aACjBC,OAAQ/C,EAAOgD,WACfd,KAAK,KACLxE,UAAU,iCACVC,MAAO,CAAEC,OAAQ,WAAYE,SAAA,EAE7BR,EAAAA,EAAAA,KAAA,UAAAQ,SAAQ,iBACRR,EAAAA,EAAAA,KAAA,UAAQoB,MAAM,gBAAUZ,SAAC,mBACzBR,EAAAA,EAAAA,KAAA,UAAQoB,MAAM,OAAMZ,SAAC,aAGvBR,EAAAA,EAAAA,KAAA,OACEI,UAAU,gCACVC,MAAO,CAAEuF,OAAQ,UAAWpF,SAE3BkC,EAAOmD,QAAQ7E,OAAS0B,EAAOoD,OAAO9E,OAAS0B,EAAOoD,OAAO9E,YAIlEhB,EAAAA,EAAAA,KAACsG,EAAAA,EAAM,CACLzB,QAAQ,OACRmB,KAAK,SACLO,SAAU5E,EAAQ8C,UAClBrE,UAAU,wBAAuBI,SAEhCgE,KAGHxE,EAAAA,EAAAA,KAAA,OACEI,UAAU,gCACVC,MAAO,CAAEuF,OAAQ,UAAWpF,SAE3BiC,GAAoBC,EAAOQ,OAAOpC,MAAQ,EACvC,sBACA,OAIZ,ECvJa0F,EAAe,CAC1B9F,GAAI,GACJ+F,UAAW,GACXC,SAAU,EACVC,aAAc,EACdC,cAAe,EACfC,cAAe,EACfC,cAAe,EACf/C,QA1B6B,CAC7B,CACErD,GAAI,UACJqG,WAAY,eACZlD,KAAM,IAER,CACEnD,GAAI,kBACJqG,WAAY,kBACZlD,KAAM,IAER,CACEnD,GAAI,eACJqG,WAAY,eACZlD,KAAM,MCeV,EA5B8B,WAC5B,IAAM/D,GAAWC,EAAAA,EAAAA,MACjBiH,GAA4BC,EAAAA,EAAAA,MAAqBC,GAAAzF,EAAAA,EAAAA,GAAAuF,EAAA,GAA1CG,EAAQD,EAAA,GAAEvF,EAAOuF,EAAA,GAEgCE,GAAnB/E,EAAAA,EAAAA,KAA7BgF,oBAAAA,OAAmB,IAAAD,EAAG,GAAEA,EAE1B1E,GAASC,EAAAA,EAAAA,IAA2B,CACxClC,cAAe,CAAEgG,UAAU,GAAD3C,OAAKwD,EAAAA,GAAc,KAAAxD,OAAIyD,EAAAA,KACjDtG,iBAAkBC,EAAAA,GAAW,CAC3BuF,UAAWvF,EAAAA,KAERC,KACC,iBACA,kCACA,SAAAC,GAAK,YAAcoG,IAAVpG,KAA2C,OAAnBiG,QAAmB,IAAnBA,GAAAA,EAAqBI,SAASrG,GAAM,MAI3EwB,SAAS,WAAD,IAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAMC,GAAM,IAAAwE,EAAA,OAAA3E,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC8C,OAA5DkE,GAAW9D,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ4C,GAAY,IAAEC,UAAWvD,EAAOuD,YAASnD,EAAAE,KAAA,EAC5D2D,EAASO,GAAa,KAAD,EAC3B5H,EAAS,YAADgE,OAAaZ,EAAOuD,YAAa,wBAAAnD,EAAAU,OAAA,GAAAf,EAAA,KAC1C,gBAAAgB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,EAJQ,KAOX,MAAO,CAAEzB,OAAAA,EAAQf,QAAAA,EACnB,E,UCbA,EAxBmC,WACjC,IAAAgG,EAA4BC,IAApBlF,EAAMiF,EAANjF,OAAQf,EAAOgG,EAAPhG,QAoBhB,MAAO,CAAEe,OAAAA,EAAQf,QAAAA,EAAS6C,WAhBtB7C,EAAQ8C,WAERzE,EAAAA,EAAAA,KAAC0E,EAAAA,EAAO,CACNC,UAAU,SACVE,QAAQ,UACRxE,MAAO,CAAEuF,OAAQ,SAAUiC,MAAO,UAAWrH,UAE7CR,EAAAA,EAAAA,KAAA,QAAMI,UAAU,kBAAiBI,SAAC,iBAG7BmB,EAAQmD,SACJ9E,EAAAA,EAAAA,KAAA,QAAMI,UAAU,cAAaI,SAAC,sBAE9BR,EAAAA,EAAAA,KAAC8H,EAAAA,IAAmB,CAACzH,MAAO,CAAEE,SAAU,YAIzD,EC2BA,EA/CyB,WAEvB,IAAAwH,EAAwCC,IAAhCtF,EAAMqF,EAANrF,OAAQf,EAAOoG,EAAPpG,QAAS6C,EAAUuD,EAAVvD,WAEzB,OACExE,EAAAA,EAAAA,KAAAiI,EAAAA,SAAA,CAAAzH,UACEuE,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CAACpC,SAAUF,EAAOuC,aAAc7E,UAAU,OAAMI,SAAA,EACnDuE,EAAAA,EAAAA,MAACC,EAAAA,EAAKE,MAAK,CAAA1E,SAAA,EACTR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKG,MAAK,CAACC,QAAQ,YAAYhF,UAAU,YAAWI,SAAC,wBAGtDuE,EAAAA,EAAAA,MAAA,OAAK3E,UAAU,SAAQI,SAAA,EACrBR,EAAAA,EAAAA,KAACgF,EAAAA,EAAKe,QAAO,CACXrF,GAAG,YACHsF,KAAK,QACLV,KAAK,YACLW,IAAG,GAAAnC,OAAOwD,EAAAA,GAAc,KAAAxD,OAAIyD,EAAAA,IAC5BW,IAAI,UACJ9G,MAAOsB,EAAOQ,OAAOuD,UACrBlB,SAAU7C,EAAO8C,aACjBC,OAAQ/C,EAAOgD,WACfd,KAAK,KACLxE,UAAU,yCACVC,MAAO,CAAE+F,UAAW,EAAGR,OAAQ,cAAetF,OAAQ,cAExDN,EAAAA,EAAAA,KAACsG,EAAAA,EAAM,CACLN,KAAK,SACLO,SAAU5E,EAAQ8C,UAClBrE,UAAU,kIAAiII,SAE1IgE,WAIPxE,EAAAA,EAAAA,KAACgF,EAAAA,EAAKmD,KAAI,CACR/H,UAAU,gCACVC,MAAO,CAAEE,SAAU,SAAUqF,OAAQ,UAAWpF,SAE/CkC,EAAOmD,QAAQY,WACd/D,EAAOoD,OAAOW,WACd/D,EAAOoD,OAAOW,gBAK1B,E,4BCHA,EA1C0B,WACxB,IAAM2B,GAAWvG,EAAAA,EAAAA,MACTW,GAAS6F,EAAAA,EAAAA,SAAmBb,GAA5BhF,KACRN,GACEG,EAAAA,EAAAA,KADMiG,EAAyBpG,EAAzBoG,0BAA2BC,EAA2BrG,EAA3BqG,4BAG7BnG,EAAWgG,EAAStG,SAASC,MAAM,KAAKyG,OAAO,GAAG,GAClDC,EAAuB,IAAIC,KAAKtG,GAEhCuG,EACJvG,GACA,IAAIwG,KAAKC,eAAe,QAAS,CAC/BC,KAAM,UACNC,MAAO,OACPC,SAAU,QACTC,OAAOR,GAEZ,OACEzI,EAAAA,EAAAA,KAACkJ,EAAAA,EAAS,CAAC9I,UAAU,oDAAmDI,SACpEgC,EAGA+F,EAA4B5C,KAAI,SAACoD,EAAYI,GAC3C,OACEnJ,EAAAA,EAAAA,KAACkJ,EAAAA,EAAUE,KAAI,CAAaC,QAAM,EAACjJ,UAAU,oBAAmBI,UAC9DR,EAAAA,EAAAA,KAACsJ,EAAAA,GAAI,CACHC,GAAE,YAAAzF,OAAcwE,EAA0Ba,IAE1C/I,UAAS,GAAA0D,OACP6E,IAAyBI,EAAQ,aAAe,eAAc,yCACxBvI,SAEvCuI,GALIA,IAHYA,EAYzB,KAhBA/I,EAAAA,EAAAA,KAAA,KAAGI,UAAU,qCAAoCI,SAAC,iBAoB1D,E,UCVA,EA9B6B,WAC3B,IAAAgJ,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAjI,EAAAA,EAAAA,GAAA+H,EAAA,GAAhCG,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAEpB,OACE3E,EAAAA,EAAAA,MAAAkD,EAAAA,SAAA,CAAAzH,SAAA,EACEuE,EAAAA,EAAAA,MAACuB,EAAAA,EAAM,CACLrG,QAAS,kBAAM2J,GAASD,EAAK,EAC7B,gBAAc,wBACd,gBAAeA,EACf9E,QAAQ,OACRzE,UAAU,2BAA0BI,SAAA,CACrC,wBAECR,EAAAA,EAAAA,KAAC6J,EAAAA,IAA0B,CACzBzJ,UAAU,iBACVC,MAAO,CACLyJ,UAAU,GAADhG,OAAK6F,EAAO,iBAAmB,GAAE,KAC1CI,mBAAoB,eAI1B/J,EAAAA,EAAAA,KAACgK,EAAAA,EAAQ,CAACC,GAAIN,EAAKnJ,UACjBR,EAAAA,EAAAA,KAAA,OAAAQ,UACER,EAAAA,EAAAA,KAACkK,EAAiB,UAK5B,ECuBA,EA/CqB,WACnB,IAAMC,GAAiBtI,EAAAA,EAAAA,MAAcC,SAErC0H,GAAwBC,EAAAA,EAAAA,WAAS,GAAMC,GAAAjI,EAAAA,EAAAA,GAAA+H,EAAA,GAAhCY,EAAIV,EAAA,GAAEW,EAAOX,EAAA,GAKpB,OACE1J,EAAAA,EAAAA,KAAAiI,EAAAA,SAAA,CAAAzH,SACI,CAAC,KAAKiH,SAAS0C,GAgCb,MA/BFpF,EAAAA,EAAAA,MAAAkD,EAAAA,SAAA,CAAAzH,SAAA,EACER,EAAAA,EAAAA,KAACsG,EAAAA,EAAM,CACLzB,QAAQ,YACR5E,QARS,WAAH,OAASoK,GAAQ,SAAAC,GAAC,OAAKA,CAAC,GAAE,EAShClK,UAAU,yBACVC,MAAO,CAAEkK,SAAU,WAAYC,MAAO,GAAIhK,UAE1CR,EAAAA,EAAAA,KAACyK,EAAAA,IAAe,CAACrK,UAAU,YAG7B2E,EAAAA,EAAAA,MAAC2F,EAAAA,EAAS,CACRN,KAAMA,EACNO,OAlBU,WAAH,OAASN,GAAQ,EAAO,EAmB/B/E,KAAK,mBACLsF,QAAQ,EACRC,UAAU,EACVzK,UAAU,yBACVC,MAAO,CAAEwH,MAAO,KAAMrH,SAAA,EAEtBR,EAAAA,EAAAA,KAAC0K,EAAAA,EAAUI,OAAM,CAAC1K,UAAU,OAAMI,UAChCR,EAAAA,EAAAA,KAAC0K,EAAAA,EAAUK,MAAK,CAAAvK,UACdR,EAAAA,EAAAA,KAACgL,EAAY,SAGjBjG,EAAAA,EAAAA,MAAC2F,EAAAA,EAAUO,KAAI,CAAC7K,UAAU,OAAMI,SAAA,EAC9BR,EAAAA,EAAAA,KAACkL,EAAgB,KACjBlL,EAAAA,EAAAA,KAACmL,EAAoB,KACrBnL,EAAAA,EAAAA,KAACoL,EAAO,cAOtB,C,gICvDA,IAAMC,EAAQ,IAAI3C,KAELpB,EAAiB,IAAIsB,KAAKC,eAAe,KAAM,CAC1DC,KAAM,YACLG,OAAOoC,GAEG9D,EAAkB,IAAIqB,KAAKC,eAAe,KAAM,CAC3DE,MAAO,YACNE,OAAOoC,GAEGnF,EAAiBmF,EAAMC,cAAcvJ,MAAM,KAAK,GAEhDwJ,EAAwB,IAAI3C,KAAKC,eAAe,QAAS,CACpEC,KAAM,UACNC,MAAO,OACPC,SAAU,QACTC,OAAOoC,E,+ECFJG,GAAMC,EAAAA,EAAAA,IAVW,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAKI7L,GAAO8L,EAAAA,EAAAA,IAAQR,E,wDCqH5B,IA5G0B,WAA2C,IAADrI,EAAA8I,EAAAC,EAAzC9J,EAAa+B,UAAAlC,OAAA,QAAAuF,IAAArD,UAAA,GAAAA,UAAA,GAAG,KACzCgI,GAAmC9D,EAAAA,EAAAA,SAAmBb,GAA9ChF,EAAI2J,EAAJ3J,KAAM4J,EAAKD,EAALC,MAAO3H,EAAS0H,EAAT1H,UAEf4H,EAAmB7J,GAAQ8J,OAAOC,KAAK/J,GAEvCgK,EACJH,GACAC,OAAOpJ,OAAOV,GACXiK,OACA9G,KAAI,SAACU,EAAW8C,GACf,OAAAvF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYyC,GAAI,IAAE3F,GAAI2L,EAAiBlD,IACzC,IAEEuD,GAA2BC,EAAAA,EAAAA,IAAiBH,GAE5CjK,EACJC,GAAQkK,EAAyBzK,OAAS,EACd,OAAxByK,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0BE,MACxB,SAAC7D,GAAU,OAAKA,EAAMtC,YAAcrE,CAAQ,SAE9CoF,EAEAlF,EAAkBE,IAAqB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAewB,SAIzCQ,EAAmB/B,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAemE,SAAW,GACpDjE,EAAmBD,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeoE,aAAe,GACxDkG,EAAwBrK,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeqE,cAAgB,GAC9DkG,EAAwBtK,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAesE,cAAgB,GAC9DkG,EAAwBvK,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeuE,cAAgB,GAI9DkG,EACJxK,GAAQkK,EAAyBzK,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,GAAoB,QAALa,EAAfb,EAAkB,UAAE,IAAAa,OAAL,EAAfA,EAAsBU,KAAKoJ,QAAO,SAACC,EAAUC,GAC3C,OAAOD,GAAS,OAAHC,QAAG,IAAHA,OAAG,EAAHA,EAAKrM,MACpB,GAAG,GACH,EAEAsM,EACJ5K,GAAQkK,EAAyBzK,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,GAAoB,QAAL2J,EAAf3J,EAAkB,UAAE,IAAA2J,OAAL,EAAfA,EAAsBpI,KAAKoJ,QAAO,SAACC,EAAUC,GAC3C,OAAOD,GAAS,OAAHC,QAAG,IAAHA,OAAG,EAAHA,EAAKrM,MACpB,GAAG,GACH,EAGAuM,EACJ7K,GAAQkK,EAAyBzK,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,GAAoB,QAAL4J,EAAf5J,EAAkB,UAAE,IAAA4J,OAAL,EAAfA,EAAsBrI,KAAKoJ,QAAO,SAACC,EAAUC,GAC3C,OAAOD,GAAS,OAAHC,QAAG,IAAHA,OAAG,EAAHA,EAAKrM,MACpB,GAAG,GACH,EAGAuG,EACJ7E,GAAQkK,EACJA,EAAyB/G,KAAI,SAAAoD,GAAK,OAAIA,EAAMtC,SAAS,IACrD,GAEA6B,EAA4B9F,EAC9B6E,EAAoBiG,MAAK,SAACC,EAAYC,GACpC,OAAID,EAAQC,GACF,EACCD,EAAQC,EACV,EAEA,CAEX,IACA,GAGEjF,EAA8BD,EAA0B3C,KAC5D,SAACc,GACC,IAAMgH,EAAoB,IAAI/E,KAAKjC,GACnC,OAAO,IAAImC,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNC,MAAO,OACPC,SAAU,QACTC,OAAOwE,EACZ,IAGF,MAAO,CACLjL,KAAAA,EACA4J,MAAAA,EACA3H,UAAAA,EACA4H,iBAAAA,EACAK,yBAAAA,EACAnK,cAAAA,EACAD,gBAAAA,EACAiC,iBAAAA,EACA9B,iBAAAA,EACAqK,sBAAAA,EACAC,sBAAAA,EACAF,sBAAAA,EACAO,iBAAAA,EACAC,iBAAAA,EACAL,iBAAAA,EACA3F,oBAAAA,EACAiB,0BAAAA,EACAC,4BAAAA,EAEJ,C,kHC5FaoE,EAAmB,SAACe,GAC/B,OAAKC,MAAMC,QAAQF,GAIT,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAK/H,KAAI,SAACkI,GAAc,IAADC,EAKNC,EAAtB,OAJ2B,OAAHF,QAAG,IAAHA,GAAY,QAATC,EAAHD,EAAK9J,eAAO,IAAA+J,OAAT,EAAHA,EAAcE,OAAM,SAACC,GAAW,OACtDA,EAAOC,eAAe,OAAO,KAaxBL,GATLjK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKiK,GAAG,IACN9J,QAAY,OAAH8J,QAAG,IAAHA,GAAY,QAATE,EAAHF,EAAK9J,eAAO,IAAAgK,OAAT,EAAHA,EAAcpI,KAAI,SAACsI,GAAW,OAAArK,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClCqK,GAAM,IACTpK,KAAMoK,EAAOpK,MAAQ,IAAE,KAM/B,IAnBS,EAoBX,EAwBasK,EAAiB,SAACC,EAAcrK,EAAcsK,GACzD,IAAQC,EAAwBF,EAAxBE,OAAQC,EAAgBH,EAAhBG,YAEhB,GAAKA,IAEHD,EAAOE,cAAgBD,EAAYE,aACnCH,EAAOI,QAAUH,EAAYG,OAI/B,GAAIJ,EAAOG,cAAgBF,EAAYE,YAAa,CAClD,IAAME,EAAkB5K,EAAQ6K,WAAU,SAACX,GACzC,OAAOA,EAAOvN,KAAO4N,EAAOG,WAC9B,IAEMI,EAAuB9K,EAAQ6K,WAAU,SAACX,GAC9C,OAAOA,EAAOvN,KAAO6N,EAAYE,WACnC,IAEMK,GAAanL,EAAAA,EAAAA,GAAOI,EAAQ4K,GAAiB9K,MAE7CkL,EACJT,EAAOG,cAAgBF,EAAYS,YAAUrL,EAAAA,EAAAA,GACrCI,EAAQ8K,GAAsBhL,MAClCiL,EAENG,EAAqBH,EAAcI,OAAOZ,EAAOI,MAAO,GAAjDS,GAAmD1N,EAAAA,EAAAA,GAAAwN,EAAA,GAAzC,GACjBF,EAAmBG,OAAOX,EAAYG,MAAO,EAAGS,GAEhD,IAAMC,GAAUzL,EAAAA,EAAAA,GAAOI,GAEvBqL,EAAWT,IAAgB/K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBG,EAAQ4K,IAAgB,IAC3B9K,KAAMiL,IAGRM,EAAWP,IAAqBjL,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BG,EAAQ8K,IAAqB,IAChChL,KAAMkL,IAGRV,EAAWe,EACb,KAAO,CACL,IAAMC,EAAgBd,EAAYG,MAE5BC,EAAkB5K,EAAQ6K,WAAU,SAACX,GACzC,OAAOA,EAAOvN,KAAO4N,EAAOG,WAC9B,IAEM5K,GAAIF,EAAAA,EAAAA,GAAOI,EAAQ4K,GAAiB9K,MAC1CyL,EAAqBzL,EAAKqL,OAAOZ,EAAOI,MAAO,GAAxCS,GAA0C1N,EAAAA,EAAAA,GAAA6N,EAAA,GAAhC,GACjBzL,EAAKqL,OAAOG,EAAe,EAAGF,GAE9B,IAAMI,GAAU5L,EAAAA,EAAAA,GAAOI,GAEvBwL,EAAWZ,IAAgB/K,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBG,EAAQ4K,IAAgB,IAC3B9K,KAAMA,IAGRwK,EAAWkB,EACb,CACF,C","sources":["components/sidebar/SidebarTitle.tsx","components/sidebar/dayForm/dataDayForm.tsx","components/sidebar/dayForm/validationDayForm.tsx","components/sidebar/dayForm/useDayForm.tsx","components/sidebar/dayForm/DayForm.tsx","components/sidebar/sidebarMonthForm/dataSidebarMonthForm.tsx","components/sidebar/sidebarMonthForm/useSidebarMonthFormik.tsx","components/sidebar/sidebarMonthForm/useRequestSidebarMonthForm.tsx","components/sidebar/sidebarMonthForm/SidebarMonthForm.tsx","components/sidebar/sidebarMonthList/SidebarMonthsList.tsx","components/sidebar/SidebarMonthCollapse.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","data/firebaseConfig.tsx","hooks/useDatabaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\n\r\nconst SidebarTitle = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const logout = () => {\r\n    auth.signOut();\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div\r\n      onClick={logout}\r\n      className=\"fw-bolder text-info-emphasis\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n        fontSize: \"0.8rem\",\r\n      }}\r\n    >\r\n      Wyloguj\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SidebarTitle;\r\n","export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  date: yup.string().required(\"Data wymagana\"),\r\n  hours: yup\r\n    .mixed()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport { initialValues } from \"./dataDayForm\";\r\nimport { validationSchema } from \"./validationDayForm\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface FormValues {\r\n  date: string;\r\n  hours: number | string;\r\n  userName: string;\r\n  place: string;\r\n}\r\n\r\nconst useDayForm = () => {\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseColumns, databaseMonth, data, dataCurrentHours } =\r\n    useDatabaseValues(lastPartMonthURL);\r\n\r\n  const formik = useFormik<FormValues>({\r\n    initialValues: initialValues,\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async values => {\r\n      formik.setFieldValue(\"id\", crypto.randomUUID());\r\n      if (dataCurrentHours - +formik.values.hours < 0) return;\r\n\r\n      const databaseColumnsAddedDays =\r\n        data && databaseMonth && databaseColumns?.length > 0\r\n          ? [...databaseColumns]\r\n          : [];\r\n\r\n      databaseColumnsAddedDays[0] = data &&\r\n        databaseMonth &&\r\n        databaseColumns?.length > 0 && {\r\n          ...databaseColumns?.[0],\r\n          days: [\r\n            ...databaseColumns?.[0]?.days,\r\n            ...[{ ...values, hours: +values.hours }],\r\n          ],\r\n        };\r\n\r\n      await updateColumns({\r\n        id: data && databaseMonth.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: databaseColumnsAddedDays,\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useDayForm;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport useDayForm from \"./useDayForm\";\r\nimport \"./_dayForm.scss\";\r\nimport { currDateNumber } from \"../../../data/dataCurrentDates\";\r\n\r\nconst DayForm = () => {\r\n  const { formik, success } = useDayForm();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartOfMonthURL = urlParts[urlParts.length - 1];\r\n\r\n  const { dataCurrentHours, databaseAllHours, databaseMonth } =\r\n    useDatabaseValues(lastPartOfMonthURL);\r\n\r\n  let btnContent = <span>Zapisz dzień</span>;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <span> \"Błąd\" </span>;\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={formik.handleSubmit}\r\n      className={`mt-2 ${!databaseMonth ? \"d-none\" : \"\"} ${\r\n        databaseMonth && databaseAllHours === 0 ? \"formContainer\" : \"\"\r\n      }`}\r\n    >\r\n      {/* userName */}\r\n\r\n      <Form.Group>\r\n        <Form.Label htmlFor=\"userName\" className=\"mb-0 fs-7\">\r\n          Podaj imię\r\n        </Form.Label>\r\n\r\n        <Form.Select\r\n          id=\"userName\"\r\n          name=\"userName\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 border border-primary\"\r\n          style={{\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          <option>Imię</option>\r\n          {[\"Jan\", \"Maria\", \"Mariola\"].map(name => {\r\n            return (\r\n              <option key={name} value={name}>\r\n                {name}\r\n              </option>\r\n            );\r\n          })}\r\n        </Form.Select>\r\n\r\n        <div\r\n          className=\"text-danger d-block mt-0 fs-8\"\r\n          style={{ height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.userName &&\r\n            formik.errors.userName &&\r\n            formik.errors.userName}\r\n        </div>\r\n      </Form.Group>\r\n\r\n      {/* date */}\r\n\r\n      <Form.Group>\r\n        <Form.Label htmlFor=\"date\" className=\"mb-0 fs-7\">\r\n          Podaj dzień\r\n        </Form.Label>\r\n        <Form.Control\r\n          id=\"date\"\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={formik.values.date}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          min={currDateNumber}\r\n          placeholder=\"Liczba\"\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 border border-primary\"\r\n          style={{ minHeight: 0, cursor: \"pointer\" }}\r\n        />\r\n        <div\r\n          className=\"text-danger d-block mt-0 fs-8\"\r\n          style={{ height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.date && formik.errors.date && formik.errors.date}\r\n        </div>\r\n      </Form.Group>\r\n\r\n      {/* hours */}\r\n\r\n      <Form.Group>\r\n        <Form.Label htmlFor=\"hours\" className=\"mb-0 fs-7\">\r\n          Podaj liczbę godzin\r\n        </Form.Label>\r\n        <Form.Select\r\n          id=\"hours\"\r\n          name=\"hours\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 border border-primary\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <option>Liczba godzin </option>\r\n          {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(item => {\r\n            return (\r\n              <option key={item} value={+item}>\r\n                {item}\r\n              </option>\r\n            );\r\n          })}\r\n        </Form.Select>\r\n\r\n        <div\r\n          className=\"text-danger d-block mt-0 fs-8\"\r\n          style={{ height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.hours && formik.errors.hours && formik.errors.hours}\r\n        </div>\r\n      </Form.Group>\r\n\r\n      {/* localization */}\r\n\r\n      <Form.Group>\r\n        <Form.Label htmlFor=\"place\" className=\"mb-0 fs-7\">\r\n          Podaj lokalizację\r\n        </Form.Label>\r\n        <Form.Select\r\n          id=\"place\"\r\n          name=\"place\"\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 border border-primary\"\r\n          style={{ cursor: \"pointer\" }}\r\n        >\r\n          <option>Lokalizacja</option>\r\n          <option value=\"Wewnątrz\">Wewnątrz</option>\r\n          <option value=\"Poza\">Poza</option>\r\n        </Form.Select>\r\n\r\n        <div\r\n          className=\"text-danger d-block mt-0 fs-8\"\r\n          style={{ height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.place && formik.errors.place && formik.errors.place}\r\n        </div>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"info\"\r\n        type=\"submit\"\r\n        disabled={success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 \"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div\r\n        className=\"text-danger d-block mt-0 fs-8\"\r\n        style={{ height: \"0.7rem\" }}\r\n      >\r\n        {dataCurrentHours - +formik.values.hours < 0\r\n          ? \"Brak wolnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","interface ModelDay {\r\n  id?: string;\r\n  userName: string;\r\n  date: string;\r\n  hours: string | number;\r\n  place: string;\r\n}\r\n\r\ninterface ModelColumn {\r\n  id: string;\r\n  columnName: string;\r\n  days?: ModelDay[];\r\n}\r\n\r\nconst columns: ModelColumn[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    columnName: \"Miesiąc\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    columnName: \"Oczekujące\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    columnName: \"Zatwierdzone\",\r\n    days: [],\r\n  },\r\n];\r\n\r\nexport const monthPattern = {\r\n  id: \"\",\r\n  monthDate: \"\",\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submitedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n  columns: columns,\r\n};\r\n","import { useFormik } from \"formik\";\r\nimport { monthPattern } from \"./dataSidebarMonthForm\";\r\nimport { useAddMonthMutation } from \"../../../services/apiSlice\";\r\nimport * as yup from \"yup\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {\r\n  currYearNumber,\r\n  currMonthNumber,\r\n} from \"../../../data/dataCurrentDates\";\r\n\r\ninterface ModelFormValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useSidebarMonthFormik = () => {\r\n  const navigate = useNavigate();\r\n  const [addMonth, success] = useAddMonthMutation();\r\n\r\n  const { databaseMonthsDates = [] } = useDatabaseValues();\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { monthDate: `${currYearNumber}-${currMonthNumber}` },\r\n    validationSchema: yup.object({\r\n      monthDate: yup\r\n        .string()\r\n        .test(\r\n          \"is-in-database\",\r\n          \"Miesiąc już zapisany\",\r\n          value => value !== undefined && !databaseMonthsDates?.includes(value)\r\n        ),\r\n    }),\r\n\r\n    onSubmit: async values => {\r\n      const monthToPOST = { ...monthPattern, monthDate: values.monthDate };\r\n      await addMonth(monthToPOST);\r\n      navigate(`/miesiac/${values.monthDate}`);\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useSidebarMonthFormik;\r\n","import useSidebarMonthFormik from \"./useSidebarMonthFormik\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst useRequestSidebarMonthForm = () => {\r\n  const { formik, success } = useSidebarMonthFormik();\r\n\r\n  let btnContent;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        variant=\"primary\"\r\n        style={{ height: \"1.5rem\", width: \"1.5rem\" }}\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (success.isError) {\r\n    btnContent = <span className=\"text-danger\"> Błąd </span>;\r\n  } else {\r\n    btnContent = <AiOutlinePlusCircle style={{ fontSize: \"1.5rem\" }} />;\r\n  }\r\n\r\n  return { formik, success, btnContent };\r\n};\r\n\r\nexport default useRequestSidebarMonthForm;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport useRequestSidebarMonthForm from \"./useRequestSidebarMonthForm\";\r\nimport { currMonthNumber, currYearNumber } from \"../../../data/dataCurrentDates\";\r\n\r\n\r\nconst SidebarMonthForm = () => {\r\n \r\n  const { formik, success, btnContent } = useRequestSidebarMonthForm();\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"mt-1\">\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"monthDate\" className=\"mb-0 fs-7\">\r\n            Podaj miesiąc\r\n          </Form.Label>\r\n          <div className=\"d-flex\">\r\n            <Form.Control\r\n              id=\"monthDate\"\r\n              type=\"month\"\r\n              name=\"monthDate\"\r\n              min = {`${currYearNumber}-${currMonthNumber}`}\r\n              max=\"2025-12\"\r\n              value={formik.values.monthDate}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className=\"p-0 px-1 d-block border border-primary\"\r\n              style={{ minHeight: 0, height: \"fit-content\", cursor: \"pointer\" }}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={success.isLoading}\r\n              className=\"d-flex justify-content-center align-items-start m-0 justify-content-center p-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n            >\r\n              {btnContent}\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n        <Form.Text\r\n          className=\"text-danger d-block mt-0 lh-0\"\r\n          style={{ fontSize: \"0.6rem\", height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.monthDate &&\r\n            formik.errors.monthDate &&\r\n            formik.errors.monthDate}\r\n        </Form.Text>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthForm;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport { useMonthsDataQuery } from \"../../../services/apiSlice\";\r\nimport \"./_monthList.scss\";\r\n\r\nconst SidebarMonthsList = () => {\r\n  const location = useLocation();\r\n  const { data } = useMonthsDataQuery(undefined);\r\n  const { databaseMonthsDatesSorted, databaseMonthsDatesToString } =\r\n    useDatabaseValues();\r\n\r\n  const monthURL = location.pathname.split(\"/\").slice(-1)[0];\r\n  const monthURLToDateFormat = new Date(monthURL);\r\n\r\n  const monthURLStringFormat =\r\n    monthURL &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup className=\"monthListContainer bg-white border border-primary\">\r\n      {!data ? (\r\n        <p className=\"py-1 px-2 text-warning text-center\">Brak danych</p>\r\n      ) : (\r\n        databaseMonthsDatesToString.map((month: any, idx: any) => {\r\n          return (\r\n            <ListGroup.Item key={month} action className=\"border-0 p-0 px-1\">\r\n              <Link\r\n                to={`/miesiac/${databaseMonthsDatesSorted[idx]}`}\r\n                key={month}\r\n                className={`${\r\n                  monthURLStringFormat !== month ? \"text-reset\" : \"text-success\"\r\n                } text-decoration-none text-capitalize`}\r\n              >\r\n                {month}\r\n              </Link>\r\n            </ListGroup.Item>\r\n          );\r\n        })\r\n      )}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthsList;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport SidebarMonthsList from \"./sidebarMonthList/SidebarMonthsList\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\nconst SidebarMonthCollapse = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        variant=\"info\"\r\n        className=\"fw-medium p-1 w-100 mt-1\"\r\n      >\r\n        Wybierz miesiąc\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3 fw-medium\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div>\r\n          <SidebarMonthsList />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthCollapse;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport SidebarTitle from \"./SidebarTitle\";\r\nimport DayForm from \"./dayForm/DayForm\";\r\nimport SidebarMonthForm from \"./sidebarMonthForm/SidebarMonthForm\";\r\nimport SidebarMonthCollapse from \"./SidebarMonthCollapse\";\r\n\r\nconst IndexSidebar = () => {\r\n  const urlPrintNavBar = useLocation().pathname;\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(s => !s);\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(urlPrintNavBar) ? (\r\n        <>\r\n          <Button\r\n            variant=\"secondary\"\r\n            onClick={toggleShow}\r\n            className=\"me-2 p-1 mt-1 col-sm-1\"\r\n            style={{ position: \"absolute\", right: 0 }}\r\n          >\r\n            <GiHamburgerMenu className=\"fs-1\" />\r\n          </Button>\r\n\r\n          <Offcanvas\r\n            show={show}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className=\"w-20 bg-primary-subtle\"\r\n            style={{ width: 200 }}\r\n          >\r\n            <Offcanvas.Header className=\"pb-0\">\r\n              <Offcanvas.Title>\r\n                <SidebarTitle />\r\n              </Offcanvas.Title>\r\n            </Offcanvas.Header>\r\n            <Offcanvas.Body className=\"pt-0\">\r\n              <SidebarMonthForm />\r\n              <SidebarMonthCollapse />\r\n              <DayForm />\r\n            </Offcanvas.Body>\r\n          </Offcanvas>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nexport const currYearNumber = new Intl.DateTimeFormat(\"pl\", {\r\n  year: \"numeric\",\r\n}).format(today);\r\n\r\nexport const currMonthNumber = new Intl.DateTimeFormat(\"pl\", {\r\n  month: \"2-digit\",\r\n}).format(today);\r\n\r\nexport const currDateNumber = today.toISOString().split(\"T\")[0]; \r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\n","import { useMonthsDataQuery } from \"../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../pages/monthPanel/utils\";\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  error?: {};\r\n  isLoading: boolean;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  databaseMonthsDates: string[];\r\n  databaseMonthsDatesSorted: any;\r\n  databaseMonthsDatesToString: string[];\r\n}\r\n\r\nconst useDatabaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data, error, isLoading } = useMonthsDataQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find(\r\n          (month: any) => month.monthDate === monthURL\r\n        )\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0]?.days.reduce((sum: any, day: any) => {\r\n          return sum + day?.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1]?.days.reduce((sum: any, day: any) => {\r\n          return sum + day?.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n   \r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days \r\n      ? databaseColumns?.[2]?.days.reduce((sum: any, day: any) => {\r\n          return sum + day?.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  // dates transformation\r\n  const databaseMonthsDates =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection.map(month => month.monthDate)\r\n      : [];\r\n\r\n  const databaseMonthsDatesSorted = data\r\n    ? databaseMonthsDates.sort((date1: any, date2: any) => {\r\n        if (date1 < date2) {\r\n          return -1;\r\n        } else if (date1 > date2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n    : [];\r\n\r\n\r\n  const databaseMonthsDatesToString = databaseMonthsDatesSorted.map(\r\n    (monthDate: any) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    isLoading,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n    databaseMonthsDatesSorted,\r\n    databaseMonthsDatesToString,\r\n  };\r\n};\r\n\r\nexport default useDatabaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\n"],"names":["navigate","useNavigate","_jsx","onClick","auth","signOut","className","style","cursor","fontSize","children","initialValues","id","crypto","randomUUID","date","hours","userName","place","validationSchema","yup","test","value","required","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","_slicedToArray","updateColumns","success","urlParts","useLocation","pathname","split","lastPartMonthURL","length","_useDatabaseValues","useParams","monthURL","useDatabaseValues","databaseColumns","databaseMonth","data","dataCurrentHours","formik","useFormik","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_databaseColumns$","databaseColumnsAddedDays","wrap","_context","prev","next","setFieldValue","abrupt","_toConsumableArray","_objectSpread","days","concat","columns","stop","_x","apply","arguments","_useDayForm","useDayForm","lastPartOfMonthURL","databaseAllHours","btnContent","isLoading","Spinner","animation","size","variant","isError","_jsxs","Form","handleSubmit","Group","Label","htmlFor","Select","name","onChange","handleChange","onBlur","handleBlur","map","height","touched","errors","Control","type","min","currDateNumber","placeholder","minHeight","item","Button","disabled","monthPattern","monthDate","allHours","currentHours","submitedHours","acceptedHours","rejectedHours","columnName","_useAddMonthMutation","useAddMonthMutation","_useAddMonthMutation2","addMonth","_useDatabaseValues$da","databaseMonthsDates","currYearNumber","currMonthNumber","undefined","includes","monthToPOST","_useSidebarMonthFormi","useSidebarMonthFormik","width","AiOutlinePlusCircle","_useRequestSidebarMon","useRequestSidebarMonthForm","_Fragment","max","Text","location","useMonthsDataQuery","databaseMonthsDatesSorted","databaseMonthsDatesToString","slice","monthURLToDateFormat","Date","monthURLStringFormat","Intl","DateTimeFormat","year","month","timeZone","format","ListGroup","idx","Item","action","Link","to","_useState","useState","_useState2","open","setOpen","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","SidebarMonthsList","urlPrintNavBar","show","setShow","s","position","right","GiHamburgerMenu","Offcanvas","onHide","scroll","backdrop","Header","Title","SidebarTitle","Body","SidebarMonthForm","SidebarMonthCollapse","DayForm","today","toISOString","currMonthDateToString","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","_databaseColumns$2","_databaseColumns$3","_useMonthsDataQuery","error","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","databaseMonthsCollection","addDaysToColumns","find","dataBaseSubmitedHours","databaseAcceptedHours","databaseRejectedHours","submitedHoursSum","reduce","sum","day","acceptedHoursSum","rejectedHoursSum","sort","date1","date2","monthToDateFormat","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","column","hasOwnProperty","handleDragDrop","results","setColumns","source","destination","draggableId","droppableId","index","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
{"version":3,"file":"static/js/403.385632df.chunk.js","mappings":"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","sources":["hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","pages/settings/settingsUsersList/SettingsUsersListItem.tsx","pages/settings/settingsUsersList/SettingsUsersList.tsx","pages/settings/settingsUserForm/useSettingsUserFormik.tsx","pages/settings/settingsUserForm/dataSettingsUserForm.tsx","pages/settings/settingsUserForm/SettingsUserForm.tsx","pages/settings/settingsMonthsList/SettingsMonthsListItem.tsx","pages/settings/settingsMonthsList/SettingsMonthsList.tsx","pages/settings/IndexSettings.tsx","utils/alertHelper.tsx"],"sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        title: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useMonthsDataQuery } from \"../services/apiSlice\";\r\n\r\nconst useMonthDates = () => {\r\n    const { data } = useMonthsDataQuery(undefined);\r\n    \r\n  const monthDates =\r\n    data &&\r\n    Object.values(data).flatMap(year =>\r\n      Object.values(year).flatMap(month => month.id)\r\n    );\r\n  return { monthDates };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import React from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useDeleteUserMutation,\r\n  useUsersQuery,\r\n} from \"../../../services/apiSliceUsers\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ModelUser } from \"../settingsUserForm/useSettingsUserFormik\";\r\nimport { alertHelper } from \"../../../utils/alertHelper\";\r\n\r\ninterface Props {\r\n  user: ModelUser;\r\n}\r\n\r\nconst SettingsUsersListItem = (props: Props) => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n  const [deleteUser, success] = useDeleteUserMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-4 ms-auto\" />\r\n  );\r\n\r\n  const handleDelete = async (id: string) => {\r\n    Swal.fire(alertHelper(\"Chcesz usuniąć użytkownika?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const usersBodyPUTRequest = dataUsers?.filter((user: ModelUser) => {\r\n          return user.id !== id;\r\n        });\r\n\r\n        await deleteUser(usersBodyPUTRequest);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      onClick={() => handleDelete(props.user.id)}\r\n      className=\"border-0 p-0 px-1 fs-4 text-decoration-none text-capitalize  d-flex justify-content-between align-items-center\"\r\n      style={{ color: props.user.userColor, cursor: \"pointer\" }}\r\n    >\r\n      {props.user.userName}\r\n      <Button className=\" bg-transparent border-0\">{btnContent}</Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useUsersQuery } from \"../../../services/apiSliceUsers\";\r\nimport SettingsUsersListItem from \"./SettingsUsersListItem\";\r\nimport { ModelUser } from \"../settingsUserForm/useSettingsUserFormik\";\r\n\r\nconst SettingsUsersList = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"h4\">Lista urzytkowników</h3>\r\n      <ListGroup className=\"border border-primary bg-white pe-0 monthListContainer\">\r\n        {!dataUsers ? (\r\n          <p className=\"py-1 px-2 fs-4 text-warning\">Brak danych</p>\r\n        ) : (\r\n          dataUsers?.map((user: ModelUser) => {\r\n            return <SettingsUsersListItem user={user} key={user.id} />;\r\n          })\r\n        )}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersList;\r\n","import { useFormik } from \"formik\";\r\nimport {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../../services/apiSliceUsers\";\r\nimport * as yup from \"yup\";\r\n\r\nexport interface ModelUser {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n}\r\n\r\nconst useUserSettingsFormik = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n  const formik = useFormik<ModelUser>({\r\n    initialValues: {\r\n      id: \"\",\r\n      userName: \"\",\r\n      userColor: \"#e0cce1\",\r\n    },\r\n    validationSchema: yup.object({\r\n      userName: yup\r\n        .string()\r\n        .test(\r\n          \"is-in-database\",\r\n          \"Imię zajęte\",\r\n          value => value !== undefined && !usersNames?.includes(value)\r\n        )\r\n        .required(\"Imię wymagane\"),\r\n      userColor: yup\r\n        .string()\r\n        .test(\r\n          \"is-in-database\",\r\n          \"Kolor zajęty\",\r\n          value => value !== undefined && !UsersColors?.includes(value)\r\n        ),\r\n    }),\r\n\r\n    onSubmit: async (values, { resetForm }) => {\r\n      const updatedValues = {\r\n        ...values,\r\n        id: crypto.randomUUID(),\r\n      };\r\n\r\n      if (dataUsers) {\r\n        await addUser([...dataUsers, updatedValues]);\r\n      } else {\r\n        await addUser([updatedValues]);\r\n      }\r\n      resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useUserSettingsFormik;\r\n","export const dataUserInputs = [\r\n  {\r\n    labelText: \"Podaj imię\",\r\n    name: \"userName\",\r\n    type: \"text\",\r\n    placeholder: \"Imię\",\r\n  },\r\n  {\r\n    labelText: \"Podaj kolor\",\r\n    name: \"userColor\",\r\n    type: \"color\",\r\n    placeholder: \"\",\r\n  },\r\n];\r\n","import React from \"react\";\r\nimport useUserSettingsFormik from \"./useSettingsUserFormik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { dataUserInputs } from \"./dataSettingsUserForm\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\n\r\nconst SettingsUserForm = () => {\r\n  const { formik, success } = useUserSettingsFormik();\r\n\r\n  const { btnContent } = useHTTPState(success, \"Zapisz użytkowanika\");\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit}>\r\n      <Row>\r\n        {dataUserInputs.map(({ labelText, name, type, placeholder }, idx) => {\r\n          return (\r\n            <Col key={name} className={`${idx === 0 ? \"col-8\" : \"col-4\"}`}>\r\n              <Form.Group className=\"\">\r\n                <Form.Label htmlFor={name} className=\"fw-medium\">\r\n                  {labelText}\r\n                </Form.Label>\r\n\r\n                <Form.Control\r\n                  id={name}\r\n                  type={type}\r\n                  name={name}\r\n                  value={formik.values[name as keyof typeof formik.values]}\r\n                  onChange={formik.handleChange}\r\n                  onBlur={formik.handleBlur}\r\n                  placeholder={placeholder}\r\n\r\n                  // className=\"shadow-sm\"\r\n                />\r\n\r\n                <Form.Text\r\n                  className=\"text-danger d-block mt-0 mb-4 fs-8\"\r\n                  style={{ height: \"0.7rem\" }}\r\n                >\r\n                  {formik.touched[name as keyof typeof formik.touched] &&\r\n                    formik.errors[name as keyof typeof formik.touched] &&\r\n                    formik.errors[name as keyof typeof formik.touched]}\r\n                </Form.Text>\r\n              </Form.Group>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n\r\n      <Button\r\n        disabled={success.isLoading}\r\n        type=\"submit\"\r\n        className=\"col-8 col-sm-7  bg-info text-white fw-medium\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SettingsUserForm;\r\n","import Swal from \"sweetalert2\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { alertHelper } from \"../../../utils/alertHelper\";\r\nimport { useDeleteMonthMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface Props {\r\n  monthDateToString: string;\r\n  monthDate: string;\r\n}\r\n\r\nconst SettingsMonthsListItem = (props: Props) => {\r\n  const [deleteMonth, success] = useDeleteMonthMutation();\r\n\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n\r\n  const handleDelete = async () => {\r\n    Swal.fire(alertHelper(\"Chcesz usuniąć użytkownika?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const year = props.monthDate.slice(0, 4);\r\n        const month = props.monthDate.slice(-2);\r\n\r\n        await deleteMonth({ year: year, month: month });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      onClick={handleDelete}\r\n      className=\"border-0 p-0 px-1 \"\r\n    >\r\n\r\n      <Button\r\n        disabled={success.isLoading}\r\n        className=\"w-100 d-flex justify-content-between align-items-center px-0 bg-transparent text-capitalize border-0 fs-5\"\r\n      >\r\n        {props.monthDateToString} {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport SettingsMonthsListItem from \"./SettingsMonthsListItem\";\r\n\r\n\r\n\r\nconst SettingsMonthsList = () => {\r\n\r\nconst { monthDates } = useMonthDates();\r\n\r\n\r\nconst databaseMonthsDatesToString = monthDates?.map((monthDate: string) => {\r\n  const monthToDateFormat = new Date(monthDate);\r\n  return new Intl.DateTimeFormat(\"pl-PL\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    timeZone: \"UTC\",\r\n  }).format(monthToDateFormat);\r\n});\r\n\r\n\r\n    return (\r\n      <>\r\n        <h3 className=\"h4\">Lista miesięcy</h3>\r\n        <ListGroup className=\"border border-primary bg-white pe-0\">\r\n          {!monthDates ? (\r\n            <p className=\"py-1 px-2 fs-4 text-warning\">Brak danych</p>\r\n          ) : (\r\n            databaseMonthsDatesToString?.map((monthDateToString: string, idx:number) => {\r\n              return (\r\n                <SettingsMonthsListItem\r\n                  monthDateToString={monthDateToString}\r\n                  monthDate={monthDates[idx]}\r\n                  key={monthDateToString}\r\n                />\r\n              );\r\n            })\r\n          )}\r\n        </ListGroup>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default SettingsMonthsList;","import Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport SettingsUsersList from \"./settingsUsersList/SettingsUsersList\";\r\nimport SettingsUsersForm from \"./settingsUserForm/SettingsUserForm\";\r\nimport SettingsMonthsList from \"./settingsMonthsList/SettingsMonthsList\";\r\n\r\n\r\nconst IndexSettings = () => {\r\n  const classStyles =\r\n    \"col-sm-8 col-md-9 col-xl-8 col-xxl-8 ms-sm-auto mx-xl-auto px-1 pt-4\";\r\n\r\n  return (\r\n    <main className=\"bg-primary-subtle\" style={{ minHeight: \"100vh\" }}>\r\n      <Container fluid>\r\n        <Row className={classStyles}>\r\n          <SettingsUsersForm />\r\n        </Row>\r\n        <Row className={classStyles}>\r\n          <SettingsUsersList />\r\n        </Row>\r\n        <Row className={classStyles}>\r\n          <SettingsMonthsList />\r\n        </Row>\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexSettings;\r\n","export const alertHelper = (message:string) =>{\r\n\r\nreturn {\r\n  title: message,\r\n  showCancelButton: true,\r\n  confirmButtonColor: \"#3085d6\",\r\n  cancelButtonColor: \"#d33\",\r\n  confirmButtonText: \"Tak\",\r\n  cancelButtonText: \"Nie\",\r\n};\r\n\r\n}"],"names":["success","btnText","useEffect","isError","error","errMsg","status","Swal","title","concat","confirmButtonColor","btnContent","isLoading","_jsx","Spinner","animation","size","variant","children","className","data","useMonthsDataQuery","undefined","monthDates","Object","values","flatMap","year","month","id","props","dataUsers","useUsersQuery","_useDeleteUserMutatio","useDeleteUserMutation","_useDeleteUserMutatio2","_slicedToArray","deleteUser","useHTTPState","RiDeleteBin6Line","handleDelete","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","alertHelper","then","_ref2","_callee","result","usersBodyPUTRequest","_context","isConfirmed","filter","user","stop","_x2","apply","arguments","_x","_jsxs","ListGroup","Item","onClick","style","color","userColor","cursor","userName","Button","_Fragment","map","SettingsUsersListItem","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","usersNames","UsersColors","formik","useFormik","initialValues","validationSchema","yup","test","value","includes","required","onSubmit","_onSubmit","_ref3","resetForm","updatedValues","_objectSpread","crypto","randomUUID","_toConsumableArray","dataUserInputs","labelText","name","type","placeholder","_useUserSettingsFormi","useUserSettingsFormik","Form","handleSubmit","Row","idx","Col","Group","Label","htmlFor","Control","onChange","handleChange","onBlur","handleBlur","Text","height","touched","errors","disabled","_useDeleteMonthMutati","useDeleteMonthMutation","_useDeleteMonthMutati2","deleteMonth","monthDate","slice","monthDateToString","useMonthDates","databaseMonthsDatesToString","monthToDateFormat","Date","Intl","DateTimeFormat","timeZone","format","SettingsMonthsListItem","classStyles","minHeight","Container","fluid","SettingsUsersForm","SettingsUsersList","SettingsMonthsList","message","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText"],"sourceRoot":""}
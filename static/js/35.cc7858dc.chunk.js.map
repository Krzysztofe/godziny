{"version":3,"file":"static/js/35.cc7858dc.chunk.js","mappings":"mHA4BA,IAlBkB,SAACA,GACjB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,SAAOC,QAASJ,EAAMK,KAAKH,SAAEF,EAAMM,SACnCH,EAAAA,EAAAA,KAAA,SACEI,GAAIP,EAAMK,KACVG,KAAMR,EAAMQ,KACZH,KAAML,EAAMK,KACZI,MAAOT,EAAMS,MACbC,SAAUV,EAAMW,aAChBC,OAAQZ,EAAMa,WACdC,YAAad,EAAMc,YACnBC,MAAO,CAAEC,MAAO,QAIxB,C,kICMA,EAnBmB,SAAChB,GAClB,OACEC,EAAAA,EAAAA,MAAA,OAAKgB,UAAWjB,EAAMkB,eAAehB,SAAA,EACnCC,EAAAA,EAAAA,KAAA,SACEK,KAAK,QACLH,KAAML,EAAMK,KACZI,MAAOT,EAAMS,MACbU,QAASnB,EAAMmB,QACfT,SAAUV,EAAMW,aAChBM,UAAWjB,EAAMoB,WACjBb,GAAIP,EAAMS,SAEZN,EAAAA,EAAAA,KAAA,SAAOC,QAASJ,EAAMS,MAAOQ,UAAWjB,EAAMqB,WAAWnB,UACxDD,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,IAAEF,EAAMM,MAAQN,EAAMM,MAAQN,EAAMS,aAIlD,E,gFC9Baa,EAAgB,CAC3Bf,GAAIgB,OAAOC,aACXC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,I,UCHIC,EAAmBC,EAAAA,GAAW,CACzCH,SAAUG,EAAAA,KAAaC,SAAS,mBAChCN,KAAMK,EAAAA,KAAaC,SAAS,mBAC5BL,MAAOI,EAAAA,KAAaC,SAAS,4BAAuBC,SAAS,EAAG,iDAChEJ,MAAOE,EAAAA,KAAaC,SAAS,4BCiD/B,EAzCmB,WACjB,IAAAE,GAAiCC,EAAAA,EAAAA,KAA0BC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDI,EAAaF,EAAA,GAAEG,EAAOH,EAAA,GACvBI,GAAWC,EAAAA,EAAAA,MAAcC,SAASC,MAAM,KACxCC,EAAmBJ,EAASA,EAASK,OAAS,GAGpDC,IAFqBC,EAAAA,EAAAA,MAAbC,UAGNC,EAAAA,EAAAA,GAAkBL,IADZM,EAAeJ,EAAfI,gBAAiBC,EAAaL,EAAbK,cAAeC,EAAIN,EAAJM,KAAMC,EAAgBP,EAAhBO,iBAGxCC,GAASC,EAAAA,EAAAA,IAAsB,CACnChC,cAAeA,EACfO,iBAAkBA,EAElB0B,SAAS,WAAD,IAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAE,SAAAC,EAAMC,GAAM,IAAAC,EAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAC4B,GAAhDd,EAAOe,cAAc,KAAM7C,OAAOC,gBAC9B4B,GAAoBC,EAAOQ,OAAOnC,MAAQ,GAAC,CAAAuC,EAAAE,KAAA,eAAAF,EAAAI,OAAA,iBAW3C,OAVEN,EACJZ,GAAQD,IAAgC,OAAfD,QAAe,IAAfA,OAAe,EAAfA,EAAiBL,QAAS,GAAC0B,EAAAA,EAAAA,GAC5CrB,GACJ,IAEmB,GAAKE,GAC5BD,IACe,OAAfD,QAAe,IAAfA,OAAe,EAAfA,EAAiBL,QAAS,IAAC2B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACP,OAAftB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,IAAE,IACvBuB,KAAK,GAADC,QAAAH,EAAAA,EAAAA,GAAqB,OAAfrB,QAAe,IAAfA,GAAoB,QAALa,EAAfb,EAAkB,UAAE,IAAAa,OAAL,EAAfA,EAAsBU,MAAS,CAACX,MAC1CI,EAAAE,KAAA,EAEE9B,EAAc,CAClB9B,GAAI4C,GAAQD,EAAc3C,GAC1BmE,SAAOH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACFrB,GAAa,IAChBwB,QAASX,MAEV,KAAD,mBAAAE,EAAAU,OAAA,GAAAf,EAAA,KACH,gBAAAgB,GAAA,OAAApB,EAAAqB,MAAA,KAAAC,UAAA,EAtBQ,KAyBX,MAAO,CAAEzB,OAAAA,EAAQf,QAAAA,EACnB,E,UC2CA,EAxFgB,YACOQ,EAAAA,EAAAA,MAAbC,SAAR,IACAgC,EAA4BC,IAApB3B,EAAM0B,EAAN1B,OAAQf,EAAOyC,EAAPzC,QACVC,GAAWC,EAAAA,EAAAA,MAAcC,SAASC,MAAM,KACxCC,EAAmBJ,EAASA,EAASK,OAAS,GAEpDC,GACEG,EAAAA,EAAAA,GAAkBL,GADZS,EAAgBP,EAAhBO,iBAAkB6B,EAAgBpC,EAAhBoC,iBAKtBC,GAAoB/E,EAAAA,EAAAA,KAAA,UAEpBiD,GAAoBC,EAAOQ,OAAOnC,MAAQ,IAC5CwD,GAAoB/E,EAAAA,EAAAA,KAAA,OAAAD,SAAK,0BAGF,IAArB+E,IACFC,GAAoB/E,EAAAA,EAAAA,KAAA,OAAAD,SAAK,mDAG3B,IAAIiF,GAAahF,EAAAA,EAAAA,KAACiF,EAAAA,IAAU,IAc5B,OAZI9C,EAAQ+C,YACVF,GACEhF,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACC,UAAU,SAASC,KAAK,KAAKC,QAAQ,YAAWvF,UACvDC,EAAAA,EAAAA,KAAA,QAAMc,UAAU,kBAAiBf,SAAC,kBAKpCoC,EAAQoD,UACVP,GAAahF,EAAAA,EAAAA,KAAA,OAAAD,SAAK,yBAIlBD,EAAAA,EAAAA,MAAA,QAAMsD,SAAUF,EAAOsC,aAAc5E,MAAO,CAAE6E,UAAW,IAAK1F,SAAA,CAC3D,CACC,CAAEM,KAAM,OAAQC,MAAO,WAAYH,MAAO,aAC1C,CAAEE,KAAM,OAAQC,MAAO,OAAQH,MAAO,cACtC,CAAEE,KAAM,SAAUC,MAAO,QAASH,MAAO,UACzCuF,KAAI,SAAAC,GAA6B,IAA1BtF,EAAIsF,EAAJtF,KAAMC,EAAKqF,EAALrF,MAAOH,EAAKwF,EAALxF,MACpB,OACEL,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC4F,EAAAA,EAAS,CACRvF,KAAMA,EACNH,KAAMI,EACNA,MAAO4C,EAAOQ,OAAOpD,GACrBH,MAAOA,EACPQ,YAAaR,EACbK,aAAc0C,EAAO1C,aACrBE,WAAYwC,EAAOxC,cAErBV,EAAAA,EAAAA,KAAA,OAAKY,MAAO,CAAEiF,MAAO,OAAQ9F,SAC1BmD,EAAO4C,QAAQxF,IACd4C,EAAO6C,OAAOzF,KACZN,EAAAA,EAAAA,KAAA,SAAAD,SACGmD,EAAO6C,OAAOzF,SAdfA,EAoBd,IAEC,CAAC,gBAAY,QAAQoF,KAAI,SAAAjE,GACxB,OACEzB,EAAAA,EAAAA,KAACgG,EAAU,CAET1F,MAAOmB,EACPvB,KAAM,QACNM,aAAc0C,EAAO1C,aACrBQ,QAASkC,EAAOQ,OAAOjC,QAAUA,GAJ5BA,EAOX,KACAzB,EAAAA,EAAAA,KAAA,OAAKY,MAAO,CAAEiF,MAAO,OAAQ9F,SAC1BmD,EAAO4C,QAAQrE,OAASyB,EAAO6C,OAAOtE,QACrCzB,EAAAA,EAAAA,KAAA,SAAAD,SAAQmD,EAAO6C,OAAOtE,UAIzBsD,GACD/E,EAAAA,EAAAA,KAAA,UAAQK,KAAK,SAAQN,SAAEiF,MAG7B,E,UCtDaiB,GAvCP7E,OAAOC,aAuCe,CAC1BjB,GAAI,GACJ8F,MAAO,GACPC,SAAU,EACVC,aAAc,EACdC,cAAe,EACfC,cAAe,EACfC,cAAe,EACfhC,QA1B6B,CAC7B,CACEnE,GAAI,UACJoG,WAAY,eACZnC,KAAM,IAER,CACEjE,GAAI,kBACJoG,WAAY,kBACZnC,KAAM,CAAC,OAET,CACEjE,GAAI,eACJoG,WAAY,eACZnC,KAAM,CAAC,UCuBX,EArDkB,WAChB,IAAAoC,GAA4BC,EAAAA,EAAAA,MAAqBC,GAAA1E,EAAAA,EAAAA,GAAAwE,EAAA,GAA1CG,EAAQD,EAAA,GAAExE,EAAOwE,EAAA,GAElBrF,EAAO,IAAIuF,KAEXC,EAAc,IAAIC,KAAKC,eAAe,KAAM,CAChDC,KAAM,YACLC,OAAO5F,GAEJ6F,EAAe,IAAIJ,KAAKC,eAAe,KAAM,CACjDd,MAAO,YACNgB,OAAO5F,GAEV8F,GAAwBC,EAAAA,EAAAA,UAAS,GAAD/C,OAAIwC,EAAW,KAAAxC,OAAI6C,IAAeG,GAAArF,EAAAA,EAAAA,GAAAmF,EAAA,GAA3DH,EAAIK,EAAA,GAAEC,EAAOD,EAAA,GAMd9B,EAAY,eAAAG,GAAArC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAO+D,GAAkB,IAAAC,EAAA,OAAAlE,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEM,OADlDwD,EAAEE,iBACID,GAAWrD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAQ6B,GAAY,IAAEC,MAAOe,IAAInD,EAAAE,KAAA,EAC5C4C,EAASa,GAAa,KAAD,mBAAA3D,EAAAU,OAAA,GAAAf,EAAA,KAC5B,gBAJiBgB,GAAA,OAAAkB,EAAAjB,MAAA,KAAAC,UAAA,KAMdK,GAAahF,EAAAA,EAAAA,KAACiF,EAAAA,IAAU,IAc5B,OAZI9C,EAAQ+C,YACVF,GACEhF,EAAAA,EAAAA,KAACmF,EAAAA,EAAO,CAACC,UAAU,SAASC,KAAK,KAAKC,QAAQ,YAAWvF,UACvDC,EAAAA,EAAAA,KAAA,QAAMc,UAAU,kBAAiBf,SAAC,kBAKpCoC,EAAQoD,UACVP,GAAahF,EAAAA,EAAAA,KAAA,OAAAD,SAAK,yBAIlBD,EAAAA,EAAAA,MAAA,QAAMsD,SAAUoC,EAAc5E,MAAO,CAAE+G,YAAa,IAAK5H,SAAA,EACvDC,EAAAA,EAAAA,KAAA,SACEK,KAAK,QACLC,MAAO2G,EACP1G,SA7BmB,SAACiH,GACxBD,EAAQC,EAAEI,OAAOtH,MACnB,EA4BMuH,IAAI,UACJC,IAAI,aAEN9H,EAAAA,EAAAA,KAAA,UAAQK,KAAK,SAAQN,SAAEiF,MAG7B,ECsCA,EAvFqB,WACnB,IAAM+C,GAAWC,EAAAA,EAAAA,MACTpF,GAAaD,EAAAA,EAAAA,MAAbC,SACAI,GAASiF,EAAAA,EAAAA,SAAgBC,GAAzBlF,KACAmF,GAA6BtF,EAAAA,EAAAA,GAAkBD,GAA/CuF,yBAEFC,EACJpF,GAAQmF,EACJA,EACGzC,KAAI,SAAAQ,GAAK,OAAIA,EAAMA,KAAK,IACxBmC,MAAK,SAACC,EAAYC,GACjB,OAAID,EAAQC,GACF,EACCD,EAAQC,EACV,EAEA,CAEX,IACF,GAEAC,EACJxF,IACyB,OAAzBoF,QAAyB,IAAzBA,OAAyB,EAAzBA,EAA2B1C,KAAI,SAAC+C,GAC9B,IAAMC,EACJ1F,GAAQoF,GAA6B,IAAIvB,KAAK4B,GAEhD,OAAO,IAAI1B,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNf,MAAO,OACPyC,SAAU,QACTzB,OAAOwB,EACZ,KAWIE,EAAMR,EAA0BA,EAA0B3F,OAAS,IAEzEoG,EAAAA,EAAAA,YAAU,WACR,IAAMvH,EAAO,IAAIuF,KACXC,EAAc,IAAIC,KAAKC,eAAe,KAAM,CAChDC,KAAM,YACLC,OAAO5F,GACJ6F,EAAe,IAAIJ,KAAKC,eAAe,KAAM,CACjDd,MAAO,YACNgB,OAAO5F,GACV0B,GAAQ4F,GAAOb,EAAS,YAADzD,OAAawC,EAAW,KAAAxC,OAAI6C,GACrD,GAAG,IAEH,IAAM2B,GAAiBzG,EAAAA,EAAAA,MAAcC,SAErC,OACEtC,EAAAA,EAAAA,KAAA+I,EAAAA,SAAA,CAAAhJ,SACI,CAAC,KAAKiJ,SAASF,GAsBb,MArBFhJ,EAAAA,EAAAA,MAAA,OAAKc,MAAO,CAAEqI,SAAU,SAAUlJ,SAAA,EAChCC,EAAAA,EAAAA,KAACkJ,EAAS,SAEAhB,IAATlF,GAA+B,OAATA,GACrBhD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,gBAEHyI,EAA4B9C,KAAI,SAACQ,EAAYiD,GAC3C,OACEnJ,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACoJ,EAAAA,GAAI,CACHC,GAAE,YAAA/E,OAAc8D,EAA0Be,IAAOpJ,SAGhDmG,GAFIA,IAHCA,EASd,KAEFlG,EAAAA,EAAAA,KAACsJ,EAAO,QAKlB,C,wDCdA,IAtE0B,WAA2B,IAA1B1G,EAAa+B,UAAAlC,OAAA,QAAAyF,IAAAvD,UAAA,GAAAA,UAAA,GAAG,KACjC3B,GAASiF,EAAAA,EAAAA,SAAgBC,GAAzBlF,KAEFuG,EAAmBvG,GAAQwG,OAAOC,KAAKzG,GAEvC0G,EACJH,GACAC,OAAO9F,OAAOV,GACX2G,OACAjE,KAAI,SAACkE,EAAWT,GACf,OAAA/E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYwF,GAAI,IAAExJ,GAAImJ,EAAiBJ,IACzC,IAEEhB,GAA2B0B,EAAAA,EAAAA,IAAiBH,GAE5C3G,EACJC,GAAQmF,EAAyB1F,OAAS,EACd,OAAxB0F,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0B2B,MAAK,SAAC5D,GAAU,OAAKA,EAAMA,QAAUtD,CAAQ,SACvEsF,EAEApF,EAAkBE,IAAqB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAewB,SAIzCO,EAAmB9B,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeoD,SAAW,GACpDlD,EAAmBD,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeqD,aAAe,GACxD2D,EAAwB/G,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAesD,cAAgB,GAC9D2D,EAAwBhH,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeuD,cAAgB,GAC9D2D,EAAwBjH,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAewD,cAAgB,GAI9D2D,EACJlH,GAAQmF,EAAyB1F,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGuB,KAAK8F,QAAO,SAACC,EAAUC,GAC1C,OAAOD,EAAMC,EAAI9I,KACnB,GAAG,GACH,EAEA+I,EACJtH,GAAQmF,EAAyB1F,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGuB,KAAK8F,QAAO,SAACC,EAAUC,GAC1C,OAAOD,EAAMC,EAAI9I,KACnB,GAAG,GACH,EAEAgJ,EACJvH,GAAQmF,EAAyB1F,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGuB,KAAK8F,QAAO,SAACC,EAAUC,GAC1C,OAAOD,EAAMC,EAAI9I,KACnB,GAAG,GACH,EAEN,MAAO,CACLyB,KAAAA,EACAuG,iBAAAA,EACApB,yBAAAA,EACApF,cAAAA,EACAD,gBAAAA,EACAgC,iBAAAA,EACA7B,iBAAAA,EACA+G,sBAAAA,EACAC,sBAAAA,EACAF,sBAAAA,EACAO,iBAAAA,EACAC,iBAAAA,EACAL,iBAAAA,EAEJ,C,wDCyCA,IA3F0B,WAA2C,IAA1CtH,EAAa+B,UAAAlC,OAAA,QAAAyF,IAAAvD,UAAA,GAAAA,UAAA,GAAG,KACjC3B,GAASiF,EAAAA,EAAAA,SAAgBC,GAAzBlF,KAEFuG,EAAmBvG,GAAQwG,OAAOC,KAAKzG,GAEvC0G,EACJH,GACAC,OAAO9F,OAAOV,GACX2G,OACAjE,KAAI,SAACkE,EAAWT,GACf,OAAA/E,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYwF,GAAI,IAAExJ,GAAImJ,EAAiBJ,IACzC,IAEEhB,GAA2B0B,EAAAA,EAAAA,IAAiBH,GAE5C3G,EACJC,GAAQmF,EAAyB1F,OAAS,EACd,OAAxB0F,QAAwB,IAAxBA,OAAwB,EAAxBA,EAA0B2B,MAAK,SAAC5D,GAAU,OAAKA,EAAMA,QAAUtD,CAAQ,SACvEsF,EAEApF,EAAkBE,IAAqB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAewB,SAIzCO,EAAmB9B,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeoD,SAAW,GACpDlD,EAAmBD,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeqD,aAAe,GACxD2D,EAAwB/G,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAesD,cAAgB,GAC9D2D,EAAwBhH,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAeuD,cAAgB,GAC9D2D,EAAwBjH,EAAoB,OAAbD,QAAa,IAAbA,OAAa,EAAbA,EAAewD,cAAgB,GAI9D2D,EACJlH,GAAQmF,EAAyB1F,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGuB,KAAK8F,QAAO,SAACC,EAAUC,GAC1C,OAAOD,EAAMC,EAAI9I,KACnB,GAAG,GACH,EAEA+I,EACJtH,GAAQmF,EAAyB1F,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGuB,KAAK8F,QAAO,SAACC,EAAUC,GAC1C,OAAOD,EAAMC,EAAI9I,KACnB,GAAG,GACH,EAEAgJ,EACJvH,GAAQmF,EAAyB1F,OAAS,GAAoB,OAAfK,QAAe,IAAfA,GAAAA,EAAkB,GAAGuB,KACjD,OAAfvB,QAAe,IAAfA,OAAe,EAAfA,EAAkB,GAAGuB,KAAK8F,QAAO,SAACC,EAAUC,GAC1C,OAAOD,EAAMC,EAAI9I,KACnB,GAAG,GACH,EAMDiJ,EACJxH,GAAQmF,EACJA,EAAyBzC,KAAI,SAAAQ,GAAK,OAAIA,EAAMA,KAAK,IACjD,GAYL,MAAO,CACLuE,OAVaD,EAAoB9E,KAAI,SAAC+C,GACtC,IAAMC,EAAoB,IAAI7B,KAAK4B,GACnC,OAAO,IAAI1B,KAAKC,eAAe,QAAS,CACtCC,KAAM,UACNf,MAAO,OACPyC,SAAU,QACTzB,OAAOwB,EACZ,IAIE1F,KAAAA,EACAuG,iBAAAA,EACApB,yBAAAA,EACApF,cAAAA,EACAD,gBAAAA,EACAgC,iBAAAA,EACA7B,iBAAAA,EACA+G,sBAAAA,EACAC,sBAAAA,EACAF,sBAAAA,EACAO,iBAAAA,EACAC,iBAAAA,EACAL,iBAAAA,EACAM,oBAAAA,EAEJ,C,kHC9EaX,EAAmB,SAACa,GAC/B,OAAKC,MAAMC,QAAQF,GAIT,OAAHA,QAAG,IAAHA,OAAG,EAAHA,EAAKhF,KAAI,SAACmF,GAAc,IAADC,EAKNC,EAAtB,OAJ2B,OAAHF,QAAG,IAAHA,GAAY,QAATC,EAAHD,EAAKtG,eAAO,IAAAuG,OAAT,EAAHA,EAAcE,OAAM,SAACC,GAAW,OACtDA,EAAOC,eAAe,OAAO,KAaxBL,GATLzG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKyG,GAAG,IACNtG,QAAY,OAAHsG,QAAG,IAAHA,GAAY,QAATE,EAAHF,EAAKtG,eAAO,IAAAwG,OAAT,EAAHA,EAAcrF,KAAI,SAACuF,GAAW,OAAA7G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAClC6G,GAAM,IACT5G,KAAM4G,EAAO5G,MAAQ,IAAE,KAM/B,IAnBS,EAoBX,EAwBa8G,EAAiB,SAACC,EAAc7G,EAAc8G,GACzD,IAAQC,EAAwBF,EAAxBE,OAAQC,EAAgBH,EAAhBG,YAEhB,GAAKA,IAEHD,EAAOE,cAAgBD,EAAYE,aACnCH,EAAOI,QAAUH,EAAYG,OAI/B,GAAIJ,EAAOG,cAAgBF,EAAYE,YAAa,CAClD,IAAME,EAAkBpH,EAAQqH,WAAU,SAACX,GACzC,OAAOA,EAAO7K,KAAOkL,EAAOG,WAC9B,IAEMI,EAAuBtH,EAAQqH,WAAU,SAACX,GAC9C,OAAOA,EAAO7K,KAAOmL,EAAYE,WACnC,IAEMK,GAAa3H,EAAAA,EAAAA,GAAOI,EAAQoH,GAAiBtH,MAE7C0H,EACJT,EAAOG,cAAgBF,EAAYS,YAAU7H,EAAAA,EAAAA,GACrCI,EAAQsH,GAAsBxH,MAClCyH,EAENG,EAAqBH,EAAcI,OAAOZ,EAAOI,MAAO,GAAjDS,GAAmDlK,EAAAA,EAAAA,GAAAgK,EAAA,GAAzC,GACjBF,EAAmBG,OAAOX,EAAYG,MAAO,EAAGS,GAEhD,IAAMC,GAAUjI,EAAAA,EAAAA,GAAOI,GAEvB6H,EAAWT,IAAgBvH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBG,EAAQoH,IAAgB,IAC3BtH,KAAMyH,IAGRM,EAAWP,IAAqBzH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC3BG,EAAQsH,IAAqB,IAChCxH,KAAM0H,IAGRV,EAAWe,EACb,KAAO,CACL,IAAMC,EAAgBd,EAAYG,MAE5BC,EAAkBpH,EAAQqH,WAAU,SAACX,GACzC,OAAOA,EAAO7K,KAAOkL,EAAOG,WAC9B,IAEMpH,GAAIF,EAAAA,EAAAA,GAAOI,EAAQoH,GAAiBtH,MAC1CiI,EAAqBjI,EAAK6H,OAAOZ,EAAOI,MAAO,GAAxCS,GAA0ClK,EAAAA,EAAAA,GAAAqK,EAAA,GAAhC,GACjBjI,EAAK6H,OAAOG,EAAe,EAAGF,GAE9B,IAAMI,GAAUpI,EAAAA,EAAAA,GAAOI,GAEvBgI,EAAWZ,IAAgBvH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBG,EAAQoH,IAAgB,IAC3BtH,KAAMA,IAGRgH,EAAWkB,EACb,CACF,C","sources":["components/inputs/TextInput.tsx","components/inputs/RadioInput.tsx","components/sidebar/dayForm/dataDayForm.tsx","components/sidebar/dayForm/validationDayForm.tsx","components/sidebar/dayForm/useDayForm.tsx","components/sidebar/dayForm/DayForm.tsx","components/sidebar/monthForm/dataMonthForm.tsx","components/sidebar/monthForm/MonthForm.tsx","components/sidebar/IndexSidebar.tsx","pages/monthPanel/hooksMonthPanel/useDataBaseValues.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["export interface Props {\r\n  type: string;\r\n  name: string;\r\n  value: string | number;\r\n  label: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  handleBlur?: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextInput = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <label htmlFor={props.name}>{props.label}</label>\r\n      <input\r\n        id={props.name}\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        onBlur={props.handleBlur}\r\n        placeholder={props.placeholder}\r\n        style={{ width: 50 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  value: string;\r\n  name: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  checked: boolean;\r\n  containerClass?: string;\r\n  inuptClass?: string;\r\n  labelClass?: string;\r\n  label?: ReactNode;\r\n}\r\n\r\nconst RadioInput = (props: Props) => {\r\n  return (\r\n    <div className={props.containerClass}>\r\n      <input\r\n        type=\"radio\"\r\n        name={props.name}\r\n        value={props.value}\r\n        checked={props.checked}\r\n        onChange={props.handleChange}\r\n        className={props.inuptClass}\r\n        id={props.value}\r\n      />\r\n      <label htmlFor={props.value} className={props.labelClass}>\r\n       <small> {props.label ? props.label : props.value}</small>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioInput;\r\n","export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup.string().required(\"Podaj imię\"),\r\n  date: yup.string().required(\"Podaj datę\"),\r\n  hours: yup.number().required(\"Podaj liczbę godzin\").moreThan(0, \"Liczba godzin musi być większa od 0\"),\r\n  place: yup.string().required(\"Podaj lokalizację\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport { initialValues } from \"./dataDayForm\";\r\nimport { validationSchema } from \"./validationDayForm\";\r\nimport { useUpdateColumnsMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface FormValues {\r\n  date: string;\r\n  hours: number | string;\r\n  userName: string;\r\n  place: string;\r\n}\r\n\r\nconst useDayForm = () => {\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseColumns, databaseMonth, data, dataCurrentHours } =\r\n    useDataBaseValues(lastPartMonthURL);\r\n\r\n  const formik = useFormik<FormValues>({\r\n    initialValues: initialValues,\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async values => {\r\n      formik.setFieldValue(\"id\", crypto.randomUUID());\r\n      if (dataCurrentHours - +formik.values.hours < 0) return;\r\n      const databaseColumnsAddedDays =\r\n        data && databaseMonth && databaseColumns?.length > 0\r\n          ? [...databaseColumns]\r\n          : [];\r\n\r\n      databaseColumnsAddedDays[0] = data &&\r\n        databaseMonth &&\r\n        databaseColumns?.length > 0 && {\r\n          ...databaseColumns?.[0],\r\n          days: [...databaseColumns?.[0]?.days, ...[values]],\r\n        };\r\n\r\n      await updateColumns({\r\n        id: data && databaseMonth.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: databaseColumnsAddedDays,\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useDayForm;\r\n","import { FcApproval } from \"react-icons/fc\";\r\nimport RadioInput from \"../../inputs/RadioInput\";\r\nimport TextInput from \"../../inputs/TextInput\";\r\nimport useDayForm from \"./useDayForm\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport {Spinner } from \"react-bootstrap\"\r\n\r\nconst DayForm = () => {\r\n  const { monthURL } = useParams();\r\n  const { formik, success } = useDayForm();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n\r\n  const { dataCurrentHours, databaseAllHours } =\r\n    useDataBaseValues(lastPartMonthURL);\r\n\r\n\r\n\r\n  let errorHoursContent = <div></div>;\r\n\r\n  if (dataCurrentHours - +formik.values.hours < 0) {\r\n    errorHoursContent = <div> Brak wolnych godzin</div>;\r\n  }\r\n\r\n  if (databaseAllHours === 0) {\r\n    errorHoursContent = <div> Podaj ilość godzin w miesiącu</div>;\r\n  }\r\n\r\n  let btnContent = <FcApproval />;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit} style={{ marginTop: 20 }}>\r\n      {[\r\n        { type: \"text\", value: \"userName\", label: \"Imię\" },\r\n        { type: \"date\", value: \"date\", label: \"Dzień\" },\r\n        { type: \"number\", value: \"hours\", label: \"Godz.\" },\r\n      ].map(({ type, value, label }) => {\r\n        return (\r\n          <div key={value}>\r\n            <TextInput\r\n              type={type}\r\n              name={value}\r\n              value={formik.values[value as keyof typeof formik.values]}\r\n              label={label}\r\n              placeholder={label}\r\n              handleChange={formik.handleChange}\r\n              handleBlur={formik.handleBlur}\r\n            />\r\n            <div style={{ color: \"red\" }}>\r\n              {formik.touched[value as keyof typeof formik.values] &&\r\n                formik.errors[value as keyof typeof formik.values] && (\r\n                  <small>\r\n                    {formik.errors[value as keyof typeof formik.values]}\r\n                  </small>\r\n                )}\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n\r\n      {[\"Wewnątrz\", \"Poza\"].map(place => {\r\n        return (\r\n          <RadioInput\r\n            key={place}\r\n            value={place}\r\n            name={\"place\"}\r\n            handleChange={formik.handleChange}\r\n            checked={formik.values.place === place}\r\n          />\r\n        );\r\n      })}\r\n      <div style={{ color: \"red\" }}>\r\n        {formik.touched.place && formik.errors.place && (\r\n          <small>{formik.errors.place}</small>\r\n        )}\r\n      </div>\r\n\r\n      {errorHoursContent}\r\n      <button type=\"submit\">{btnContent}</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n\r\ninterface DayModel {\r\n  id?: string;\r\n  userName: string;\r\n  date: string;\r\n  hours: string | number;\r\n  place: string;\r\n}\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  columnName: string;\r\n  days?: any;\r\n}\r\n\r\nconst columns: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    columnName: \"Miesiąc\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    columnName: \"Oczekujące\",\r\n    days: [null],\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    columnName: \"Zatwierdzone\",\r\n    days: [null],\r\n  },\r\n];\r\n\r\nexport const monthPattern = {\r\n  id: \"\",\r\n  month: \"\",\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submitedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n  columns: columns,\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { monthPattern } from \"./dataMonthForm\";\r\nimport { useAddMonthMutation } from \"../../../services/apiSlice\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst MonthForm = () => {\r\n  const [addMonth, success] = useAddMonthMutation();\r\n\r\n  const date = new Date();\r\n\r\n  const currYearNum = new Intl.DateTimeFormat(\"pl\", {\r\n    year: \"numeric\",\r\n  }).format(date);\r\n\r\n  const currMonthNum = new Intl.DateTimeFormat(\"pl\", {\r\n    month: \"2-digit\",\r\n  }).format(date);\r\n\r\n  const [year, setYear] = useState(`${currYearNum}-${currMonthNum}`);\r\n\r\n  const handleDateChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setYear(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const monthToPOST = { ...monthPattern, month: year };\r\n    await addMonth(monthToPOST);\r\n  };\r\n\r\n  let btnContent = <FcApproval />;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} style={{ marginRight: 20 }}>\r\n      <input\r\n        type=\"month\"\r\n        value={year}\r\n        onChange={handleDateChange}\r\n        min=\"2023-06\"\r\n        max=\"2025-12\"\r\n      />\r\n      <button type=\"submit\">{btnContent}</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default MonthForm;\r\n","import { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../pages/monthPanel/hooksMonthPanel/useDataBaseValues\";\r\nimport { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport DayForm from \"./dayForm/DayForm\";\r\nimport MonthForm from \"./monthForm/MonthForm\";\r\nimport { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst IndexSidebar = () => {\r\n  const navigate = useNavigate();\r\n  const { monthURL } = useParams();\r\n  const { data } = useColumnsQuery(undefined);\r\n  const { databaseMonthsCollection } = useDataBaseValues(monthURL);\r\n\r\n  const databaseMonthsDatesSorted =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection\r\n          .map(month => month.month)\r\n          .sort((date1: any, date2: any) => {\r\n            if (date1 < date2) {\r\n              return -1;\r\n            } else if (date1 > date2) {\r\n              return 1;\r\n            } else {\r\n              return 0;\r\n            }\r\n          })\r\n      : [];\r\n\r\n  const databaseMonthsDatesToString =\r\n    data &&\r\n    databaseMonthsDatesSorted?.map((monthDate: any) => {\r\n      const monthToDateFormat =\r\n        data && databaseMonthsDatesSorted && new Date(monthDate);\r\n\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    });\r\n\r\n  // const date = new Date();\r\n  // const currYearNum = new Intl.DateTimeFormat(\"pl\", {\r\n  //   year: \"numeric\",\r\n  // }).format(date);\r\n\r\n  // const currMonthNum = new Intl.DateTimeFormat(\"pl\", {\r\n  //   month: \"2-digit\",\r\n  // }).format(date);\r\n\r\n  const url = databaseMonthsDatesSorted[databaseMonthsDatesSorted.length - 1];\r\n\r\n  useEffect(() => {\r\n    const date = new Date();\r\n    const currYearNum = new Intl.DateTimeFormat(\"pl\", {\r\n      year: \"numeric\",\r\n    }).format(date);\r\n    const currMonthNum = new Intl.DateTimeFormat(\"pl\", {\r\n      month: \"2-digit\",\r\n    }).format(date);\r\n    data && url && navigate(`/miesiac/${currYearNum}-${currMonthNum}`);\r\n  }, []);\r\n\r\n  const urlPrintNavBar = useLocation().pathname;\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(urlPrintNavBar) ? (\r\n        <div style={{ position: \"fixed\" }}>\r\n          <MonthForm />\r\n\r\n          {data === undefined || data === null ? (\r\n            <p>Brak danych</p>\r\n          ) : (\r\n            databaseMonthsDatesToString.map((month: any, idx: any) => {\r\n              return (\r\n                <div key={month}>\r\n                  <Link\r\n                    to={`/miesiac/${databaseMonthsDatesSorted[idx]}`}\r\n                    key={month}\r\n                  >\r\n                    {month}\r\n                  </Link>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n          <DayForm />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","import { useColumnsQuery } from \"../../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null) => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  return {\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","import { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n\r\n\r\n\r\n  // date transformation\r\n const databaseMonthsDates =\r\n   data && databaseMonthsCollection\r\n     ? databaseMonthsCollection.map(month => month.month)\r\n     : [];\r\n \r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["props","_jsxs","children","_jsx","htmlFor","name","label","id","type","value","onChange","handleChange","onBlur","handleBlur","placeholder","style","width","className","containerClass","checked","inuptClass","labelClass","initialValues","crypto","randomUUID","date","hours","userName","place","validationSchema","yup","required","moreThan","_useUpdateColumnsMuta","useUpdateColumnsMutation","_useUpdateColumnsMuta2","_slicedToArray","updateColumns","success","urlParts","useLocation","pathname","split","lastPartMonthURL","length","_useDataBaseValues","useParams","monthURL","useDataBaseValues","databaseColumns","databaseMonth","data","dataCurrentHours","formik","useFormik","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_databaseColumns$","databaseColumnsAddedDays","wrap","_context","prev","next","setFieldValue","abrupt","_toConsumableArray","_objectSpread","days","concat","columns","stop","_x","apply","arguments","_useDayForm","useDayForm","databaseAllHours","errorHoursContent","btnContent","FcApproval","isLoading","Spinner","animation","size","variant","isError","handleSubmit","marginTop","map","_ref","TextInput","color","touched","errors","RadioInput","monthPattern","month","allHours","currentHours","submitedHours","acceptedHours","rejectedHours","columnName","_useAddMonthMutation","useAddMonthMutation","_useAddMonthMutation2","addMonth","Date","currYearNum","Intl","DateTimeFormat","year","format","currMonthNum","_useState","useState","_useState2","setYear","e","monthToPOST","preventDefault","marginRight","target","min","max","navigate","useNavigate","useColumnsQuery","undefined","databaseMonthsCollection","databaseMonthsDatesSorted","sort","date1","date2","databaseMonthsDatesToString","monthDate","monthToDateFormat","timeZone","url","useEffect","urlPrintNavBar","_Fragment","includes","position","MonthForm","idx","Link","to","DayForm","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","item","addDaysToColumns","find","dataBaseSubmitedHours","databaseAcceptedHours","databaseRejectedHours","submitedHoursSum","reduce","sum","day","acceptedHoursSum","rejectedHoursSum","databaseMonthsDates","string","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","column","hasOwnProperty","handleDragDrop","results","setColumns","source","destination","draggableId","droppableId","index","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
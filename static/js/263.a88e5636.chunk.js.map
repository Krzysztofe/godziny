{"version":3,"file":"static/js/263.a88e5636.chunk.js","mappings":"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","sources":["components/IndexContainer.tsx","hooks/useHTTPState.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx","components/HoursSummary.tsx","pages/monthPanel/MonthPanelDayPrintData.tsx","pages/monthPanel/monthPanelDay/utilsMonthPanelDay.tsx","pages/monthPanel/monthPanelDay/MonthPanelDay.tsx","pages/monthPanel/MonthPanelColumn.tsx","pages/monthPanel/monthPanelColumnsHeader.tsx/MonthPanelColumnsHeader.tsx","pages/monthPanel/monthPanelColmns/useScrollThumbPosition.tsx","utils/getHoursFromColumns.tsx","pages/monthPanel/monthPanelColmns/MonthPanelColumns.tsx","pages/monthPanel/monthPanelColmns/utilsMonthPanelColumns.tsx","pages/monthPanel/indexMonthPanel/MonthPanelContent.tsx","pages/monthPanel/indexMonthPanel/useRequestMonthPanel.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx","utils/printPanelContent.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\r\nimport useWindowWidth from \"../hooks/useWindowWidth\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst IndexContainer = (props: Props) => {\r\n  const { windowWidth } = useWindowWidth();\r\n  return (\r\n    <main\r\n      className=\"d-flex backgroundImage m-0\"\r\n      style={{\r\n        height: \"100vh\",\r\n        overflow: \"hidden\",\r\n        position: \"relative\",\r\n      \r\n      }}\r\n    >\r\n      <aside\r\n        style={{\r\n          width: windowWidth >= 500 ? \"30%\" : 0,\r\n          maxWidth: \"250px\",\r\n          height: \"100%\",\r\n          \r\n        }}\r\n      ></aside>\r\n      <div\r\n        className=\"d-flex ps-1 flex-fill\"\r\n        style={{\r\n          width: windowWidth >= 500 ? \"70%\" : \"100%\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexContainer;\r\n","import { ReactNode } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(9);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return { monthURLStringFormat };\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return { monthURLStringFormat };\r\n  }\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst HoursSummary = () => {\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"d-flex gap-2 mx-auto fw-medium pb-2 w-fit-content\">\r\n      <div>Wszystkie {month?.calcHours?.allHours} - </div>\r\n\r\n      <div\r\n        className={`${\r\n          month && month?.calcHours?.currentHours <= 0 ? \"text-danger\" : \"\"\r\n        }`}\r\n      >\r\n        {month && month?.calcHours?.currentHours} {\"\"}\r\n        {month && month?.calcHours?.currentHours < 0 ? \"Brak\" : \"Dostępne\"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HoursSummary;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n}\r\n\r\nconst MonthPanelDayPrintData = (props: Props) => {\r\n  let dateToPrint;\r\n\r\n  if (!props?.day?.date) {\r\n    return <div>Brak danych</div>;\r\n  } else {\r\n    const date = new Date(props.day.date);\r\n    dateToPrint = new Intl.DateTimeFormat(\"pl-PL\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n    }).format(date);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"d-flex justify-content-between fs-7 \">\r\n          <div>{props.day?.userName}</div>\r\n\r\n          <div>\r\n            {props.day?.place === \"Poza\" ? (\r\n              <TbArrowBigRightLineFilled style={{ color: \"rgb(80,173,150)\" }} />\r\n            ) : (\r\n              <MdFactory style={{ color: \"rgb(255, 181, 9)\" }} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"d-flex fw-medium justify-content-between\">\r\n          <div>{dateToPrint ? dateToPrint : \"\"}</div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MonthPanelDayPrintData;\r\n","import { ModelMonth } from \"../../../sharedModels/modelMonth\";\r\nimport { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\n\r\nexport const deleteDayById = (obj: ModelMonth, idToDelete: string) => {\r\n  const updatedColumns = obj.columns.map((column: ModelColumn) => {\r\n    const updatedDays = column?.days?.filter(day => day.id !== idToDelete);\r\n    return { ...column, days: updatedDays };\r\n  });\r\n  return { ...obj, columns: updatedColumns };\r\n};\r\n\r\nexport const calculateUpdatedCalcHours = (\r\n  month: ModelMonth | null,\r\n  columnIdx: number,\r\n  subtractedHours: number | undefined\r\n) => {\r\n  if (!month || !month.calcHours) {\r\n     return {\r\n       currentHours: 0,\r\n       submittedHours: 0,\r\n       acceptedHours: 0,\r\n       rejectedHours: 0,\r\n       allHours: 0,\r\n     };\r\n  }\r\n\r\n  const { calcHours } = month;\r\n\r\n  return {\r\n    ...calcHours,\r\n    currentHours:\r\n      columnIdx !== 2 && subtractedHours\r\n        ? calcHours.currentHours + subtractedHours\r\n        : calcHours.currentHours,\r\n    submittedHours:\r\n      columnIdx === 0 && subtractedHours\r\n        ? calcHours.submittedHours - subtractedHours\r\n        : calcHours.submittedHours,\r\n    acceptedHours:\r\n      columnIdx === 1 && subtractedHours\r\n        ? calcHours.acceptedHours - subtractedHours\r\n        : calcHours.acceptedHours,\r\n    rejectedHours:\r\n      columnIdx === 2 && subtractedHours\r\n        ? calcHours.rejectedHours - subtractedHours\r\n        : calcHours.rejectedHours,\r\n  };\r\n};","import { useEffect, useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  agreeAlert,\r\n  closeAlert,\r\n  printAlert,\r\n} from \"../../../redux/storeFeatures/alertSlice\";\r\nimport { useDeleteDayMutation } from \"../../../services/apiSliceMonths\";\r\nimport { ModelDay } from \"../../../sharedModels/modelDay\";\r\nimport MonthPanelDayPrintData from \"../MonthPanelDayPrintData\";\r\nimport { calculateUpdatedCalcHours, deleteDayById } from \"./utilsMonthPanelDay\";\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n  columnIdx: number;\r\n  dayIdx: number;\r\n}\r\n\r\nconst MonthPanelDay = (props: Props) => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const [deleteDay, success] = useDeleteDayMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger\" />\r\n  );\r\n  const { agree } = useSelector((state: RootState) => state.alert);\r\n  const [columnIdx, setColumnIdx] = useState(\"\");\r\n  const [dayId, setDayId] = useState(\"\");\r\n\r\n ;\r\n\r\n  const findDay = {\r\n    ...month?.columns[props.columnIdx].days?.find(day => {\r\n      return day?.id === props.day.id;\r\n    }),\r\n  }\r\n\r\n  const handleAlert = (idx: string, id: string) => {\r\n    setColumnIdx(idx);\r\n    setDayId(id);\r\n    dispatch(printAlert(\"Usunąć dzień?\"));\r\n  };\r\n\r\n  const deleteDayAsync = async () => {\r\n    if (agree && findDay?.id === dayId) {\r\n      const subtractedHours = findDay?.hours;\r\n\r\n      month &&\r\n        (await deleteDay({\r\n          year: yearFromURL,\r\n          month: monthFromURL,\r\n          colIdx: props.columnIdx,\r\n          monthBody: {\r\n            ...month,\r\n            calcHours: calculateUpdatedCalcHours(\r\n              month,\r\n              +columnIdx,\r\n              subtractedHours\r\n            ),\r\n\r\n            columns: deleteDayById({ ...month }, dayId).columns,\r\n          },\r\n        }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    deleteDayAsync();\r\n    dispatch(agreeAlert(false));\r\n    dispatch(closeAlert());\r\n  }, [agree]);\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id}\r\n      index={props.dayIdx}\r\n      isDragDisabled={false}\r\n    >\r\n      {(provided, snapshot) => {\r\n        return (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className={`mb-2 bg-white rounded border ${\r\n              snapshot.isDragging ? \"border-dark\" : \"border-dark-subtle\"\r\n            } `}\r\n          >\r\n            <div\r\n              className=\"px-1 py-2 py-sm-1 rounded\"\r\n              style={{\r\n                borderTop: `8px solid ${props.day?.userColor}`,\r\n                opacity: snapshot.isDragging ? 0.8 : 1,\r\n              }}\r\n            >\r\n              <MonthPanelDayPrintData day={props.day} />\r\n\r\n              <Button\r\n                onClick={() =>\r\n                  handleAlert(props.columnIdx.toString(), props.day.id)\r\n                }\r\n                className=\"d-flex justify-content-between  align-items-center w-100 p-0 bg-transparent border-0 fw-medium text-dark\"\r\n                disabled={success.isLoading}\r\n              >\r\n                <div>{props.day?.hours} h</div>\r\n                <div>{btnContent}</div>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default MonthPanelDay;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport MonthPanelDay from \"./monthPanelDay/MonthPanelDay\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport { ModelColumn } from \"../../sharedModels/modelColumn\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ninterface Props {\r\n  column: ModelColumn;\r\n  columnIdx: number;\r\n}\r\n\r\nconst MonthPanelColumn = (props: Props) => {\r\n  return (\r\n    <Col>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 h-100 overflow-hidden border border-1 border border-top-0\"\r\n              style={{\r\n                backgroundColor: snapshot.isDraggingOver\r\n                  ? \"rgba(0, 0, 0, 0.1)\"\r\n                  : \"rgba(255, 255, 255, 0.2)\",\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {Array.isArray(props.column.days)\r\n                ? props.column.days.map((day: ModelDay, idx: number) => {\r\n                    return (\r\n                      <MonthPanelDay\r\n                        key={UUID()}\r\n                        day={day}\r\n                        columnIdx={props.columnIdx}\r\n                        dayIdx={idx}\r\n                      />\r\n                    );\r\n                  })\r\n                : []}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumn;\r\n","import Col from \"react-bootstrap/Col\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ninterface Props {\r\n  thumbPosition: number;\r\n}\r\n\r\nconst MonthPanelColumnsHeader = (props: Props) => {\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: month?.calcHours?.submittedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: month?.calcHours?.acceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: month?.calcHours?.rejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <Col\r\n            key={headerText}\r\n            className={`text-dark-emphasis fs-responsive bg-white fw-medium p-1 ${\r\n              props.thumbPosition === 0\r\n                ? \"border-bottom border-3 border-white\"\r\n                : \"border-bottom border-3\"\r\n            }`}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </Col>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumnsHeader;\r\n","import { useRef, useState } from \"react\";\r\n\r\nconst useScrollThumbPosition = () => {\r\n  const scrollableRef = useRef(null);\r\n  const [thumbPosition, setThumbPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const element = scrollableRef.current;\r\n\r\n    if (element) {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      const thumbPosition = (scrollTop / maxScrollTop) * 100;\r\n      setThumbPosition(thumbPosition);\r\n    }\r\n  };\r\n\r\n  return { scrollableRef, thumbPosition, handleScroll };\r\n};\r\n\r\nexport default useScrollThumbPosition;\r\n","import { ModelDay } from \"../sharedModels/modelDay\";\r\nimport { ModelColumn } from \"../sharedModels/modelColumn\";\r\n\r\nconst getHoursFromColumn = (days: ModelDay[]) => {\r\n  return days?.reduce((acu, day) => {\r\n    const dayHours = day?.hours || 0;\r\n    return acu + dayHours;\r\n  }, 0);\r\n};\r\n\r\nconst getHoursFromColumns = (columns: ModelColumn[]) => {\r\n  const submittedHours = getHoursFromColumn(columns[0]?.days);\r\n  const acceptedHours = getHoursFromColumn(columns[1]?.days);\r\n  const rejectedHours = getHoursFromColumn(columns[2]?.days);\r\n\r\n  return { submittedHours, acceptedHours, rejectedHours };\r\n};\r\n\r\nexport default getHoursFromColumns;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSliceMonths\";\r\nimport MonthPanelColumn from \"../MonthPanelColumn\";\r\nimport MonthPanelColumnsHeader from \"../monthPanelColumnsHeader.tsx/MonthPanelColumnsHeader\";\r\nimport useScrollThumbPosition from \"./useScrollThumbPosition\";\r\nimport { addDaysToColumns, handleDragDrop } from \"./utilsMonthPanelColumns\";\r\nimport useWindowWidth from \"../../../hooks/useWindowWidth\";\r\nimport getHoursFromColumns from \"../../../utils/getHoursFromColumns\";\r\n\r\nconst MonthPanelColumns = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const [updateMonth] = useUpdateMonthMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const columnsWithDays = month && addDaysToColumns(month?.columns);\r\n  const [columns, setColumns] = useState<ModelColumn[]>([]);\r\n  const [executeUpdateMonth, setExecuteUpdateMonth] = useState(false);\r\n  const { submittedHours, acceptedHours, rejectedHours } =\r\n    getHoursFromColumns(columns);\r\n  const { scrollableRef, thumbPosition, handleScroll } =\r\n    useScrollThumbPosition();\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  useEffect(() => {\r\n    if (columnsWithDays) {\r\n      setColumns(columnsWithDays);\r\n    }\r\n  }, [month?.columns]);\r\n\r\n  useEffect(() => {\r\n    if (columns.length > 0 && month) {\r\n      updateMonth({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        monthBody: {\r\n          ...month,\r\n          columns: columns,\r\n          calcHours: {\r\n            ...month?.calcHours,\r\n            currentHours:\r\n              month?.calcHours?.allHours -\r\n              submittedHours -\r\n              acceptedHours -\r\n              rejectedHours +\r\n              rejectedHours,\r\n            submittedHours,\r\n            acceptedHours,\r\n            rejectedHours,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [executeUpdateMonth]);\r\n\r\n  const handleDragEnd = (results: DropResult) => {\r\n    month &&\r\n      handleDragDrop(\r\n        results,\r\n        month?.calcHours.currentHours,\r\n        columns,\r\n        setColumns\r\n      );\r\n    setExecuteUpdateMonth(prev => !prev);\r\n  };\r\n\r\n  const rowStyles = \"d-flex column-gap-1\";\r\n\r\n  return (\r\n    <div\r\n      ref={scrollableRef}\r\n      onScroll={handleScroll}\r\n      className=\"p-0 overflow-y-scroll h-100\"\r\n      style={{\r\n        maxHeight:\r\n          windowWidth >= 500\r\n            ? \"calc(100% - 32px)\"\r\n            : \"calc(100% - 32px - 2.5rem)\",\r\n      }}\r\n    >\r\n      <div className={`${rowStyles} sticky-top`}>\r\n        <MonthPanelColumnsHeader thumbPosition={thumbPosition} />\r\n      </div>\r\n\r\n      <div className={`${rowStyles}`} style={{ minHeight: \"calc(100% - 35px)\" }}>\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          {columns?.map((column: ModelColumn, idx: number) => {\r\n            return (\r\n              <MonthPanelColumn\r\n                key={column.id}\r\n                column={column}\r\n                columnIdx={idx}\r\n              />\r\n            );\r\n          })}\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumns;\r\n","import { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\n\r\nexport const addDaysToColumns = (columns: ModelColumn[]) => {\r\n  if (!Array.isArray(columns)) {\r\n    return [];\r\n  }\r\n  return columns?.map((column: ModelColumn) => {\r\n    if (!column?.hasOwnProperty(\"days\")) {\r\n      return { ...column, days: [] };\r\n    }\r\n    return column;\r\n  });\r\n};\r\n\r\nexport const handleDragDrop = (\r\n  results: any,\r\n  currentHours: number,\r\n  columns: ModelColumn[],\r\n  setColumns: React.Dispatch<React.SetStateAction<ModelColumn[]>>\r\n) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  const hoursInDay = columns[2]?.days[source.index]?.hours;\r\n  if (source.droppableId === \"rejected\" && currentHours < hoursInDay) return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns?.findIndex((column: ModelColumn) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns?.findIndex((column: ModelColumn) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = columns && [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: ModelColumn) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport HoursSummary from \"../../../components/HoursSummary\";\r\nimport MonthPanelColumns from \"../monthPanelColmns/MonthPanelColumns\";\r\nimport Alert from \"../../../components/alert/Alert\";\r\n\r\nconst MonthPanelContent = () => {\r\n  const { pathname } = useLocation();\r\n  const [animate, setAnimate] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setAnimate(false);\r\n    const timeoutId = setTimeout(() => {\r\n      setAnimate(true);\r\n    });\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [pathname]);\r\n\r\n  return (\r\n    <>\r\n      {animate && (\r\n        <div\r\n          className=\"py-1 opacityAnimation\"\r\n          style={{\r\n            maxWidth: \"1000px\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          {/* <Alert/> */}\r\n          <HoursSummary />\r\n          <MonthPanelColumns />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelContent;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { printPanelContent } from \"../../../utils/printPanelContent\";\r\nimport MonthPanelContent from \"./MonthPanelContent\";\r\n\r\nconst useRequestMonthPanel = () => {\r\n  const { month, error, isLoading } = useSelector(\r\n    (state: RootState) => state.monthPanel\r\n  );\r\n\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  let requestState;\r\n\r\n  if (isLoading) {\r\n    requestState = printPanelContent(\r\n      <Spinner animation=\"border\" variant=\"secondary\" className=\"fs-6\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      requestState = printPanelContent(\r\n        <div className=\"text-danger text-center \">\r\n          <> Błąd: {errMsg} </> <br />\r\n          <>Odśwież stronę</>\r\n        </div>\r\n      );\r\n    }\r\n  } else if (!month || month?.id === \"\") {\r\n    requestState = printPanelContent(\r\n      <div>\r\n        Brak danych z miesiąca {monthURLStringFormat}. Zapisz miesiąc w\r\n        ustawieniach.\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    requestState = (\r\n      <>\r\n        <MonthPanelContent />\r\n      </>\r\n    );\r\n  }\r\n  return { requestState };\r\n};\r\n\r\nexport default useRequestMonthPanel;\r\n","import useRequestMonthPanel from \"./useRequestMonthPanel\";\r\nimport IndexContainer from \"../../../components/IndexContainer\";\r\nimport useReduxMonthBody from \"../../../hooks/updateReduxDatabase/useReduxMonthData\";\r\nimport useReduxListMonths from \"../../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport useReduxListUsers from \"../../../hooks/updateReduxDatabase/useReduxListUsers\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  // useReduxMonthBody();\r\n  // useReduxListMonths();\r\n\r\n  const { requestState } = useRequestMonthPanel();\r\n\r\n  return <IndexContainer>{requestState}</IndexContainer>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","export const printPanelContent = (contentJSX: React.ReactNode) => (\r\n  <div\r\n    className=\" d-flex justify-content-center align-items-center fs-3 text-warning text-center\"\r\n    style={{\r\n      maxWidth: \"1000px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    }}\r\n  >\r\n    {contentJSX}\r\n  </div>\r\n);"],"names":["props","windowWidth","useWindowWidth","_jsxs","className","style","height","overflow","position","children","_jsx","width","maxWidth","success","btnText","btnContent","isLoading","Spinner","animation","size","variant","monthURL","useLocation","pathname","slice","test","_Intl$DateTimeFormat","monthURLToDateFormat","Date","monthURLStringFormat","Intl","DateTimeFormat","year","month","timeZone","format","split","yearFromURL","monthFromURL","isMonthInURL","_useState","useState","window","innerWidth","_useState2","_slicedToArray","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","_month$calcHours","_month$calcHours2","_month$calcHours3","_month$calcHours4","useSelector","state","monthPanel","calcHours","allHours","concat","currentHours","_props$day","dateToPrint","day","date","_props$day2","_props$day3","_Fragment","userName","place","TbArrowBigRightLineFilled","color","MdFactory","deleteDayById","obj","idToDelete","updatedColumns","columns","map","column","_column$days","updatedDays","days","filter","id","_objectSpread","calculateUpdatedCalcHours","columnIdx","subtractedHours","submittedHours","acceptedHours","rejectedHours","_month$columns$props$","dispatch","useDispatch","_useURLValues","useURLValues","_useDeleteDayMutation","useDeleteDayMutation","_useDeleteDayMutation2","deleteDay","useHTTPState","RiDeleteBin6Line","agree","alert","setColumnIdx","_useState3","_useState4","dayId","setDayId","findDay","find","deleteDayAsync","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","hours","t0","colIdx","monthBody","stop","apply","arguments","agreeAlert","closeAlert","Draggable","draggableId","index","dayIdx","isDragDisabled","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","borderTop","userColor","opacity","MonthPanelDayPrintData","Button","onClick","idx","toString","printAlert","disabled","Col","Droppable","droppableId","droppableProps","backgroundColor","isDraggingOver","Array","isArray","MonthPanelDay","UUID","placeholder","headerText","counter","thumbPosition","scrollableRef","useRef","setThumbPosition","handleScroll","element","current","scrollTop","scrollHeight","clientHeight","getHoursFromColumn","reduce","acu","_columns$","_columns$2","_columns$3","_useUpdateMonthMutati","useUpdateMonthMutation","updateMonth","columnsWithDays","hasOwnProperty","addDaysToColumns","setColumns","executeUpdateMonth","setExecuteUpdateMonth","_getHoursFromColumns","getHoursFromColumns","_useScrollThumbPositi","useScrollThumbPosition","length","rowStyles","onScroll","maxHeight","MonthPanelColumnsHeader","minHeight","DragDropContext","onDragEnd","results","_columns$$days$source","source","destination","hoursInDay","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","MonthPanelColumn","animate","setAnimate","timeoutId","setTimeout","clearTimeout","HoursSummary","MonthPanelColumns","requestState","_useSelector","error","useMonthURLToString","printPanelContent","errMsg","status","MonthPanelContent","useRequestMonthPanel","IndexContainer","contentJSX"],"sourceRoot":""}
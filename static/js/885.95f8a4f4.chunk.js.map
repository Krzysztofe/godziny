{"version":3,"file":"static/js/885.95f8a4f4.chunk.js","mappings":"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","sources":["data/dataCurrentDates.tsx","hooks/useHTTPState.tsx","hooks/useURLValues.tsx","pages/monthPanel/MonthPanelDayPrintData.tsx","pages/monthPanel/MonthPanelDay.tsx","pages/monthPanel/MonthPanelColumn.tsx","pages/monthPanel/monthPanelColumnsheader.tsx/MonthPanelColumnsHeader.tsx","pages/monthPanel/utilsMonthPanelColumns.tsx","hooks/useHoursSum.tsx","pages/monthPanel/monthPanelColmns/MonthPanelColumns.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/validationMonthPanelHeaderForm.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/useMonthPanelHeaderFormik.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/MonhPanelHeaderForm.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderCollapse.tsx","hooks/useMonthURLToString.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderSummary.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeader.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx"],"sourcesContent":["const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateIn14Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateIn60Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateIn14Days = formatDate(futureDateIn14Days);\r\nexport const dateIn60Days = formatDate(futureDateIn60Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\n\r\n\r\nconst useHTTPState = (success: any, btnText: string | ReactNode) => {\r\n\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        title: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { ModelDay } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n}\r\n\r\nconst MonthPanelDayPrintData = (props: Props) => {\r\n  let dateToPrint;\r\n\r\n  if (!props?.day?.date) {\r\n    return <div>Brak danych</div>;\r\n  } else {\r\n    const date = new Date(props.day.date);\r\n    dateToPrint = new Intl.DateTimeFormat(\"pl-PL\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n    }).format(date);\r\n    return (\r\n      <div className=\"px-1 py-2 py-sm-1\">\r\n        <div\r\n          className=\"d-flex justify-content-between\"\r\n          style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n        >\r\n          <div>{props.day?.userName}</div>\r\n          <div>\r\n            {props.day?.hours} <FiClock className=\"text-primary\" />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"d-flex justify-content-between\">\r\n          <div>{dateToPrint ? dateToPrint : \"\"}</div>\r\n          <div>\r\n            {props.day?.place === \"Poza\" ? (\r\n              <TbArrowBigRightLineFilled className=\"text-success\" />\r\n            ) : (\r\n              <MdFactory className=\"text-danger\" />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MonthPanelDayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Swal from \"sweetalert2\";\r\nimport { ModelDay } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport {\r\n  useDeleteDayMutation,\r\n  useMonthDataQuery,\r\n} from \"../../services/apiSlice\";\r\nimport MonthPanelDayPrintData from \"./MonthPanelDayPrintData\";\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n  columnIdx: number;\r\n  dayIdx: number;\r\n}\r\n\r\nconst MonthPanelDay = (props: Props) => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const [deleteDay, success] = useDeleteDayMutation();\r\n  const { btnContent } = useHTTPState(success, \"Usuń\");\r\n\r\n  const handleDelete = async (idx: number, id: string) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const daysBodyPUTRequest = dataMonth?.columns[idx]?.days?.filter(\r\n          (day: ModelDay) => {\r\n            return day?.id !== id;\r\n          }\r\n        );\r\n\r\n        await deleteDay({\r\n          year: yearFromURL,\r\n          month: monthFromURL,\r\n          colIdx: props.columnIdx,\r\n          daysBody: daysBodyPUTRequest,\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id}\r\n      index={props.dayIdx}\r\n      isDragDisabled={false}\r\n    >\r\n      {provided => {\r\n        return (\r\n          <div\r\n            className=\"bg-white card mb-2\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <MonthPanelDayPrintData day={props.day} />\r\n            <Button\r\n              variant=\"info\"\r\n              size=\"sm\"\r\n              className=\"rounded-top-0 w-100 fw-medium \"\r\n              onClick={() => handleDelete(props.columnIdx, props.day.id)}\r\n              disabled={success.isLoading}\r\n            >\r\n              {btnContent}\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default MonthPanelDay;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport MonthPanelDay from \"./MonthPanelDay\";\r\nimport { ModelColumn } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\nimport { ModelDay } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\ninterface Props {\r\n  column: ModelColumn;\r\n  columnIdx: number;\r\n}\r\n\r\nconst MonthPanelColumn = (props: Props) => {\r\n  return (\r\n    <div className=\"w-100\">\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 bg-primary-subtle h-100\"\r\n            >\r\n              {Array.isArray(props.column.days)\r\n                ? props.column.days.map((day: ModelDay, idx: number) => {\r\n                    return (\r\n                      <MonthPanelDay\r\n                        key={crypto.randomUUID()}\r\n                        day={day}\r\n                        columnIdx={props.columnIdx}\r\n                        dayIdx={idx}\r\n                      />\r\n                    );\r\n                  })\r\n                : []}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumn;\r\n","import useURLValues from \"../../../hooks/useURLValues\";\r\nimport {\r\n  useCalcDataQuery\r\n} from \"../../../services/apiSlice\";\r\n\r\nconst MonthPanelColumnsHeader = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: dataCalc?.submittedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: dataCalc?.acceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: dataCalc?.rejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <div\r\n            key={headerText}\r\n            className=\"p-1 bg-primary-subtle text-dark-emphasis fw-medium w-100 border-4 border-bottom border-white\"\r\n            style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumnsHeader;\r\n","import { DropResult } from \"react-beautiful-dnd\";\r\nimport { ModelColumn } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\nexport const addDaysToColumns = (columns: ModelColumn[]) => {\r\n  if (!Array.isArray(columns)) {\r\n    return [];\r\n  }\r\n  return columns?.map((column: ModelColumn) => {\r\n    if (!column?.hasOwnProperty(\"days\")) {\r\n      return { ...column, days: [] };\r\n    }\r\n    return column;\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const handleDragDrop = (\r\n  // results: DropResult,\r\n  results: any,\r\n  columns: ModelColumn[],\r\n  setColumns: React.Dispatch<React.SetStateAction<ModelColumn[]>>\r\n) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns?.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns?.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = columns && [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import useURLValues from \"./useURLValues\";\r\nimport { useMonthDataQuery } from \"../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../pages/monthPanel/utilsMonthPanelColumns\";\r\n// import { ModelDay } from \"../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\ninterface ModelDay {\r\n  id: string;\r\n  userName: string;\r\n  date: string;\r\n  hours: number;\r\n  place: string;\r\n}\r\n\r\nconst useHoursSum = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  if (dataMonth) {\r\n    const columnsWithDays = addDaysToColumns(dataMonth?.columns);\r\n\r\n    const submittedHoursSum =\r\n      dataMonth &&\r\n      columnsWithDays &&\r\n      columnsWithDays[0]?.days?.reduce((sum: number, day: ModelDay | null) => {\r\n        const dayHours = day?.hours ?? 0;\r\n        return sum + dayHours;\r\n      }, 0);\r\n\r\n    const acceptedHoursSum =\r\n      dataMonth &&\r\n      columnsWithDays &&\r\n      columnsWithDays[1]?.days?.reduce((sum: number, day: ModelDay | null) => {\r\n        const dayHours = day?.hours ?? 0;\r\n        return sum + dayHours;\r\n      }, 0);\r\n\r\n    const rejectedHoursSum =\r\n      dataMonth &&\r\n      columnsWithDays &&\r\n      columnsWithDays[2]?.days?.reduce((sum: number, day: ModelDay | null) => {\r\n        const dayHours = day?.hours ?? 0;\r\n        return sum + dayHours;\r\n      }, 0);\r\n\r\n    return { submittedHoursSum, acceptedHoursSum, rejectedHoursSum };\r\n  } else {\r\n    const submittedHoursSum = 0;\r\n    const acceptedHoursSum = 0;\r\n    const rejectedHoursSum = 0;\r\n    return { submittedHoursSum, acceptedHoursSum, rejectedHoursSum };\r\n  }\r\n};\r\n\r\nexport default useHoursSum;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport {\r\n  useMonthDataQuery,\r\n  useUpdateCalcMutation,\r\n  useUpdateColumnsMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport MonthPanelColumn from \"../MonthPanelColumn\";\r\nimport MonthPanelColumnsHeader from \"../monthPanelColumnsheader.tsx/MonthPanelColumnsHeader\";\r\nimport { addDaysToColumns, handleDragDrop } from \"../utilsMonthPanelColumns\";\r\nimport useHoursSum from \"../../../hooks/useHoursSum\";\r\nimport { ModelColumn } from \"../../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\nconst MonthPanelColumns = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  const [updateColumns] = useUpdateColumnsMutation();\r\n  const [updateCalc] = useUpdateCalcMutation();\r\n  const columnsWithDays = dataMonth?.columns\r\n    ? addDaysToColumns(dataMonth.columns)\r\n    : [];\r\n  const { submittedHoursSum, acceptedHoursSum, rejectedHoursSum } =\r\n    useHoursSum();\r\n\r\n  const [columns, setColumns] = useState<ModelColumn[]>([]);\r\n  const [results, setResults] = useState<DropResult | null>(null);\r\n\r\n  useEffect(() => {\r\n    setColumns(columnsWithDays);\r\n  }, [dataMonth]);\r\n\r\n  useEffect(() => {\r\n    if (results !== null) {\r\n      updateColumns({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        columnsBody: columns,\r\n      });\r\n    }\r\n  }, [results]);\r\n\r\n  useEffect(() => {\r\n    updateCalc({\r\n      year: yearFromURL,\r\n      month: monthFromURL,\r\n      allHours: {\r\n        ...dataMonth?.calc,\r\n        currentHours:\r\n          (dataMonth?.calc?.allHours ?? 0) -\r\n          submittedHoursSum -\r\n          acceptedHoursSum -\r\n          rejectedHoursSum +\r\n          rejectedHoursSum,\r\n        submittedHours: submittedHoursSum,\r\n        acceptedHours: acceptedHoursSum,\r\n        rejectedHours: rejectedHoursSum,\r\n      },\r\n    });\r\n  }, [dataMonth]);\r\n\r\n  const handleDragEnd = (results: DropResult) => {\r\n    handleDragDrop(results, columns, setColumns);\r\n    setResults(results);\r\n  };\r\n\r\n  const scrollableRef = useRef(null);\r\n  const [thumbPosition, setThumbPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const element = scrollableRef.current;\r\n\r\n    if (element) {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      const thumbPosition = (scrollTop / maxScrollTop) * 100;\r\n      setThumbPosition(thumbPosition);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main\r\n        ref={scrollableRef}\r\n        onScroll={handleScroll}\r\n        className=\"mb-2 overflow-y-scroll \"\r\n        style={{ top: `${thumbPosition}%` }}\r\n      >\r\n        <Container className=\"mx-0 ms-sm-auto sticky-top d-flex column-gap-2\">\r\n          <MonthPanelColumnsHeader />\r\n        </Container>\r\n        <Container\r\n          className=\"mx-0 ms-sm-auto mb-5 d-flex column-gap-2\"\r\n          style={{ height: \"fit-content\" }}\r\n        >\r\n          <DragDropContext onDragEnd={handleDragEnd}>\r\n            {columns?.map((column: ModelColumn, idx: number) => {\r\n              return (\r\n                <MonthPanelColumn\r\n                  key={column.id}\r\n                  column={column}\r\n                  columnIdx={idx}\r\n                />\r\n              );\r\n            })}\r\n          </DragDropContext>\r\n        </Container>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumns;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport useURLValues from \"../../../../hooks/useURLValues\";\r\nimport {\r\n  useAddAllHoursMutation,\r\n  useCalcDataQuery,\r\n} from \"../../../../services/apiSlice\";\r\nimport { validationSchema } from \"./validationMonthPanelHeaderForm\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useMonthPanelHeaderFormik = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async values => {\r\n      if (\r\n        dataCalc?.submittedHours + dataCalc?.acceptedHours >\r\n        +formik.values.allHours\r\n      )\r\n        return;\r\n\r\n      await addAllHours({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        allHours: +values.allHours,\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useMonthPanelHeaderFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport useHTTPState from \"../../../../hooks/useHTTPState\";\r\nimport { useCalcDataQuery } from \"../../../../services/apiSlice\";\r\nimport \"./_formHeaderMonthPAnel.scss\";\r\nimport useMonthPanelHeaderFormik from \"./useMonthPanelHeaderFormik\";\r\nimport useURLValues from \"../../../../hooks/useURLValues\";\r\n\r\nconst MonhPanelHeaderForm = () => {\r\n  const { formik, success } = useMonthPanelHeaderFormik();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const { btnContent } = useHTTPState(success, \"Zapisz liczbę godzin\");\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit} className=\"my-2\">\r\n      <Form.Control\r\n        type=\"number\"\r\n        name=\"allHours\"\r\n        min={0}\r\n        max={320}\r\n        value={formik.values.allHours}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        placeholder=\"Liczba\"\r\n        size=\"sm\"\r\n        className=\"p-0 px-1 mx-auto mb-2 border border-primary\"\r\n        style={{ minHeight: 0, cursor: \"pointer\", width: \"fit-content\" }}\r\n      />\r\n\r\n      <div\r\n        className=\"text-danger d-block mt-0 fs-8 text-center\"\r\n        style={{ height: \"0.7rem\" }}\r\n      >\r\n        {dataCalc?.submittedHours + dataCalc?.acceptedHours >\r\n        +formik.values.allHours\r\n          ? `Podaj ilość godzin większą od ${\r\n              dataCalc?.submittedHours + dataCalc?.acceptedHours\r\n            } `\r\n          : \"\"}\r\n      </div>\r\n\r\n      <Form.Group className=\"mt-2 d-flex align-items-center w-100\">\r\n        <div className=\"fw-medium\">0</div>\r\n        <Form.Range\r\n          name=\"allHours\"\r\n          min={0}\r\n          max={320}\r\n          value={formik.values.allHours}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          className=\"form-range custom-range mx-2 medium\"\r\n          style={{\r\n            height: 10,\r\n            background: `linear-gradient(to right, olive 0%, red ${formik.values.allHours}%, transparent ${formik.values.allHours}%, transparent 100%)`,\r\n          }}\r\n        />\r\n        <div className=\"fw-medium\">320</div>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"info\"\r\n        size=\"sm\"\r\n        className=\"fw-medium d-block mx-auto mt-2 col-sm-4 col-md-3 col-lg-2\"\r\n        disabled={success.isLoading}\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default MonhPanelHeaderForm;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport MonthPanelHeaderForm from \"./formHeaderMonthPanel/MonhPanelHeaderForm\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\nconst MonthPanelHeaderCollapse = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        variant=\"info\"\r\n        className=\"fw-medium p-1 w-100 mt-1 d-flex justify-content-center align-items-center\"\r\n      >\r\n        Liczba godzin w miesiącu\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-1 fw-medium\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div className=\"bg-primary-subtle rounded p-1\">\r\n          <MonthPanelHeaderForm />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderCollapse;\r\n","import { useParams } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { monthURL } = useParams();\r\n  const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n\r\n  const monthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return { monthURLStringFormat };\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { useCalcDataQuery } from \"../../../services/apiSlice\";\r\n\r\nconst MonthPanelHeaderSummary = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  return (\r\n    <>\r\n      <div className=\"text-capitalize fw-medium mt-2 text-center d-sm-none\">\r\n        {monthURLStringFormat}\r\n      </div>\r\n\r\n      <div className=\" d-flex justify-content-center my-2 fw-medium position-relative\">\r\n        <div className=\"text-capitalize fw-medium d-none d-sm-block  position-absolute end-0\">\r\n          {monthURLStringFormat}\r\n        </div>\r\n\r\n        <div className=\"col-3 text-end\">Wszystkie</div>\r\n        <div className=\"mx-2\">\r\n          {dataCalc?.allHours} -{\" \"}\r\n          <span\r\n            className={`${dataCalc?.currentHours < 0 ? \"text-danger\" : \"\"}`}\r\n          >\r\n            {dataCalc?.currentHours}\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`col-3 ${dataCalc?.currentHours < 0 ? \"text-danger\" : \"\"}`}\r\n        >\r\n          {dataCalc?.currentHours < 0 ? \"Brak\" : \"Dostępne\"}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderSummary;\r\n","import Container from \"react-bootstrap/Container\";\r\nimport MonthPanelHeaderCollapse from \"./MonthPanelHeaderCollapse\";\r\nimport MonthPanelHeaderSummary from \"./MonthPanelHeaderSummary\";\r\n\r\nconst MonthPanelHeader = () => {\r\n  return (\r\n    <header className=\"me-3\">\r\n      <Container className=\"mx-0 ms-sm-auto \">\r\n        <MonthPanelHeaderCollapse />\r\n        <MonthPanelHeaderSummary />\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeader;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { currMonthDateToString } from \"../../../data/dataCurrentDates\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { useMonthDataQuery, useMonthsDataQuery } from \"../../../services/apiSlice\";\r\nimport MonthPanelColumns from \"../monthPanelColmns/MonthPanelColumns\";\r\nimport MonthPanelHeader from \"../monthPanelHeader/MonthPanelHeader\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const {  yearFromURL, monthFromURL } = useURLValues();\r\n  const { data, error, isLoading } = useMonthsDataQuery(undefined);\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  \r\n\r\n  let panelContent;\r\n\r\n  if (isLoading) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Spinner animation=\"border\" variant=\"secondary\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      </main>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      return (\r\n        <main\r\n          className=\"d-flex justify-content-center align-items-center\"\r\n          style={{ height: \"100vh\" }}\r\n        >\r\n          <h3 className=\"text-danger col-5\">\r\n            <> Błąd: {errMsg} </>\r\n          </h3>\r\n        </main>\r\n      );\r\n    }\r\n  } else if (!data) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h5 className=\"text-warning text-center col-5\">\r\n          Brak  miesięcy zapisanych w bazie danych. Dodaj miesiąc za pomocą formularza\r\n        </h5>\r\n      </main>\r\n    );\r\n  } else if (!dataMonth) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h3 className=\"text-warning text-center col-5\">\r\n          Brak danych z miesiąca {currMonthDateToString}. Dodaj miesiąc za pomocą\r\n          formularza\r\n        </h3>\r\n      </main>\r\n    );\r\n  } else {\r\n    panelContent = (\r\n      <main className=\"d-flex flex-column\" style={{ height: \"100vh\" }}>\r\n        <MonthPanelHeader />\r\n        <MonthPanelColumns />\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return <>{panelContent}</>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n"],"names":["today","Date","formatDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","futureDateIn14Days","getTime","futureDateIn60Days","currYearDigits","currMonthDigits","dateIn14Days","dateIn60Days","currMonthDateToString","Intl","DateTimeFormat","timeZone","format","success","btnText","useEffect","isError","error","errMsg","status","Swal","title","confirmButtonColor","btnContent","isLoading","_jsx","Spinner","animation","size","variant","children","className","monthURL","useLocation","pathname","split","slice","yearFromURL","monthFromURL","props","_props$day","dateToPrint","_props$day2","_props$day3","_props$day4","_jsxs","style","fontSize","userName","hours","FiClock","place","TbArrowBigRightLineFilled","MdFactory","_useURLValues","useURLValues","dataMonth","useMonthDataQuery","data","_useDeleteDayMutation","useDeleteDayMutation","_useDeleteDayMutation2","_slicedToArray","deleteDay","useHTTPState","handleDelete","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","idx","id","wrap","_context2","prev","next","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","_dataMonth$columns$id","_dataMonth$columns$id2","daysBodyPUTRequest","_context","isConfirmed","columns","days","filter","colIdx","columnIdx","daysBody","stop","_x3","apply","arguments","_x","_x2","Draggable","draggableId","index","dayIdx","isDragDisabled","provided","_objectSpread","draggableProps","dragHandleProps","ref","innerRef","MonthPanelDayPrintData","Button","onClick","disabled","Droppable","droppableId","column","snapshot","droppableProps","Array","isArray","map","MonthPanelDay","crypto","randomUUID","placeholder","dataCalc","useCalcDataQuery","_Fragment","headerText","counter","submittedHours","acceptedHours","rejectedHours","addDaysToColumns","hasOwnProperty","_columnsWithDays$","_columnsWithDays$$day","_columnsWithDays$2","_columnsWithDays$2$da","_columnsWithDays$3","_columnsWithDays$3$da","columnsWithDays","submittedHoursSum","reduce","sum","_day$hours","acceptedHoursSum","_day$hours2","rejectedHoursSum","_day$hours3","_useUpdateColumnsMuta","useUpdateColumnsMutation","updateColumns","_useUpdateCalcMutatio","useUpdateCalcMutation","updateCalc","_useHoursSum","useHoursSum","_useState","useState","_useState2","setColumns","_useState3","_useState4","results","setResults","columnsBody","_dataMonth$calc$allHo","_dataMonth$calc","allHours","calc","currentHours","scrollableRef","useRef","_useState5","_useState6","thumbPosition","setThumbPosition","onScroll","element","current","scrollTop","scrollHeight","clientHeight","top","Container","MonthPanelColumnsHeader","height","DragDropContext","onDragEnd","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","MonthPanelColumn","validationSchema","yup","max","required","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","addAllHours","formik","useFormik","initialValues","onSubmit","_onSubmit","values","abrupt","_useMonthPanelHeaderF","useMonthPanelHeaderFormik","Form","handleSubmit","Control","type","name","min","value","onChange","handleChange","onBlur","handleBlur","minHeight","cursor","width","Group","Range","background","open","setOpen","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","MonthPanelHeaderForm","useParams","monthURLToDateFormat","monthURLStringFormat","useMonthURLToString","MonthPanelHeaderCollapse","MonthPanelHeaderSummary","panelContent","_useMonthsDataQuery","useMonthsDataQuery","undefined","MonthPanelHeader","MonthPanelColumns"],"sourceRoot":""}
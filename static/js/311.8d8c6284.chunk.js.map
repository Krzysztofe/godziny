{"version":3,"file":"static/js/311.8d8c6284.chunk.js","mappings":"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","sources":["data/dataCurrentDates.tsx","hooks/useHTTPState.tsx","hooks/useURLValues.tsx","pages/monthPanel/MonthPanelDayPrintData.tsx","pages/monthPanel/MonthPanelDay.tsx","pages/monthPanel/MonthPanelColumn.tsx","pages/monthPanel/monthPanelColumnsheader.tsx/MonthPanelColumnsHeader.tsx","pages/monthPanel/utilsMonthPanelColumns.tsx","hooks/useHoursSum.tsx","pages/monthPanel/monthPanelColmns/useScrollThumbPosition.tsx","pages/monthPanel/monthPanelColmns/MonthPanelColumns.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/validationMonthPanelHeaderForm.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/useMonthPanelHeaderFormik.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/MonhPanelHeaderForm.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderCollapse.tsx","hooks/useMonthURLToString.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderSummary.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeader.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx"],"sourcesContent":["const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext14Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext60Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext14Days = formatDate(futureDateInNext14Days);\r\nexport const dateInNext60Days = formatDate(futureDateInNext60Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\n\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        title: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { ModelDay } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n}\r\n\r\nconst MonthPanelDayPrintData = (props: Props) => {\r\n  let dateToPrint;\r\n\r\n  if (!props?.day?.date) {\r\n    return <div>Brak danych</div>;\r\n  } else {\r\n    const date = new Date(props.day.date);\r\n    dateToPrint = new Intl.DateTimeFormat(\"pl-PL\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n    }).format(date);\r\n    return (\r\n      <div className=\"\">\r\n        <div className=\"d-flex justify-content-between fs-7\">\r\n          <div>{props.day?.userName}</div>\r\n\r\n          <div>\r\n            {props.day?.place === \"Poza\" ? (\r\n              <TbArrowBigRightLineFilled style={{ color: \"rgb(80,173,150)\" }} />\r\n            ) : (\r\n              <MdFactory style={{ color: \"rgb(255, 181, 9)\" }} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"d-flex fw-medium justify-content-between\">\r\n          <div>{dateToPrint ? dateToPrint : \"\"}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MonthPanelDayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Swal from \"sweetalert2\";\r\nimport { ModelDay } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport {\r\n  useDeleteDayMutation,\r\n  useMonthDataQuery,\r\n} from \"../../services/apiSlice\";\r\nimport MonthPanelDayPrintData from \"./MonthPanelDayPrintData\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n  columnIdx: number;\r\n  dayIdx: number;\r\n}\r\n\r\nconst MonthPanelDay = (props: Props) => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const [deleteDay, success] = useDeleteDayMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger\" />\r\n  );\r\n\r\n  const handleDelete = async (idx: number, id: string) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const daysBodyPUTRequest = dataMonth?.columns[idx]?.days?.filter(\r\n          (day: ModelDay) => {\r\n            return day?.id !== id;\r\n          }\r\n        );\r\n\r\n        await deleteDay({\r\n          year: yearFromURL,\r\n          month: monthFromURL,\r\n          colIdx: props.columnIdx,\r\n          daysBody: daysBodyPUTRequest || [],\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id}\r\n      index={props.dayIdx}\r\n      isDragDisabled={false}\r\n    >\r\n      {(provided, snapshot) => {\r\n        return (\r\n          <div\r\n            className={`bg-white card mb-2 px-1 py-2 py-sm-1 ${\r\n              snapshot.isDragging ? \"border-dark\" : \"border\"\r\n            }`}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <MonthPanelDayPrintData day={props.day} />\r\n\r\n            <Button\r\n              onClick={() => handleDelete(props.columnIdx, props.day.id)}\r\n              className=\"d-flex justify-content-between  align-items-center p-0 bg-transparent border-0\"\r\n              disabled={success.isLoading}\r\n            >\r\n              <div className=\"d-flex align-items-center fs-7\">\r\n                {props.day?.hours} <FiClock className=\"  ms-1\" />\r\n              </div>\r\n              <div className=\"d-flex align-items-center\">{btnContent}</div>\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default MonthPanelDay;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport MonthPanelDay from \"./MonthPanelDay\";\r\nimport { ModelColumn } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\nimport { ModelDay } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\ninterface Props {\r\n  column: ModelColumn;\r\n  columnIdx: number;\r\n}\r\n\r\nconst MonthPanelColumn = (props: Props) => {\r\n  return (\r\n    <Col className=\"p-0\">\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className={`p-1 h-100 ${\r\n                snapshot.isDraggingOver ? \"bg-dark-subtle\" : \"bg-primary\"\r\n              }`}\r\n            >\r\n              {Array.isArray(props.column.days)\r\n                ? props.column.days.map((day: ModelDay, idx: number) => {\r\n                    return (\r\n                      <MonthPanelDay\r\n                        key={crypto.randomUUID()}\r\n                        day={day}\r\n                        columnIdx={props.columnIdx}\r\n                        dayIdx={idx}\r\n                      />\r\n                    );\r\n                  })\r\n                : []}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumn;\r\n","import useURLValues from \"../../../hooks/useURLValues\";\r\nimport { useCalcDataQuery } from \"../../../services/apiSlice\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\ninterface Props {\r\n  thumbPosition: number;\r\n}\r\n\r\nconst MonthPanelColumnsHeader = (props: Props) => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: dataCalc?.submittedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: dataCalc?.acceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: dataCalc?.rejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <Col\r\n            key={headerText}\r\n            className={`bg-primary text-dark-emphasis fw-medium p-1 ${\r\n              props.thumbPosition === 0\r\n                ? \"\"\r\n                : \" border-bottom border-1 border-dark-subtle\"\r\n            }`}\r\n            style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </Col>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumnsHeader;\r\n","import { DropResult } from \"react-beautiful-dnd\";\r\nimport { ModelColumn } from \"../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\nexport const addDaysToColumns = (columns: ModelColumn[]) => {\r\n  if (!Array.isArray(columns)) {\r\n    return [];\r\n  }\r\n  return columns?.map((column: ModelColumn) => {\r\n    if (!column?.hasOwnProperty(\"days\")) {\r\n      return { ...column, days: [] };\r\n    }\r\n    return column;\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const handleDragDrop = (\r\n  // results: DropResult,\r\n  results: any,\r\n  columns: ModelColumn[],\r\n  setColumns: React.Dispatch<React.SetStateAction<ModelColumn[]>>\r\n) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns?.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns?.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = columns && [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import useURLValues from \"./useURLValues\";\r\nimport { useMonthDataQuery } from \"../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../pages/monthPanel/utilsMonthPanelColumns\";\r\nimport { ModelDay } from \"../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\n\r\nconst useHoursSum = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  let submittedHoursSum = 0;\r\n  let acceptedHoursSum = 0;\r\n  let rejectedHoursSum = 0;\r\n\r\n  if (dataMonth?.id) {\r\n    const columnsWithDays = addDaysToColumns(dataMonth?.columns);\r\n\r\n    for (const column of columnsWithDays) {\r\n      const columnDays = column.days || [];\r\n      const columnHoursSum = columnDays.reduce((sum: number, day: ModelDay | null) => {\r\n        const dayHours = day?.hours ?? 0;\r\n        return sum + dayHours;\r\n      }, 0);\r\n\r\n      switch (column.id) {\r\n        case \"submitted\":\r\n          submittedHoursSum = columnHoursSum;\r\n          break;\r\n        case \"accepted\":\r\n          acceptedHoursSum = columnHoursSum;\r\n          break;\r\n        case \"rejected\":\r\n          rejectedHoursSum = columnHoursSum;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return { submittedHoursSum, acceptedHoursSum, rejectedHoursSum };\r\n  } else {\r\n    const submittedHoursSum = 0;\r\n    const acceptedHoursSum = 0;\r\n    const rejectedHoursSum = 0;\r\n    return { submittedHoursSum, acceptedHoursSum, rejectedHoursSum };\r\n  }\r\n};\r\n\r\nexport default useHoursSum;\r\n","import { useRef, useState } from \"react\";\r\n\r\nconst useScrollThumbPosition = () => {\r\n  const scrollableRef = useRef(null);\r\n  const [thumbPosition, setThumbPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const element = scrollableRef.current;\r\n\r\n    if (element) {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      const thumbPosition = (scrollTop / maxScrollTop) * 100;\r\n      setThumbPosition(thumbPosition);\r\n    }\r\n  };\r\n\r\n  return { scrollableRef, thumbPosition, handleScroll };\r\n};\r\n\r\nexport default useScrollThumbPosition;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport {\r\n  useMonthDataQuery,\r\n  useUpdateCalcMutation,\r\n  useUpdateColumnsMutation,\r\n} from \"../../../services/apiSlice\";\r\nimport MonthPanelColumn from \"../MonthPanelColumn\";\r\nimport MonthPanelColumnsHeader from \"../monthPanelColumnsheader.tsx/MonthPanelColumnsHeader\";\r\nimport { addDaysToColumns, handleDragDrop } from \"../utilsMonthPanelColumns\";\r\nimport useHoursSum from \"../../../hooks/useHoursSum\";\r\nimport { ModelColumn } from \"../../../components/sidebar/sidebarMonthForm/dataSidebarMonthForm\";\r\nimport useScrollThumbPosition from \"./useScrollThumbPosition\";\r\n\r\n\r\nconst MonthPanelColumns = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  const [updateColumns] = useUpdateColumnsMutation();\r\n  const [updateCalc] = useUpdateCalcMutation();\r\n    const { submittedHoursSum, acceptedHoursSum, rejectedHoursSum } =\r\n    useHoursSum();\r\n   const { scrollableRef, thumbPosition, handleScroll } =\r\n     useScrollThumbPosition();\r\n\r\n  const columnsWithDays = dataMonth?.columns\r\n    ? addDaysToColumns(dataMonth.columns)\r\n    : [];\r\n\r\n  const [columns, setColumns] = useState<ModelColumn[]>([]);\r\n  const [results, setResults] = useState<DropResult | null>(null);\r\n\r\n  useEffect(() => {\r\n    setColumns(columnsWithDays);\r\n  }, [dataMonth]);\r\n\r\n  useEffect(() => {\r\n    if (results !== null) {\r\n      updateColumns({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        columnsBody: columns,\r\n      });\r\n    }\r\n  }, [results]);\r\n\r\n  useEffect(() => {\r\n    if (dataMonth?.id) {\r\n      updateCalc({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        calcBody: {\r\n          ...dataMonth?.calc,\r\n          currentHours:\r\n            (dataMonth?.calc?.allHours ?? 0) -\r\n            submittedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submittedHours: submittedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n    }\r\n  }, [dataMonth]);\r\n\r\n  const handleDragEnd = (results: DropResult) => {\r\n    handleDragDrop(results, columns, setColumns);\r\n    setResults(results);\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      fluid\r\n      ref={scrollableRef}\r\n      onScroll={handleScroll}\r\n      className=\" mb-1 overflow-y-scroll\"\r\n    >\r\n      <div className=\"\">\r\n        <Row className=\"col-sm-8 col-md-9 col-xl-8 col-xxl-8 d-flex column-gap-1 ms-sm-auto mx-xl-auto  px-1 sticky-top\">\r\n          <MonthPanelColumnsHeader thumbPosition={thumbPosition} />\r\n        </Row>\r\n\r\n        <Row\r\n          className=\"col-sm-8 col-md-9 col-xl-8 d-flex column-gap-1 ms-sm-auto mx-xl-auto  px-1\"\r\n          style={{ height: \"fit-content\" }}\r\n        >\r\n          <DragDropContext onDragEnd={handleDragEnd}>\r\n            {columns?.map((column: ModelColumn, idx: number) => {\r\n              return (\r\n                <MonthPanelColumn\r\n                  key={column.id}\r\n                  column={column}\r\n                  columnIdx={idx}\r\n                />\r\n              );\r\n            })}\r\n          </DragDropContext>\r\n        </Row>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumns;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport useURLValues from \"../../../../hooks/useURLValues\";\r\nimport {\r\n  useAddAllHoursMutation,\r\n  useCalcDataQuery,\r\n} from \"../../../../services/apiSlice\";\r\nimport { validationSchema } from \"./validationMonthPanelHeaderForm\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useMonthPanelHeaderFormik = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n  \r\n let submittedHours = 0;\r\n let acceptedHours = 0;\r\n\r\n if (dataCalc?.submittedHours && dataCalc.acceptedHours) {\r\n   submittedHours = dataCalc?.submittedHours;\r\n   acceptedHours = dataCalc?.acceptedHours;\r\n }\r\n\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async values => {\r\n      if (\r\n        submittedHours + acceptedHours >\r\n        +formik.values.allHours\r\n      )\r\n        return;\r\n\r\n      await addAllHours({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        allHours: +values.allHours,\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useMonthPanelHeaderFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport useHTTPState from \"../../../../hooks/useHTTPState\";\r\nimport { useCalcDataQuery } from \"../../../../services/apiSlice\";\r\nimport \"./_formHeaderMonthPanel.scss\";\r\nimport useMonthPanelHeaderFormik from \"./useMonthPanelHeaderFormik\";\r\nimport useURLValues from \"../../../../hooks/useURLValues\";\r\n\r\nconst MonhPanelHeaderForm = () => {\r\n  const { formik, success } = useMonthPanelHeaderFormik();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const { btnContent } = useHTTPState(success, \"Zapisz liczbę godzin\");\r\n\r\n  let submittedHours = 0;\r\n  let acceptedHours = 0;\r\n\r\n  if (dataCalc?.submittedHours && dataCalc.acceptedHours) {\r\n    submittedHours = dataCalc?.submittedHours;\r\n    acceptedHours = dataCalc?.acceptedHours;\r\n  }\r\n\r\n  const gradientValue = formik.values.allHours / 3.2;\r\n  const gradientBackground: string = `linear-gradient(to right, rgba(180,120,255) ${gradientValue}%, rgba(180,180,255) ${gradientValue}%)`;\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={formik.handleSubmit}\r\n      className=\"p-2 bg-primary rounded-bottom-1\"\r\n    >\r\n      <Form.Control\r\n        type=\"number\"\r\n        name=\"allHours\"\r\n        min={0}\r\n        max={320}\r\n        value={formik.values.allHours}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        placeholder=\"Liczba\"\r\n        size=\"sm\"\r\n        className=\"p-0 px-1 mx-auto mb-2 border border-primary\"\r\n        style={{ minHeight: 0, cursor: \"pointer\", width: \"fit-content\" }}\r\n      />\r\n\r\n      <div\r\n        className=\"text-danger d-block mt-0 fs-8 text-center\"\r\n        style={{ height: \"0.7rem\" }}\r\n      >\r\n        {submittedHours + acceptedHours > +formik.values.allHours\r\n          ? `Podaj ilość godzin większą od ${submittedHours + acceptedHours} `\r\n          : \"\"}\r\n      </div>\r\n\r\n      <Form.Group className=\"mt-2 d-flex align-items-center w-100\">\r\n        <div className=\"fw-medium\">0</div>\r\n        <Form.Range\r\n          name=\"allHours\"\r\n          min={0}\r\n          max={320}\r\n          value={formik.values.allHours}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          className=\"form-range custom-range mx-2 medium\"\r\n          style={{\r\n            height: 10,\r\n            background: gradientBackground,\r\n          }}\r\n        />\r\n        <div className=\"fw-medium\">320</div>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"info\"\r\n        size=\"sm\"\r\n        className=\"fw-medium d-block mx-auto mt-2 col-7 col-sm-6 col-md-4 col-lg-3 col-xxl-2\"\r\n        disabled={success.isLoading}\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default MonhPanelHeaderForm;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport MonthPanelHeaderForm from \"./formHeaderMonthPanel/MonhPanelHeaderForm\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\nconst MonthPanelHeaderCollapse = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        className={`fw-medium w-100 mt-1 d-flex justify-content-center align-items-center bg-primary border-0 p-0 ${\r\n          open ? \"rounded-bottom-0\" : \"\"\r\n        }`}\r\n      >\r\n        Liczba godzin w miesiącu\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-1 fw-medium\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div className=\"bg-white p-0\">\r\n          <MonthPanelHeaderForm />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderCollapse;\r\n","import { useParams } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { monthURL } = useParams();\r\n  const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n\r\n  const monthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return { monthURLStringFormat };\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { useCalcDataQuery } from \"../../../services/apiSlice\";\r\n\r\nconst MonthPanelHeaderSummary = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n   let currentHours = 0;\r\n \r\n\r\n   if (dataCalc?.currentHours) {\r\n     currentHours = dataCalc?.currentHours;\r\n    \r\n   }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"text-capitalize fw-medium mt-2 text-center d-md-none\">\r\n        {monthURLStringFormat}\r\n      </div>\r\n\r\n      <div className=\" d-flex justify-content-center my-2 fw-medium position-relative\">\r\n        <div className=\"text-capitalize fw-medium d-none d-md-block  position-absolute end-0\">\r\n          {monthURLStringFormat}\r\n        </div>\r\n\r\n        <div className=\"col-3 text-end\">Wszystkie</div>\r\n        <div className=\"mx-2\">\r\n          {dataCalc?.allHours} -{\" \"}\r\n          <span\r\n            className={`${currentHours < 0 ? \"text-danger\" : \"\"}`}\r\n          >\r\n            {dataCalc?.currentHours}\r\n          </span>\r\n        </div>\r\n        <div\r\n          className={`col-3 ${currentHours < 0 ? \"text-danger\" : \"\"}`}\r\n        >\r\n          {currentHours < 0 ? \"Brak\" : \"Dostępne\"}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderSummary;\r\n","import Container from \"react-bootstrap/Container\";\r\nimport MonthPanelHeaderCollapse from \"./MonthPanelHeaderCollapse\";\r\nimport MonthPanelHeaderSummary from \"./MonthPanelHeaderSummary\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nconst MonthPanelHeader = () => {\r\n  return (\r\n    <header className=\"me-3\">\r\n      <Container fluid>\r\n        <Row className=\"col-sm-8 col-md-9 col-xl-8 col-xxl-8 ms-sm-auto mx-xl-auto px-1 \">\r\n          <MonthPanelHeaderCollapse />\r\n          <MonthPanelHeaderSummary />\r\n        </Row>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeader;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { currMonthDateToString } from \"../../../data/dataCurrentDates\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport {\r\n  useMonthDataQuery,\r\n  useMonthsDataQuery,\r\n} from \"../../../services/apiSlice\";\r\nimport MonthPanelColumns from \"../monthPanelColmns/MonthPanelColumns\";\r\nimport MonthPanelHeader from \"../monthPanelHeader/MonthPanelHeader\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data, error, isLoading } = useMonthsDataQuery(undefined);\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  let classs = \"d-flex flex-column bg-primary-subtle\";\r\n\r\n  if (isLoading || error || !data || !dataMonth) {\r\n    classs = \"d-flex justify-content-center align-items-center\";\r\n  }\r\n\r\n  let panelContent;\r\n\r\n  if (isLoading) {\r\n    panelContent = (\r\n      <Spinner animation=\"border\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      return (\r\n        <h3 className=\"text-danger col-5\">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else if (!data) {\r\n    panelContent = (\r\n      <h5 className=\"text-warning text-center col-5\">\r\n        Brak miesięcy zapisanych w bazie danych. Dodaj miesiąc za pomocą\r\n        formularza\r\n      </h5>\r\n    );\r\n  } else if (!dataMonth) {\r\n    panelContent = (\r\n      <h3 className=\"text-warning text-center col-5\">\r\n        Brak danych z miesiąca {currMonthDateToString}. Dodaj miesiąc za pomocą\r\n        formularza\r\n      </h3>\r\n    );\r\n  } else {\r\n    panelContent = (\r\n      <>\r\n        <MonthPanelHeader />\r\n        <MonthPanelColumns />\r\n      </>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className={classs} style={{ height: \"100vh\" }}>\r\n      {panelContent}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n"],"names":["today","Date","formatDate","date","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","futureDateInNext14Days","getTime","futureDateInNext60Days","currYearDigits","currMonthDigits","dateInNext14Days","dateInNext60Days","currMonthDateToString","Intl","DateTimeFormat","timeZone","format","success","btnText","useEffect","isError","error","errMsg","status","Swal","title","confirmButtonColor","btnContent","isLoading","_jsx","Spinner","animation","size","variant","children","className","monthURL","useLocation","pathname","split","slice","yearFromURL","monthFromURL","props","_props$day","dateToPrint","_props$day2","_props$day3","_jsxs","userName","place","TbArrowBigRightLineFilled","style","color","MdFactory","_useURLValues","useURLValues","dataMonth","useMonthDataQuery","data","_useDeleteDayMutation","useDeleteDayMutation","_useDeleteDayMutation2","_slicedToArray","deleteDay","useHTTPState","RiDeleteBin6Line","handleDelete","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","idx","id","wrap","_context2","prev","next","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","_dataMonth$columns$id","_dataMonth$columns$id2","daysBodyPUTRequest","_context","isConfirmed","columns","days","filter","colIdx","columnIdx","daysBody","stop","_x3","apply","arguments","_x","_x2","Draggable","draggableId","index","dayIdx","isDragDisabled","provided","snapshot","_objectSpread","isDragging","draggableProps","dragHandleProps","ref","innerRef","MonthPanelDayPrintData","Button","onClick","disabled","hours","FiClock","Col","Droppable","droppableId","column","droppableProps","isDraggingOver","Array","isArray","map","MonthPanelDay","crypto","randomUUID","placeholder","dataCalc","useCalcDataQuery","_Fragment","headerText","counter","submittedHours","acceptedHours","rejectedHours","thumbPosition","fontSize","addDaysToColumns","hasOwnProperty","submittedHoursSum","acceptedHoursSum","rejectedHoursSum","_step","columnsWithDays","_iterator","_createForOfIteratorHelper","s","n","done","value","columnHoursSum","reduce","sum","_day$hours","err","e","f","scrollableRef","useRef","_useState","useState","_useState2","setThumbPosition","handleScroll","element","current","scrollTop","scrollHeight","clientHeight","_useUpdateColumnsMuta","useUpdateColumnsMutation","updateColumns","_useUpdateCalcMutatio","useUpdateCalcMutation","updateCalc","_useHoursSum","useHoursSum","_useScrollThumbPositi","useScrollThumbPosition","setColumns","_useState3","_useState4","results","setResults","columnsBody","_dataMonth$calc$allHo","_dataMonth$calc","calcBody","calc","currentHours","allHours","Container","fluid","onScroll","Row","MonthPanelColumnsHeader","height","DragDropContext","onDragEnd","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","MonthPanelColumn","validationSchema","yup","max","required","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","addAllHours","formik","useFormik","initialValues","onSubmit","_onSubmit","values","abrupt","_useMonthPanelHeaderF","useMonthPanelHeaderFormik","gradientValue","gradientBackground","Form","handleSubmit","Control","type","name","min","onChange","handleChange","onBlur","handleBlur","minHeight","cursor","width","Group","Range","background","open","setOpen","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","MonthPanelHeaderForm","useParams","monthURLToDateFormat","monthURLStringFormat","useMonthURLToString","MonthPanelHeaderCollapse","MonthPanelHeaderSummary","panelContent","_useMonthsDataQuery","useMonthsDataQuery","undefined","classs","MonthPanelHeader","MonthPanelColumns"],"sourceRoot":""}
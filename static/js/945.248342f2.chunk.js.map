{"version":3,"file":"static/js/945.248342f2.chunk.js","mappings":"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","sources":["pages/monthPanel/DayPrintData.tsx","pages/monthPanel/hooksMonthPanel/useDataBaseValues.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/validationFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/useFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/FormHeaderMonhPanel.tsx","pages/monthPanel/headerMonthPanel/HeaderMonthPanel.tsx","pages/monthPanel/IndexMonthPanel.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["interface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <small>Imię:{props.day.userName}</small>\r\n      <small>{props.day.date}</small>\r\n      <small>Godz.: {props.day.hours}</small>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { useColumnsQuery } from \"../../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null) => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  return {\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\nimport useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  // const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateColumnsMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    databaseMonth,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props?.day?.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <DayPrintData day={props.day} />\r\n              <button onClick={() => handleUpdate(props.day.id)}>\r\n                <FaTrashAlt />\r\n              </button>\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\nimport useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: \"20vw\",\r\n                minHeight: \"100vh\",\r\n                height: \"fit-content\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUpdateColumnsMutation } from \"../../../../services/apiSlice\";\r\nimport useDataBaseValues from \"../../useDataBaseValues\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { validationSchema } from \"./validationFormHeaderMonthPanel\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useFormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n  const { databaseMonth, data } = useDataBaseValues(monthURL);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, {resetForm}) => {\r\n      await updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          allHours: values.allHours,\r\n        },\r\n      });\r\n       resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useFormHeaderMonhPanel;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport TextInput from \"../../../../components/inputs/TextInput\";\r\nimport { handleChange } from \"../../../../redux/storeFeatures/hoursPanelSlice\";\r\nimport { useUpdateColumnsMutation } from \"../../../../services/apiSlice\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../useDataBaseValues\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport useFormHeaderMonhPanel from \"./useFormHeaderMonthPanel\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n  const { formik, success } = useFormHeaderMonhPanel();\r\n\r\n  let btnContent = (\r\n    <AiOutlinePlusCircle style={{ fontSize: \"2rem\" }} />\r\n  );\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\"  variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group\r\n          className=\"d-flex align-items-end my-3\"\r\n          style={{ height: \"2rem\" }}\r\n        >\r\n          <Form.Label htmlFor=\"allHours\" className=\"mb-0\">\r\n            Podaj ilość godzin\r\n          </Form.Label>\r\n          <div className=\"align-self-start\">\r\n            <Form.Control\r\n              id=\"allHours\"\r\n              type=\"number\"\r\n              name=\"allHours\"\r\n              min={1}\r\n              value={formik.values.allHours}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className=\"rounded-0 ms-2\"\r\n              style={{ width: \"4rem\" }}\r\n            />\r\n            <Form.Text\r\n              className=\"text-danger d-block mt-0 mb-1 lh-0 ms-2\"\r\n              style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n            >\r\n              {formik.touched.allHours &&\r\n                formik.errors.allHours &&\r\n                formik.errors.allHours}\r\n            </Form.Text>\r\n          </div>\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            className=\"rounded-0 d-flex align-items-center justify-content-center px-0  bg-transparent  text-dark border-0\"\r\n            style={{ width: \"10%\", height: \"100%\" }}\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../hooksMonthPanel/useDataBaseValues\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst HeaderMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseAllHours, dataCurrentHours } = useDataBaseValues(monthURL);\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n\r\n  return (\r\n    <header>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={7} className=\"order-1 order-sm-2 px-0\">\r\n            <FormHeaderMonhPanel />\r\n          </Col>\r\n\r\n          <Col sm={5} className=\"order-2 order-sm-1 px-0\">\r\n            <div className=\"d-flex my-3\">\r\n              <div>Wszystkie: {databaseAllHours}</div>\r\n\r\n              <div className=\"ms-4\">Wolne: {dataCurrentHours}</div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMonthPanel;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport IndexSidebar from \"../../components/sidebar/IndexSidebar\";\r\nimport {\r\n  useColumnsQuery,\r\n  useUpdateColumnsMutation,\r\n} from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderMonthPanel from \"./headerMonthPanel/HeaderMonthPanel\";\r\nimport useDataBaseValues from \"./hooksMonthPanel/useDataBaseValues\";\r\nimport { handleDragDrop } from \"./utils\";\r\nimport DayForm from \"../../components/sidebar/dayForm/DayForm\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { data, error } = useColumnsQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateColumnsMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    data && databaseMonth && setColumns(databaseColumns);\r\n  }, [data, monthURL]);\r\n\r\n  // console.log(\"columns\", columns);\r\n  // console.log(\"database\", databaseColumns);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      columns?.length > 1 &&\r\n      databaseMonth?.month &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [columns]);\r\n\r\n  let columnsContent = !succes.isError ? (\r\n    <div>\r\n      <div>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          <div style={{ display: \"flex\" }}>\r\n            {[\r\n              { header: \"Złożone:\", counter: dataBaseSubmitedHours },\r\n              { header: \"Zakceptowane:\", counter: databaseAcceptedHours },\r\n              { header: \"Odrzucone:\", counter: databaseRejectedHours },\r\n            ].map(({ header, counter }) => {\r\n              return (\r\n                <h6 key={header} style={{ marginLeft: 20, width: \"20vw\" }}>\r\n                  {header} {\"\"}\r\n                  {counter}\r\n                </h6>\r\n              );\r\n            })}\r\n          </div>\r\n\r\n          <div style={{ display: \"flex\" }}>\r\n            {columns &&\r\n              columns.length > 0 &&\r\n              columns.map((column: any, idx: any) => {\r\n                return <Column column={column} key={column.id} />;\r\n              })}\r\n          </div>\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>Błąd</div>\r\n  );\r\n\r\n  if (error) {\r\n    if (\"error\" in error)\r\n      columnsContent = (\r\n        <div style={{ textAlign: \"center\" }}> {error.error} </div>\r\n      );\r\n  }\r\n  // console.log(\"\", databaseMonth);\r\n  return (\r\n    <>\r\n      {databaseMonth === undefined || databaseMonth === null ? (\r\n        <div style={{ textAlign: \"center\" }}>Brak danych, wybierz miesiąc</div>\r\n      ) : (\r\n        <div style={{ display: \"flex\", marginLeft: \"30vw\" }}>\r\n          <div>\r\n            <HeaderMonthPanel /> \r\n             {columnsContent}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","import { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n\r\n\r\n\r\n  // date transformation\r\n const databaseMonthsDates =\r\n   data && databaseMonthsCollection\r\n     ? databaseMonthsCollection.map(month => month.month)\r\n     : [];\r\n \r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["props","_jsxs","children","day","userName","_jsx","date","hours","monthURL","arguments","length","undefined","data","useColumnsQuery","databaseMonthsId","Object","keys","databaseMonthsWithId","values","flat","map","item","idx","_objectSpread","id","databaseMonthsCollection","addDaysToColumns","databaseMonth","find","month","databaseColumns","columns","databaseAllHours","allHours","dataCurrentHours","currentHours","dataBaseSubmitedHours","submitedHours","databaseAcceptedHours","acceptedHours","databaseRejectedHours","rejectedHours","submitedHoursSum","days","reduce","sum","acceptedHoursSum","rejectedHoursSum","_props$day","_useColumnsQuery","_useUpdateColumnsMuta","error","useUpdateColumnsMutation","_useUpdateColumnsMuta2","_slicedToArray","updateColumns","succes","useParams","_useDataBaseValues","useDataBaseValues","handleUpdate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","column","filter","stop","_x2","apply","_x","btnContent","style","border","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","onClick","FaTrashAlt","isLoading","isError","_Fragment","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","width","minHeight","height","Day","crypto","randomUUID","placeholder","validationSchema","yup","max","required","success","formik","useFormik","initialValues","onSubmit","_onSubmit","resetForm","_useFormHeaderMonhPan","useFormHeaderMonhPanel","AiOutlinePlusCircle","fontSize","Spinner","animation","variant","className","Form","handleSubmit","Group","Label","htmlFor","Control","type","name","min","value","onChange","handleChange","onBlur","handleBlur","size","Text","touched","errors","Button","monthToDateFormat","Date","Intl","DateTimeFormat","year","timeZone","format","Container","Row","Col","sm","FormHeaderMonhPanel","_useState","useState","_useState2","setColumns","useEffect","columnsContent","DragDropContext","onDragEnd","results","handleDragDrop","display","header","counter","marginLeft","Column","textAlign","HeaderMonthPanel","databaseMonthsDates","string","monthDate","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
{"version":3,"file":"static/js/481.d36b3d43.chunk.js","mappings":"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","sources":["components/alert/Alert.tsx","components/inputs/FormErrors.tsx","components/inputs/InputsText.tsx","components/inputs/inputsRange/InputsRange.tsx","components/formHours/FormHoursError.tsx","components/formHours/FormHoursTop.tsx","components/formHours/useFormikHours.tsx","components/formHours/FormHoursContext.tsx","components/CollapseMonthsList.tsx","components/inputs/InputsSelect.tsx","components/formDay/FormDayButton.tsx","components/formDay/useDataFormDay.tsx","components/formDay/validationFormDay.tsx","components/formDay/useFormikDay.tsx","components/formDay/FormDayContext.tsx","components/formMonth/useValidationMonthForm.tsx","components/formMonth/dataFormMonth.tsx","utils/sortListMonths.tsx","components/formMonth/useFormikMonth.tsx","components/formMonth/FormMonthContext.tsx","components/formUser/useValidationFormUser.tsx","components/formUser/useFormikUser.tsx","components/formUser/FormUserContext.tsx","components/CollapseContainer.tsx","components/sidebar/useDataSidebar.tsx","components/sidebar/SidebarBody.tsx","components/sidebar/SidebarHeader.tsx","components/sidebar/SidebarMenuButton.tsx","components/sidebar/SidebarLogout.tsx","pages/settings/SettingsReturnButton.tsx","components/sidebar/SidebarNav.tsx","hooks/updateReduxDatabase/useReduxListUsers.tsx","hooks/updateReduxDatabase/useReduxMonthData.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","data/firebaseConfig.tsx","hooks/updateReduxDatabase/useReduxListMonths.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx"],"sourcesContent":["import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { closeAlert, agreeAlert } from \"../../redux/storeFeatures/alertSlice\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./_alert.scss\";\r\n\r\nconst Alert = () => {\r\n  const dispatch = useDispatch();\r\n  const { isPrinted, header } = useSelector((state: RootState) => state.alert);\r\n\r\n  const handleClose = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (\r\n      (e.target as HTMLElement)?.id !== \"opacityContainer\" &&\r\n      (e.target as HTMLElement)?.id !== \"noButton\"\r\n    )\r\n      return;\r\n    dispatch(agreeAlert(false));\r\n    dispatch(closeAlert());\r\n  };\r\n\r\n  const handleAgree = () => {\r\n    dispatch(agreeAlert(true));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isPrinted ? (\r\n        <div\r\n          id=\"opacityContainer\"\r\n          className=\"fixed-top d-flex justify-content-center align-items-center \"\r\n          onClick={e => handleClose(e)}\r\n          style={{\r\n            height: \"100vh\",\r\n            zIndex:\"1060\" ,\r\n            backgroundColor: \"rgba(0,0,0,0.4)\",\r\n          }}\r\n        >\r\n          <div\r\n            className={`p-4 bg-white rounded-1 fs-3 fw-medium ${\r\n              isPrinted ? \"alertAnimationDown\" : \"alertAnimationUp\"\r\n            }`}\r\n          >\r\n            {header}\r\n            <div className=\"w-fit-content m-auto\">\r\n              {header.includes(\"Usunąć\") ? (\r\n                <>\r\n                  <Button id=\"noButton\">Nie</Button>\r\n                  <Button\r\n                    onClick={handleAgree}\r\n                    className=\"bg-danger ms-4 border \"\r\n                  >\r\n                    Tak\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <Button id=\"noButton\">Ok</Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import { FormikTouched, FormikErrors } from \"formik\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  errors: FormikErrors<ModelDay>;\r\n  touched: FormikTouched<ModelDay>;\r\n};\r\n\r\nconst FormErrors = (props: Props) => {\r\n  return (\r\n    <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"0.7rem\" }}>\r\n      {props.touched[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormErrors;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    value: string;\r\n    type: string;\r\n    label?: string;\r\n    placeholder?: string;\r\n    isErrorPrint?: boolean;\r\n    min?: string;\r\n    max?: string;\r\n  }[];\r\n};\r\n\r\nconst InputsText = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue, errors, touched } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(\r\n        ({ value, label, type, isErrorPrint, min, max, placeholder }) => {\r\n          return (\r\n            <Form.Group key={value}>\r\n              {label && (\r\n                <Form.Label\r\n                  htmlFor=\"date\"\r\n                  className=\"mb-0 fs-responsive fw-medium\"\r\n                >\r\n                  {label}\r\n                </Form.Label>\r\n              )}\r\n              <Form.Control\r\n                id={value}\r\n                type={type}\r\n                name={value}\r\n                value={values[value as keyof typeof values]}\r\n                onChange={e => setFieldValue(value, e.target.value)}\r\n                onBlur={handleBlur}\r\n                min={min}\r\n                max={max}\r\n                placeholder={placeholder}\r\n                size=\"sm\"\r\n                className=\"p-0 px-1 border border-primary shadow-sm w-100 \"\r\n                style={{ minHeight: 0  }}\r\n              />\r\n              {isErrorPrint && (\r\n                <FormErrors value={value} errors={errors} touched={touched} />\r\n              )}\r\n            </Form.Group>\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsText;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\ntype Props = {\r\n  inputsValues: string[];\r\n};\r\n\r\nconst InputsRange = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelFormValues>();\r\n\r\n  const gradientValue = values.allHours / 3.2;\r\n  const gradientBackground: string = `linear-gradient(to right, rgba(180,120,255) ${gradientValue}%, rgba(180,180,255) ${gradientValue}%)`;\r\n\r\n  return (\r\n    <>\r\n      {props.inputsValues.map(value => {\r\n        return (\r\n          <Form.Group\r\n            key={value}\r\n            className=\"mt-2 d-flex align-items-center w-100\"\r\n          >\r\n            <Form.Range\r\n              name={value}\r\n              min={0}\r\n              max={320}\r\n              value={values[value as keyof typeof values]}\r\n              onChange={e => setFieldValue(value, e.target.value)}\r\n              onBlur={handleBlur}\r\n              className=\"form-range custom-range medium\"\r\n              style={{\r\n                height: 10,\r\n                background: gradientBackground,\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsRange;\r\n","import { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\nconst FormHoursError = () => {\r\n  const { values } = useFormikContext<ModelFormValues>();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  var content = \"\";\r\n\r\n  if (month) {\r\n    if (\r\n      month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours >\r\n      +values?.allHours\r\n    ) {\r\n      content = `Min. ${\r\n        month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours\r\n      } h`;\r\n    }\r\n  }\r\n\r\n  return <div className=\"text-danger fs-8\">{content}</div>;\r\n};\r\n\r\nexport default FormHoursError;\r\n","import InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormHoursTop = () => {\r\n\r\n  const dataInputsText = [\r\n    { value: \"allHours\", type: \"number\", isErrorPrint: false },\r\n  ];\r\n\r\n  const styles = \"fs-7 d-flex align-items-end\";\r\n  return (\r\n    <div className=\"d-flex justify-content-between fw-medium \">\r\n      <div className={styles}>0 h</div>\r\n\r\n      <div className=\"col-6 col-sm-5 d-flex\" style={{ width: \"62px\" }}>\r\n        <InputsText inputsData={dataInputsText} /> &nbsp;\r\n        <div>h</div>\r\n      </div>\r\n\r\n      <div className={styles}>320 h</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormHoursTop;\r\n","import { useSelector } from \"react-redux\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddAllHoursMutation } from \"../../services/apiSliceMonths\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\nconst useFormikHours = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n\r\n  const calcHours = month && month.calcHours;\r\n\r\n  // const { submittedHours, acceptedHours } = month && month?.calcHours;\r\n\r\n  const initialValues = { allHours: 0 };\r\n\r\n  const onSubmit = async (values: ModelFormValues) => {\r\n   \r\n    if (month) {\r\n      if (\r\n        month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours >\r\n        +values?.allHours\r\n      )\r\n        return;\r\n    }\r\n\r\n    calcHours &&\r\n      values.allHours &&\r\n      (await addAllHours({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        calcHours: {\r\n          ...calcHours,\r\n          allHours: +values.allHours,\r\n          currentHours:\r\n            +values.allHours -\r\n            calcHours.acceptedHours -\r\n            calcHours.submittedHours,\r\n        },\r\n      }));\r\n  };\r\n\r\n  return { initialValues, onSubmit, success };\r\n};\r\n\r\nexport default useFormikHours;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport InputsRange from \"../inputs/inputsRange/InputsRange\";\r\nimport FormHoursError from \"./FormHoursError\";\r\nimport FormHoursTop from \"./FormHoursTop\";\r\nimport useFormikHours from \"./useFormikHours\";\r\n\r\nconst FormHoursContext = () => {\r\n  const { initialValues, onSubmit, success } = useFormikHours();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      <Form className=\"py-2\">\r\n        <FormHoursTop />\r\n        <InputsRange inputsValues={[\"allHours\"]} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mt-2\">\r\n          <FormHoursError />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={success.isLoading}\r\n            className=\"col-2 d-flex justify-content-center align-items-center m-0 justify-content-center p-0 m-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormHoursContext;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useMonthDates from \"../hooks/useMonthDates\";\r\nimport useURLValues from \"../hooks/useURLValues\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { sortListMonths } from \"../utils/sortListMonths\";\r\n\r\nconst CollapseMonthsList = () => {\r\n  const { databaseMonthsDatesToString } = useMonthDates();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { monthURL, isMonthInURL } = useURLValues();\r\n\r\n  const monthURLToDateFormat = isMonthInURL ? new Date(monthURL) : null;\r\n\r\n  const curMonthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup\r\n      className=\"scrolHidden fs-7 fw-medium text-capitalize\"\r\n      style={{ height: \"5rem\" }}\r\n    >\r\n      {!listMonths && (\r\n        <ListGroup.Item className=\"border-0 p-0 text-warning\">\r\n          Brak danych\r\n        </ListGroup.Item>\r\n      )}\r\n\r\n      {databaseMonthsDatesToString?.map((month: string, idx: number) => {\r\n        return (\r\n          <ListGroup.Item key={month} className=\"border-0 p-0\">\r\n            <Link\r\n              to={`/godziny/${listMonths?.[idx]}`}\r\n              className={`${\r\n                curMonthURLStringFormat !== month || !curMonthURLStringFormat\r\n                  ? \"text-dark\"\r\n                  : \"text-info\"\r\n              } text-decoration-none`}\r\n            >\r\n              {month}\r\n            </Link>\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default CollapseMonthsList;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    name: string;\r\n    firstOption: string;\r\n    label: string;\r\n    options: string[] | number[];\r\n  }[];\r\n};\r\n\r\nconst InputsSelect = (props: Props) => {\r\n  const { errors, touched, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(({ name, firstOption, label, options }) => {\r\n        return (\r\n          <Form.Group key={label}>\r\n            <Form.Label\r\n              htmlFor={name}\r\n              className=\"mb-0 fw-medium  fs-responsive\"\r\n            >\r\n              {label}\r\n            </Form.Label>\r\n\r\n            <Form.Select\r\n              id={name}\r\n              name={name}\r\n              onChange={e => setFieldValue(name, e.target.value)}\r\n              onBlur={handleBlur}\r\n              size=\"sm\"\r\n              className={`p-0 px-1 border border-primary shadow-sm text-capitalize ${\r\n                firstOption === \"Zapisz użytkownika\" ? \"text-warning\" : \"\"\r\n              }`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <option\r\n                className={` ${\r\n                  firstOption === \"Zapisz użytkownika\"\r\n                    ? \"text-warning\"\r\n                    : \"text-placeholder\"\r\n                }`}\r\n              >\r\n                {firstOption}\r\n              </option>\r\n\r\n              {options?.map((option: string | number) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n            <FormErrors value={name} errors={errors} touched={touched} />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsSelect;\r\n","import { useFormikContext } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\nimport { ModelSuccess } from \"../../sharedModels/modelSucces\";\r\n\r\ntype Props = {\r\n  success: ModelSuccess;\r\n};\r\n\r\nconst FormDayButton = (props: Props) => {\r\n  const { values } = useFormikContext<ModelDay>();\r\n  const { btnContent } = useHTTPState(props.success, \"Dodaj dzień\");\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const currentHours = month?.calcHours?.currentHours || 0;\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={props.success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 ms-auto bg-primary text-white fs-responsive\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"1rem\" }}>\r\n        {currentHours - +values.hours < 0 || currentHours === 0\r\n          ? \"Brak dostępnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormDayButton;\r\n","import {\r\n  dateInNext_14_Days,\r\n  dateInNext_60_Days,\r\n} from \"../../data/dataCurrentDates\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\nconst useDataFormDay = () => {\r\n  const { listUsers: dataUsers } = useSelector(\r\n    (state: RootState) => state.listUsers\r\n  );\r\n\r\n  const users = dataUsers ? dataUsers : [];\r\n\r\n  const names = users?.map(({ userName }: ModelUser) => {\r\n    return userName;\r\n  });\r\n\r\n  const dataInputsSelect = [\r\n    {\r\n      name: \"userName\",\r\n      firstOption: `${names.length === 0 ? \"Zapisz użytkownika\" : \"Imię\"}`,\r\n      label: \"Podaj imię\",\r\n      options: names,\r\n    },\r\n    {\r\n      name: \"hours\",\r\n      firstOption: \"Godziny\",\r\n      label: \"Podaj liczbę godzin\",\r\n      options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    },\r\n\r\n    {\r\n      name: \"place\",\r\n      firstOption: \"Lokalizacja\",\r\n      label: \"Podaj lokalizację\",\r\n      options: [\"Wewnątrz\", \"Poza\"],\r\n    },\r\n  ];\r\n  const dataInputsText = [\r\n    {\r\n      value: \"date\",\r\n      label: \"Podaj dzień\",\r\n      type: \"date\",\r\n      isErrorPrint: true,\r\n      min: dateInNext_14_Days,\r\n      max: dateInNext_60_Days,\r\n    },\r\n  ];\r\n  return { dataInputsSelect, dataInputsText };\r\n};\r\nexport default useDataFormDay;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  hours: yup\r\n    .string()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useSelector } from \"react-redux\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\nimport { dateInNext_14_Days } from \"../../data/dataCurrentDates\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddDayMutation } from \"../../services/apiSliceMonths\";\r\nimport { validationSchema } from \"./validationFormDay\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\ntype ModelInitialValues = {\r\n  id: string;\r\n  date: string;\r\n  hours: string;\r\n  userName: string;\r\n  place: string;\r\n  userColor: string;\r\n};\r\n\r\nconst useFormikDay = () => {\r\n  const [addDay, success] = useAddDayMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const { listUsers } = useSelector((state: RootState) => state.listUsers);\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    date: dateInNext_14_Days,\r\n    hours: \"\",\r\n    userName: \"Imię\",\r\n    place: \"\",\r\n    userColor: \"\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: ModelInitialValues) => {\r\n    if (\r\n      month &&\r\n      (month?.calcHours?.currentHours - +values.hours < 0 ||\r\n        month?.calcHours?.currentHours === 0)\r\n    )\r\n      return;\r\n\r\n    const userColor =\r\n      listUsers &&\r\n      listUsers?.find((user: ModelUser) => {\r\n        return user.userName === values.userName;\r\n      })?.userColor;\r\n\r\n    const valuesToDatabase = {\r\n      ...values,\r\n      id: UUID(),\r\n      hours: +values.hours,\r\n      userColor: userColor || \"\",\r\n    };\r\n\r\n    month &&\r\n      (await addDay({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        monthBody: {\r\n          ...month,\r\n          calcHours: {\r\n            ...month?.calcHours,\r\n            currentHours: month.calcHours.currentHours - valuesToDatabase.hours,\r\n            submittedHours:\r\n              month.calcHours.submittedHours + valuesToDatabase.hours,\r\n          },\r\n\r\n          columns: [\r\n            {\r\n              ...month.columns[0],\r\n              days: month.columns[0].days\r\n                ? [...month.columns[0].days, valuesToDatabase]\r\n                : [valuesToDatabase],\r\n            },\r\n            ...month.columns.slice(1),\r\n          ],\r\n        },\r\n      }));\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikDay;\r\n","import { Form, Formik } from \"formik\";\r\nimport InputsSelect from \"../inputs/InputsSelect\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport FormDayButton from \"./FormDayButton\";\r\nimport useDataFormDay from \"./useDataFormDay\";\r\nimport useFormikDay from \"./useFormikDay\";\r\nimport \"./_formDay.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst FormDayContext = () => {\r\n  const { dataInputsText, dataInputsSelect } = useDataFormDay();\r\n  const { initialValues, validation, onSubmit, success } = useFormikDay();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const allHours = month?.calcHours?.allHours;\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className={`${allHours === 0 ? \"formContainerBlur\" : \"\"} mt-2`}>\r\n        <InputsSelect inputsData={dataInputsSelect} />\r\n        <InputsText inputsData={dataInputsText} />\r\n        <FormDayButton success={success} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormDayContext;\r\n","import * as yup from \"yup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useValidationMonthForm = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const validationSchema = yup.object({\r\n    monthDate: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Miesiąc zapisany\",\r\n        value => value !== undefined && !listMonths?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationMonthForm;\r\n","import { ModelColumn } from \"../../sharedModels/modelColumn\";\r\nimport { ModelCalcHours } from \"../../sharedModels/modelCalcHours\";\r\nimport { ModelMonth } from \"../../sharedModels/modelMonth\";\r\n\r\nconst columns: ModelColumn[] = [\r\n  { id: \"submitted\", days: [] },\r\n  { id: \"accepted\", days: [] },\r\n  { id: \"rejected\", days: [] },\r\n];\r\n\r\n const calcHours: ModelCalcHours = {\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submittedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n};\r\n\r\nexport const monthPattern: ModelMonth = {\r\n  id: \"\",\r\n  columns,\r\n  calcHours,\r\n};\r\n","export const sortListMonths = (listMonths: string[]) => {\r\n  return listMonths && [...listMonths]?.sort((a: string, b: string) => {\r\n    const dateA = new Date(a).getTime();\r\n    const dateB = new Date(b).getTime();\r\n\r\n    return dateA - dateB;\r\n  }).reverse()\r\n\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateListMonthsMutation,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSliceMonths\";\r\n\r\nimport useValidationMonthForm from \"./useValidationMonthForm\";\r\nimport * as yup from \"yup\";\r\nimport { monthPattern } from \"./dataFormMonth\";\r\nimport { ModelMonth } from \"../../sharedModels/modelMonth\";\r\nimport { sortListMonths } from \"../../utils/sortListMonths\";\r\n\r\ninterface ModelInitialValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useFormikMonth = () => {\r\n  const navigate = useNavigate();\r\n  const [updateMonth, success] = useUpdateMonthMutation();\r\n  const [updateListMonths] = useUpdateListMonthsMutation();\r\n  const [deleteMonth] = useDeleteMonthMutation();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { validationSchema } = useValidationMonthForm();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [formValues, setFormValues] = useState({ monthDate: \"\" });\r\n\r\n  const initialValues = { monthDate: `${currYearDigits}-${currMonthDigits}` };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: ModelInitialValues) => {\r\n    const year = values.monthDate.slice(0, 4);\r\n    const month = values.monthDate.slice(-2);\r\n    const monthBody: ModelMonth = {\r\n      ...monthPattern,\r\n      id: values.monthDate,\r\n    };\r\n\r\n    await updateMonth({ year, month, monthBody });\r\n    setFormValues(values);\r\n  };\r\n\r\n  const executeAddMonthInfo = async (values: ModelInitialValues) => {\r\n    if (isSuccess) {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      const months = listMonths ? [...listMonths] : [];\r\n      const updatedList = [...months, `${year}-${month}`];\r\n      const sortedMonths = sortListMonths(updatedList);\r\n\r\n      await updateListMonths(sortedMonths);\r\n      navigate(`/${values.monthDate}`);\r\n    } else if (success.isError) {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      await deleteMonth({ year, month });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (success.isSuccess) {\r\n      setIsSuccess(true);\r\n    } else setIsSuccess(false);\r\n  }, [success.isSuccess]);\r\n\r\n  useEffect(() => {\r\n    executeAddMonthInfo(formValues);\r\n  }, [isSuccess, updateListMonths]);\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikMonth;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikMonth from \"./useFormikMonth\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormMonthContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikMonth();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"monthDate\",\r\n      type: \"month\",\r\n      label:\"Podaj miesiąc\",\r\n      isErrorPrint: true,\r\n      min: `${currYearDigits}-${currMonthDigits}`,\r\n      max: \"2025-12\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormMonthContext;\r\n","import { useUsersQuery } from \"../../services/apiSliceUsers\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\nconst useValidationFormUser = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n  const validationSchema = yup.object({\r\n    userName: yup\r\n      .string()\r\n      .min(3, \"Min. 3 litery\")\r\n      .max(10, \"Max. 10 liter\")\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Imię zajęte\",\r\n        value =>\r\n          value !== undefined &&\r\n          !usersNames?.includes(value[0].toUpperCase() + value.slice(1))\r\n      )\r\n      .required(\"Imię wymagane\"),\r\n    userColor: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Kolor zajęty\",\r\n        value => value !== undefined && !UsersColors?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationFormUser;\r\n","import {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../services/apiSliceUsers\";\r\nimport useValidationUserForm from \"./useValidationFormUser\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\nimport { FormikHelpers } from \"formik\";\r\n\r\nconst useFormikUser = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { validationSchema } = useValidationUserForm();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers || [];\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    userName: \"\",\r\n    userColor: \"#e0cce1\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n  const onSubmit = async (\r\n    values: ModelUser,\r\n    { resetForm }: FormikHelpers<ModelUser>\r\n  ) => {\r\n    const userValues = {\r\n      ...values,\r\n      userName:\r\n        values.userName.slice(0, 1).toUpperCase() + values.userName.slice(1),\r\n      id: UUID(),\r\n    };\r\n\r\n    const sortedUsers = [...users, userValues].sort((a, b) =>\r\n      a.userName.localeCompare(b.userName)\r\n    );\r\n\r\n    await addUser(sortedUsers);\r\n    resetForm();\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikUser;\r\n\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikUser from \"./useFormikUser\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst FormUserContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikUser();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"userName\",\r\n      type: \"text\",\r\n      label: \"Podaj imię\",\r\n      isErrorPrint: true,\r\n      placeholder: \"Imię\",\r\n    },\r\n    {\r\n      value: \"userColor\",\r\n      type: \"color\",\r\n      label: \"Podaj kolor\",\r\n      isErrorPrint: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormUserContext;\r\n","import { ReactNode, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n  title: string;\r\n};\r\n\r\nconst CollapseContainer = (props: Props) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline-primary\"\r\n        onClick={() => setOpen(prev => !prev)}\r\n        aria-expanded={isOpen}\r\n        aria-controls=\"example-collapse-text\"\r\n        size=\"sm\"\r\n        className={`fw-medium fs-responsive w-100 d-flex justify-content-between align-items-center bg-primary text-white ${\r\n          isOpen ? \"rounded-bottom-0\" : \"rounded-bottom-1\"\r\n        }`}\r\n        style={{\r\n          transition: \"border-radius 420ms\",\r\n        }}\r\n      >\r\n        {props.title}\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3\"\r\n          style={{\r\n            transform: `${isOpen ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={isOpen}>\r\n        <div className=\"border border-primary rounded-bottom px-1\">\r\n          {props.children}\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CollapseContainer;\r\n","import FormHoursContext from \"../formHours/FormHoursContext\";\r\nimport CollapseMonthsList from \"../CollapseMonthsList\";\r\nimport FormDayContext from \"../formDay/FormDayContext\";\r\nimport FormMonthContext from \"../formMonth/FormMonthContext\";\r\nimport FormUserContext from \"../formUser/FormUserContext\";\r\nimport CollapseContainer from \"../CollapseContainer\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useDataSidebar = () => {\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  const monthStringCapitalize =\r\n    monthURLStringFormat[0]?.toUpperCase() + monthURLStringFormat.slice(1);\r\n\r\n  const printFormHours = month && (\r\n    <div className=\"mt-1\">\r\n      <CollapseContainer title={\"Zapisz godziny\"}>\r\n        <FormHoursContext />\r\n      </CollapseContainer>\r\n    </div>\r\n  );\r\n  const printFormDay = month && <FormDayContext />;\r\n\r\n  const dataMonthPanel = [\r\n    <CollapseContainer title={monthStringCapitalize}>\r\n      <CollapseMonthsList />\r\n    </CollapseContainer>,\r\n    printFormHours,\r\n    printFormDay,\r\n  ];\r\n\r\n  const dataSettings = [\r\n    <CollapseContainer title={\"Zapisz miesiąc\"}>\r\n      <FormMonthContext />\r\n    </CollapseContainer>,\r\n    <div className=\"mt-1\">\r\n      <CollapseContainer title={\"Zapisz użytkownika\"}>\r\n        <FormUserContext />\r\n      </CollapseContainer>\r\n    </div>,\r\n  ];\r\n\r\n  return { dataMonthPanel, dataSettings };\r\n};\r\n\r\nexport default useDataSidebar;\r\n","import React from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport useDataSidebar from \"./useDataSidebar\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst SidebarBody = () => {\r\n  const { pathname } = useLocation();\r\n  const { isMonthInURL } = useURLValues();\r\n  const { dataMonthPanel, dataSettings } = useDataSidebar();\r\n\r\n  return (\r\n    <Offcanvas.Body className=\"scrolHidden flex-grow-0 p-0 border border-4 border-white bg-white rounded\">\r\n      {isMonthInURL &&\r\n        dataMonthPanel.map((component, idx) => {\r\n          return <React.Fragment key={idx}>{component}</React.Fragment>;\r\n        })}\r\n\r\n      {pathname === \"/godziny/ustawienia\" &&\r\n        dataSettings.map((component, idx) => {\r\n          return <React.Fragment key={idx}>{component}</React.Fragment>;\r\n        })}\r\n    </Offcanvas.Body>\r\n  );\r\n};\r\n\r\nexport default SidebarBody;\r\n","import Offcanvas from \"react-bootstrap/Offcanvas\";\r\n\r\nconst SidebarHeader = () => {\r\n  return (\r\n    <Offcanvas.Header\r\n      className=\"d-sm-none w-fit-content ms-auto\"\r\n      closeButton={true}\r\n    ></Offcanvas.Header>\r\n  );\r\n};\r\n\r\nexport default SidebarHeader;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\ntype Props = {\r\n  toggleShow: () => void;\r\n};\r\n\r\nconst SidebarMenuButton = (props: Props) => {\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n  const { isMonthInURL } = useURLValues();\r\n\r\n  return (\r\n    <Button\r\n      variant=\"primary\"\r\n      onClick={props.toggleShow}\r\n      className= \"d-flex d-sm-none justify-content-center align-items-center rounded-0 p-0 fw-medium w-100 px-4 fixed-bottom\"\r\n      style={{\r\n        height: \"2.5rem\",\r\n      }}\r\n    >\r\n      <div>Menu:&nbsp;</div>\r\n      {isMonthInURL ? <div>{monthURLStringFormat}</div> : <div>ustawienia</div>}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarMenuButton;\r\n","import { useState } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport { printAlert } from \"../../redux/storeFeatures/alertSlice\";\r\nimport { RiLogoutBoxLine } from \"react-icons/ri\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst SidebarLogout = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const logout = () => {\r\n    setIsLoading(true);\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigate(\"/godziny\");\r\n      })\r\n\r\n      .catch(error => dispatch(printAlert(error.message)))\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div className=\"d-flex align-center  d-flex align-items-center text-primary w-100\">\r\n      <RiLogoutBoxLine className=\"fs-6 me-1 \" />\r\n      Wyloguj\r\n    </div>\r\n  );\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        variant=\"secondary\"\r\n        className=\"mx-auto\"\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={logout}\r\n      className=\"fs-6 fw-medium text-info p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n      disabled={isLoading}\r\n    >\r\n      {btnContent}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarLogout;\r\n","import { createBrowserHistory } from \"history\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ImArrowLeft } from \"react-icons/im\";\r\n\r\nconst SettingsReturnButton = () => {\r\n  const history = createBrowserHistory();\r\n  const handleGoBack = () => {\r\n    history.back();\r\n  };\r\n  return (\r\n    <Button\r\n      onClick={handleGoBack}\r\n      className=\"fs-6 fw-medium text-primary p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      <div className=\"d-flex align-center  d-flex align-items-center text-start w-100\">\r\n        <ImArrowLeft className=\"fs-6 me-1 \" /> Wróć\r\n      </div>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SettingsReturnButton;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { AiTwotoneSetting } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SidebarLogout from \"./SidebarLogout\";\r\nimport SettingsReturnButton from \"../../pages/settings/SettingsReturnButton\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\nconst SidebarNav = () => {\r\n  const { isMonthInURL } = useURLValues();\r\n  const styles = \"bg-transparent border-0 p-0 ps-2\";\r\n\r\n  return (\r\n    <nav className=\"mt-auto mb-2 fw-medium\">\r\n      <ListGroup>\r\n        {!isMonthInURL && (\r\n          <ListGroup.Item className={styles}>\r\n            <SettingsReturnButton />\r\n          </ListGroup.Item>\r\n        )}\r\n        <ListGroup.Item className={styles}>\r\n          <Link to=\"/godziny/ustawienia\" className=\"text-primary text-decoration-none\">\r\n            <AiTwotoneSetting /> Ustawienia\r\n          </Link>\r\n        </ListGroup.Item>\r\n        <ListGroup.Item className={styles}>\r\n          <SidebarLogout />\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SidebarNav;\r\n","import { useEffect } from \"react\";\r\nimport { useUsersQuery } from \"../../services/apiSliceUsers\";\r\n\r\nimport {\r\n  geListtUsers,\r\n  getListUsersError,\r\n  getListUsersIsLoading,\r\n} from \"../../redux/storeFeatures/listUsersSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useReduxListUsers = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { data, error, isLoading } = useUsersQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(geListtUsers(data));\r\n\r\n    dispatch(getListUsersError(error));\r\n\r\n    dispatch(getListUsersIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxListUsers;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getMonth,\r\n  getMonthError,\r\n  getMonthIsLoading,\r\n} from \"../../redux/storeFeatures/monthPanelSlice\";\r\nimport { useMonthDataQuery } from \"../../services/apiSliceMonths\";\r\nimport useURLValues from \"../useURLValues\";\r\n\r\nconst useReduxMonthData = () => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const { data, error, isLoading } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getMonth(data));\r\n\r\n    dispatch(getMonthError(error));\r\n\r\n    dispatch(getMonthIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxMonthData;\r\n","import \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { useLocation, useParams } from \"react-router-dom\";\r\nimport useWindowWidth from \"../../hooks/useWindowWidth\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarMenuButton from \"./SidebarMenuButton\";\r\nimport SidebarNav from \"./SidebarNav\";\r\nimport useReduxListUsers from \"../../hooks/updateReduxDatabase/useReduxListUsers\";\r\nimport useReduxListMonths from \"../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport useReduxMonthData from \"../../hooks/updateReduxDatabase/useReduxMonthData\";\r\nimport Alert from \"../alert/Alert\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\n\r\nconst IndexSidebar = () => {\r\n  useReduxListUsers();\r\n  useReduxListMonths();\r\n  useReduxMonthData();\r\n\r\n  const { pathname } = useLocation();\r\n  const [isShow, setShow] = useState(false);\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(prev => !prev);\r\n\r\n  useEffect(() => {\r\n    windowWidth >= 500 && setShow(true);\r\n  }, [windowWidth]);\r\n\r\n  const printSidebar =\r\n    pathname.includes(\"/godziny/ustawienia\") ||\r\n    pathname.includes(\"/godziny/202\");\r\n\r\n \r\n\r\n  return (\r\n    <>\r\n      {printSidebar && auth.currentUser && (\r\n        <>\r\n          <Alert />\r\n          <Offcanvas\r\n            show={isShow}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className={`${\r\n              windowWidth <= 500 && \"backgroundImage\"\r\n            } bg-transparent`}\r\n            style={{\r\n              width: windowWidth >= 500 ? \"30%\" : \"100vw\",\r\n              maxWidth: windowWidth >= 500 && \"250px\",\r\n            }}\r\n          >\r\n            <div className=\"p-1 d-flex flex-column bg-opacity-white h-100\">\r\n              <SidebarHeader />\r\n              <SidebarBody />\r\n              <SidebarNav />\r\n            </div>\r\n          </Offcanvas>\r\n          <SidebarMenuButton toggleShow={toggleShow} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext_14_Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext_60_Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext_14_Days = formatDate(futureDateInNext_14_Days);\r\nexport const dateInNext_60_Days = formatDate(futureDateInNext_60_Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getDatabase, ref, get } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nexport const app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\nexport const database = getDatabase(app);\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getListMonths,\r\n  getListMonthsError,\r\n  getListMonthsIsLoading,\r\n} from \"../../redux/storeFeatures/listMonthsSlice\";\r\nimport { useListMonthsQuery } from \"../../services/apiSliceMonths\";\r\n\r\nconst useReduxListMonths = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { data, error, isLoading } = useListMonthsQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(getListMonths(data));\r\n\r\n    dispatch(getListMonthsError(error));\r\n\r\n    dispatch(getListMonthsIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxListMonths;\r\n","import { ReactNode } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const databaseMonthsDatesToString = listMonths && [...listMonths]?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(9);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return { monthURLStringFormat };\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return { monthURLStringFormat };\r\n  }\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n"],"names":["dispatch","useDispatch","_useSelector","useSelector","state","alert","isPrinted","header","_jsx","_Fragment","children","id","className","onClick","e","_e$target","_e$target2","target","agreeAlert","closeAlert","handleClose","style","height","zIndex","backgroundColor","_jsxs","concat","includes","Button","props","touched","value","errors","_useFormikContext","useFormikContext","values","handleBlur","setFieldValue","inputsData","map","_ref","label","type","isErrorPrint","min","max","placeholder","Form","Group","Label","htmlFor","Control","name","onChange","onBlur","size","minHeight","FormErrors","gradientValue","allHours","gradientBackground","inputsValues","Range","background","_month$calcHours","_month$calcHours2","_month$calcHours3","_month$calcHours4","month","monthPanel","content","calcHours","submittedHours","acceptedHours","styles","width","InputsText","_useURLValues","useURLValues","yearFromURL","monthFromURL","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","_slicedToArray","addAllHours","success","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","t0","year","_objectSpread","currentHours","stop","_x","apply","arguments","initialValues","_useFormikHours","useFormikHours","btnContent","useHTTPState","AiOutlinePlusCircle","fontSize","Formik","FormHoursTop","InputsRange","FormHoursError","disabled","isLoading","databaseMonthsDatesToString","useMonthDates","listMonths","monthURL","monthURLToDateFormat","isMonthInURL","Date","curMonthURLStringFormat","Intl","DateTimeFormat","timeZone","format","ListGroup","Item","idx","Link","to","firstOption","options","Select","cursor","option","hours","dataUsers","listUsers","users","names","userName","dataInputsSelect","length","dataInputsText","dateInNext_14_Days","dateInNext_60_Days","validationSchema","yup","test","required","place","_useAddDayMutation","useAddDayMutation","_useAddDayMutation2","addDay","date","userColor","validation","_listUsers$find","valuesToDatabase","find","user","UUID","monthBody","columns","days","_toConsumableArray","slice","_useDataFormDay","useDataFormDay","_useFormikDay","useFormikDay","InputsSelect","FormDayButton","monthDate","undefined","monthPattern","rejectedHours","sortListMonths","sort","a","b","getTime","reverse","navigate","useNavigate","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","updateMonth","_useUpdateListMonthsM","useUpdateListMonthsMutation","updateListMonths","_useDeleteMonthMutati","useDeleteMonthMutation","deleteMonth","useValidationMonthForm","_useState","useState","_useState2","isSuccess","setIsSuccess","_useState3","_useState4","formValues","setFormValues","currYearDigits","currMonthDigits","executeAddMonthInfo","_ref2","_callee2","months","updatedList","sortedMonths","_year","_month","_context2","isError","_x2","useEffect","_useFormikMonth","useFormikMonth","dataInputs","useUsersQuery","data","usersNames","UsersColors","toUpperCase","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","useValidationUserForm","resetForm","userValues","sortedUsers","localeCompare","_useFormikUser","useFormikUser","isOpen","setOpen","variant","transition","title","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","_monthURLStringFormat","monthURLStringFormat","useMonthURLToString","monthStringCapitalize","printFormHours","CollapseContainer","FormHoursContext","printFormDay","FormDayContext","dataMonthPanel","CollapseMonthsList","dataSettings","FormMonthContext","FormUserContext","pathname","useLocation","_useDataSidebar","useDataSidebar","Offcanvas","Body","component","React","Header","closeButton","toggleShow","setIsLoading","RiLogoutBoxLine","Spinner","animation","auth","signOut","then","catch","error","printAlert","message","finally","history","createBrowserHistory","back","ImArrowLeft","SettingsReturnButton","AiTwotoneSetting","SidebarLogout","_useUsersQuery","geListtUsers","getListUsersError","getListUsersIsLoading","_useMonthDataQuery","useMonthDataQuery","getMonth","getMonthError","getMonthIsLoading","useReduxListUsers","useReduxListMonths","useReduxMonthData","isShow","setShow","windowWidth","useWindowWidth","printSidebar","currentUser","Alert","show","onHide","scroll","backdrop","maxWidth","SidebarHeader","SidebarBody","SidebarNav","SidebarMenuButton","today","formatDate","getFullYear","String","padStart","day","getDate","futureDateInNext_14_Days","futureDateInNext_60_Days","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","getDatabase","_useListMonthsQuery","useListMonthsQuery","getListMonths","getListMonthsError","getListMonthsIsLoading","btnText","monthToDateFormat","_Intl$DateTimeFormat","split","window","innerWidth","setWindowWidth","handleResize","addEventListener","removeEventListener"],"sourceRoot":""}
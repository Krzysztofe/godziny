{"version":3,"file":"static/js/481.72d17e7e.chunk.js","mappings":"oHAmBA,IAVmB,SAACA,GAClB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAAgCC,MAAO,CAAEC,OAAQ,UAAWC,SACxEL,EAAMM,QAAQN,EAAMO,QACnBP,EAAMQ,OAAOR,EAAMO,QACnBP,EAAMQ,OAAOR,EAAMO,QAG3B,C,kEC4CA,IA3CmB,SAACP,GAClB,IAAAS,GACEC,EAAAA,EAAAA,MADMC,EAAMF,EAANE,OAAQC,EAAUH,EAAVG,WAAYC,EAAaJ,EAAbI,cAAeL,EAAMC,EAAND,OAAQF,EAAOG,EAAPH,QAGnD,OACEL,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACGL,EAAMe,WAAWC,KAChB,SAAAC,GAAkE,IAA/DV,EAAKU,EAALV,MAAOW,EAAKD,EAALC,MAAOC,EAAIF,EAAJE,KAAMC,EAAYH,EAAZG,aAAcC,EAAGJ,EAAHI,IAAKC,EAAGL,EAAHK,IAAKC,EAAWN,EAAXM,YAC7C,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,MAAK,CAAArB,SAAA,CACRa,IACCjB,EAAAA,EAAAA,KAACwB,EAAAA,EAAKE,MAAK,CACTC,QAAQ,OACR1B,UAAU,+BAA8BG,SAEvCa,KAGLjB,EAAAA,EAAAA,KAACwB,EAAAA,EAAKI,QAAO,CACXC,GAAIvB,EACJY,KAAMA,EACNY,KAAMxB,EACNA,MAAOI,EAAOJ,GACdyB,SAAU,SAAAC,GAAC,OAAIpB,EAAcN,EAAO0B,EAAEC,OAAO3B,MAAM,EACnD4B,OAAQvB,EACRS,IAAKA,EACLC,IAAKA,EACLC,YAAaA,EACba,KAAK,KACLlC,UAAU,iDACVC,MAAO,CAAEkC,UAAW,EAAGC,OAAQ,aAEhClB,IACCnB,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,MAAOA,EAAOC,OAAQA,EAAQF,QAASA,MAxBtCC,EA4BrB,KAIR,C,0MCVA,EAnCoB,SAACP,GACnB,IAAAS,GACEC,EAAAA,EAAAA,MADMC,EAAMF,EAANE,OAAQC,EAAUH,EAAVG,WAAYC,EAAaJ,EAAbI,cAGtB2B,EAAgB7B,EAAO8B,SAAW,IAClCC,EAA0B,+CAAAC,OAAkDH,EAAa,yBAAAG,OAAwBH,EAAa,MAEpI,OACEvC,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACGL,EAAM4C,aAAa5B,KAAI,SAAAT,GACtB,OACEN,EAAAA,EAAAA,KAACwB,EAAAA,EAAKC,MAAK,CAETxB,UAAU,uCAAsCG,UAEhDJ,EAAAA,EAAAA,KAACwB,EAAAA,EAAKoB,MAAK,CACTd,KAAMxB,EACNc,IAAK,EACLC,IAAK,IACLf,MAAOI,EAAOJ,GACdyB,SAAU,SAAAC,GAAC,OAAIpB,EAAcN,EAAO0B,EAAEC,OAAO3B,MAAM,EACnD4B,OAAQvB,EACRV,UAAU,iCACVC,MAAO,CACLC,OAAQ,GACR0C,WAAYJ,MAbXnC,EAkBX,KAGN,E,UCpBA,EApBuB,WACrB,IAKWwC,EAAAC,EAIPC,EAAAC,EATIvC,GAAWD,EAAAA,EAAAA,MAAXC,OACAwC,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAA5DH,MAEJI,EAAU,GAEVJ,KAEK,OAALA,QAAK,IAALA,GAAgB,QAAXJ,EAALI,EAAOK,iBAAS,IAAAT,OAAX,EAALA,EAAkBU,iBAAsB,OAALN,QAAK,IAALA,GAAgB,QAAXH,EAALG,EAAOK,iBAAS,IAAAR,OAAX,EAALA,EAAkBU,iBAC9C,OAAN/C,QAAM,IAANA,OAAM,EAANA,EAAQ8B,YAETc,EAAO,QAAAZ,QACA,OAALQ,QAAK,IAALA,GAAgB,QAAXF,EAALE,EAAOK,iBAAS,IAAAP,OAAX,EAALA,EAAkBQ,iBAAsB,OAALN,QAAK,IAALA,GAAgB,QAAXD,EAALC,EAAOK,iBAAS,IAAAN,OAAX,EAALA,EAAkBQ,eAAa,QAKxE,OAAOzD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBG,SAAEkD,GAC5C,E,UCFA,EArBqB,WAEnB,IAIMI,EAAS,8BACf,OACEnC,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,4CAA2CG,SAAA,EACxDJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWyD,EAAOtD,SAAC,SAExBmB,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,wBAAwBC,MAAO,CAAEyD,MAAO,QAASvD,SAAA,EAC9DJ,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CAAC9C,WAVK,CACrB,CAAER,MAAO,WAAYY,KAAM,SAAUC,cAAc,MASL,SAC1CnB,EAAAA,EAAAA,KAAA,OAAAI,SAAK,UAGPJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWyD,EAAOtD,SAAC,YAG9B,E,wCC4BA,EAxCuB,WACrB,IAAAyD,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aACbd,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAA5DH,MACRe,GAA+BC,EAAAA,EAAAA,MAAwBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAWF,EAAA,GAAEG,EAAOH,EAAA,GAErBZ,EAAYL,GAASA,EAAMK,UAM3BgB,EAAQ,eAAAvD,GAAAwD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjE,GAAuB,IAAAoC,EAAAC,EAAA,OAAA0B,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAEzC7B,EAAM,CAAD2B,EAAAE,KAAA,cAEA,OAAL7B,QAAK,IAALA,GAAgB,QAAXJ,EAALI,EAAOK,iBAAS,IAAAT,OAAX,EAALA,EAAkBU,iBAAsB,OAALN,QAAK,IAALA,GAAgB,QAAXH,EAALG,EAAOK,iBAAS,IAAAR,OAAX,EAALA,EAAkBU,iBAC9C,OAAN/C,QAAM,IAANA,OAAM,EAANA,EAAQ8B,WAAQ,CAAAqC,EAAAE,KAAA,eAAAF,EAAAG,OAAA,iBAMJ,GANIH,EAAAI,GAKrB1B,GACE7C,EAAO8B,UAAQqC,EAAAI,GAAA,CAAAJ,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACRV,EAAY,CACjBa,KAAMnB,EACNb,MAAOc,EACPT,WAAS4B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJ5B,GAAS,IACZf,UAAW9B,EAAO8B,SAClB4C,cACG1E,EAAO8B,SACRe,EAAUE,cACVF,EAAUC,mBAEd,wBAAAqB,EAAAQ,OAAA,GAAAV,EAAE,KACP,gBAxBaW,GAAA,OAAAtE,EAAAuE,MAAA,KAAAC,UAAA,KA0Bd,MAAO,CAAEC,cA5Ba,CAAEjD,SAAU,GA4BV+B,SAAAA,EAAUD,QAAAA,EACpC,ECVA,EA5ByB,WACvB,IAAAoB,EAA6CC,IAArCF,EAAaC,EAAbD,cAAelB,EAAQmB,EAARnB,SAAUD,EAAOoB,EAAPpB,QACzBsB,GAAeC,EAAAA,EAAAA,GACrBvB,GACAtE,EAAAA,EAAAA,KAAC8F,EAAAA,IAAmB,CAAC7F,UAAU,eAAeC,MAAO,CAAE6F,SAAU,aAF3DH,WAKR,OACE5F,EAAAA,EAAAA,KAACgG,EAAAA,GAAM,CAACP,cAAeA,EAAelB,SAAUA,EAASnE,UACvDmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAU,OAAMG,SAAA,EACpBJ,EAAAA,EAAAA,KAACiG,EAAY,KACbjG,EAAAA,EAAAA,KAACkG,EAAW,CAACvD,aAAc,CAAC,eAE5BpB,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,yDAAwDG,SAAA,EACrEJ,EAAAA,EAAAA,KAACmG,EAAc,KACfnG,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACLlF,KAAK,SACLmF,SAAU/B,EAAQgC,UAClBrG,UAAU,6IAA4IG,SAErJwF,WAMb,E,4BCqBA,EAhD2B,WACzB,IAAQW,GAAgCC,EAAAA,EAAAA,KAAhCD,4BACAE,GAAetD,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMqD,UAAU,IAAjEA,WACR5C,GAAmCC,EAAAA,EAAAA,KAA3B4C,EAAQ7C,EAAR6C,SAIFC,EAJwB9C,EAAZ+C,aAI0B,IAAIC,KAAKH,GAAY,KAE3DI,EACJH,GACA,IAAII,KAAKC,eAAe,QAAS,CAC/B9B,KAAM,UACNhC,MAAO,OACP+D,SAAU,QACTC,OAAOP,GAEZ,OACEpF,EAAAA,EAAAA,MAAC4F,EAAAA,EAAS,CACRlH,UAAU,6CACVC,MAAO,CAAEC,OAAQ,QAASC,SAAA,EAExBqG,IACAzG,EAAAA,EAAAA,KAACmH,EAAAA,EAAUC,KAAI,CAACnH,UAAU,4BAA2BG,SAAC,gBAK5B,OAA3BmG,QAA2B,IAA3BA,OAA2B,EAA3BA,EAA6BxF,KAAI,SAACmC,EAAemE,GAChD,OACErH,EAAAA,EAAAA,KAACmH,EAAAA,EAAUC,KAAI,CAAanH,UAAU,eAAcG,UAClDJ,EAAAA,EAAAA,KAACsH,EAAAA,GAAI,CACHC,GAAE,IAAA7E,OAAgB,OAAV+D,QAAU,IAAVA,OAAU,EAAVA,EAAaY,IACrBpH,UAAS,GAAAyC,OACPoE,IAA4B5D,GAAU4D,EAElC,YADA,YACW,yBACO1G,SAEvB8C,KATgBA,EAazB,MAGN,E,UCOA,EA/CqB,SAACnD,GACpB,IAAAS,GACEC,EAAAA,EAAAA,MADMF,EAAMC,EAAND,OAAQF,EAAOG,EAAPH,QAASM,EAAUH,EAAVG,WAAYC,EAAaJ,EAAbI,cAGrC,OACEZ,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACGL,EAAMe,WAAWC,KAAI,SAAAC,GAA4C,IAAzCc,EAAId,EAAJc,KAAM0F,EAAWxG,EAAXwG,YAAavG,EAAKD,EAALC,MAAOwG,EAAOzG,EAAPyG,QACjD,OACElG,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,MAAK,CAAArB,SAAA,EACTJ,EAAAA,EAAAA,KAACwB,EAAAA,EAAKE,MAAK,CACTC,QAASG,EACT7B,UAAU,gCAA+BG,SAExCa,KAGHM,EAAAA,EAAAA,MAACC,EAAAA,EAAKkG,OAAM,CACV7F,GAAIC,EACJA,KAAMA,EACNC,SAAU,SAAAC,GAAC,OAAIpB,EAAckB,EAAME,EAAEC,OAAO3B,MAAM,EAClD4B,OAAQvB,EACRwB,KAAK,KACLlC,UAAS,4DAAAyC,OACS,gBAAhB8E,EAAgC,eAAiB,IAEnDtH,MAAO,CACLmC,OAAQ,WACRjC,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,UAAAI,SAASoH,IAED,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAAS1G,KAAI,SAAC4G,GACb,OACE3H,EAAAA,EAAAA,KAAA,UAAqBM,MAAOqH,EAAOvH,SAChCuH,GADUA,EAIjB,QAEF3H,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,MAAOwB,EAAMvB,OAAQA,EAAQF,QAASA,MA/BnCY,EAkCrB,KAGN,ECtBA,EAzBsB,SAAClB,GAAkB,IAAD+C,EAC9BpC,GAAWD,EAAAA,EAAAA,MAAXC,OACAkF,GAAeC,EAAAA,EAAAA,GAAa9F,EAAMuE,QAAS,oBAA3CsB,WACA1C,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAA5DH,MACFkC,GAAoB,OAALlC,QAAK,IAALA,GAAgB,QAAXJ,EAALI,EAAOK,iBAAS,IAAAT,OAAX,EAALA,EAAkBsC,eAAgB,EAEvD,OACE7D,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAT,SAAA,EACEJ,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACLlF,KAAK,SACLmF,SAAUtG,EAAMuE,QAAQgC,UACxBrG,UAAU,mEAAkEG,SAE3EwF,KAGH5F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAAgCC,MAAO,CAAEC,OAAQ,QAASC,SACtEgF,GAAgB1E,EAAOkH,MAAQ,GAAsB,IAAjBxC,EACjC,8BACA,OAIZ,E,UCgBA,EA1CuB,WACrB,IAAmByC,GAAc1E,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM0E,SAAS,IAA1EA,UAEFC,EAAQF,GAAwB,GAEhCG,EAAa,OAALD,QAAK,IAALA,OAAK,EAALA,EAAOhH,KAAI,SAAAC,GACvB,OADkCA,EAARiH,QAE5B,IAiCA,MAAO,CAAEC,iBA/BgB,CACvB,CACEpG,KAAM,WACN0F,YAAY,GAAD9E,OAAsB,IAAjBsF,EAAMG,OAAe,cAAgB,aACrDlH,MAAO,kBACPwG,QAASO,GAEX,CACElG,KAAM,QACN0F,YAAa,UACbvG,MAAO,2BACPwG,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGvC,CACE3F,KAAM,QACN0F,YAAa,cACbvG,MAAO,yBACPwG,QAAS,CAAC,gBAAY,UAaCW,eAVJ,CACrB,CACE9H,MAAO,OACPW,MAAO,mBACPC,KAAM,OACNC,cAAc,EACdC,IAAKiH,EAAAA,GACLhH,IAAKiH,EAAAA,KAIX,E,8BChDaC,EAAmBC,EAAAA,GAAW,CACzCP,SAAUO,EAAAA,KAEPC,KAAK,gBAAiB,sBAAiB,SAAAnI,GAAK,MAAc,cAAVA,CAAgB,IAChEoI,SAAS,sBACZd,MAAOY,EAAAA,KAEJC,KACC,iBACA,0BACA,SAAAnI,GAAK,MAAc,kBAAVA,CAAyB,IAEnCoI,SAAS,0BACZC,MAAOH,EAAAA,KAEJC,KACC,iBACA,wBACA,SAAAnI,GAAK,MAAc,gBAAVA,CAAuB,IAEjCoI,SAAS,0BCgEd,EAnEqB,WACnB,IAAAE,GAA0BC,EAAAA,EAAAA,MAAmBC,GAAA1E,EAAAA,EAAAA,GAAAwE,EAAA,GAAtCG,EAAMD,EAAA,GAAExE,EAAOwE,EAAA,GACd5F,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAA5DH,MACA4E,GAAc3E,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM0E,SAAS,IAA/DA,UACRjE,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aAEfyB,EAAgB,CACpB5D,GAAI,GACJmH,KAAMX,EAAAA,GACNT,MAAO,GACPK,SAAU,YACVU,MAAO,GACPM,UAAW,IAGPC,EAAaX,EAEbhE,EAAQ,eAAAvD,GAAAwD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjE,GAA0B,IAAAoC,EAAAC,EAAAoG,EAAAF,EAAAG,EAAA,OAAA3E,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,WAE9C7B,MACM,OAALA,QAAK,IAALA,GAAgB,QAAXJ,EAALI,EAAOK,iBAAS,IAAAT,OAAX,EAALA,EAAkBsC,eAAgB1E,EAAOkH,MAAQ,GACb,KAA9B,OAAL1E,QAAK,IAALA,GAAgB,QAAXH,EAALG,EAAOK,iBAAS,IAAAR,OAAX,EAALA,EAAkBqC,eAAmB,CAAAP,EAAAE,KAAA,eAAAF,EAAAG,OAAA,iBAiBpC,GAbCiE,EACJnB,IACS,OAATA,QAAS,IAATA,GAEE,QAFOqB,EAATrB,EAAWuB,MAAK,SAACC,GACf,OAAOA,EAAKrB,WAAavH,EAAOuH,QAClC,WAAE,IAAAkB,OAFO,EAATA,EAEIF,WAEAG,GAAgBjE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBzE,GAAM,IACTmB,IAAI0H,EAAAA,EAAAA,KACJ3B,OAAQlH,EAAOkH,MACfqB,UAAWA,GAAa,KAAEpE,EAAAI,GAG5B/B,GAAK2B,EAAAI,GAAA,CAAAJ,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACIgE,EAAO,CACZ7D,KAAMnB,EACNb,MAAOc,EACPwF,WAASrE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACJjC,GAAK,IACRK,WAAS4B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACC,OAALjC,QAAK,IAALA,OAAK,EAALA,EAAOK,WAAS,IACnB6B,aAAclC,EAAMK,UAAU6B,aAAegE,EAAiBxB,MAC9DpE,eACEN,EAAMK,UAAUC,eAAiB4F,EAAiBxB,QAGtD6B,QAAQ,EAADtE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAEAjC,EAAMuG,QAAQ,IAAE,IACnBC,KAAMxG,EAAMuG,QAAQ,GAAGC,KAAI,GAAAhH,QAAAiH,EAAAA,EAAAA,GACnBzG,EAAMuG,QAAQ,GAAGC,MAAI,CAAEN,IAC3B,CAACA,MAAiB1G,QAAAiH,EAAAA,EAAAA,GAErBzG,EAAMuG,QAAQG,MAAM,SAG3B,wBAAA/E,EAAAQ,OAAA,GAAAV,EAAE,KACP,gBA7CaW,GAAA,OAAAtE,EAAAuE,MAAA,KAAAC,UAAA,KA+Cd,MAAO,CAAEC,cAAAA,EAAeyD,WAAAA,EAAY3E,SAAAA,EAAUD,QAAAA,EAChD,ECrDA,EArBuB,WAAO,IAADxB,EAC3B+G,EAA6CC,IAArC1B,EAAcyB,EAAdzB,eAAgBF,EAAgB2B,EAAhB3B,iBACxB6B,EAAyDC,IAAjDvE,EAAasE,EAAbtE,cAAeyD,EAAUa,EAAVb,WAAY3E,EAAQwF,EAARxF,SAAUD,EAAOyF,EAAPzF,QACrCpB,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAA5DH,MACFV,EAAgB,OAALU,QAAK,IAALA,GAAgB,QAAXJ,EAALI,EAAOK,iBAAS,IAAAT,OAAX,EAALA,EAAkBN,SAEnC,OACExC,EAAAA,EAAAA,KAACgG,EAAAA,GAAM,CACLP,cAAeA,EACf8C,iBAAkBW,EAClB3E,SAAUA,EAASnE,UAEnBmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAS,GAAAyC,OAAkB,IAAbF,EAAiB,oBAAsB,GAAE,SAAQpC,SAAA,EACnEJ,EAAAA,EAAAA,KAACiK,EAAY,CAACnJ,WAAYoH,KAC1BlI,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CAAC9C,WAAYsH,KACxBpI,EAAAA,EAAAA,KAACkK,EAAa,CAAC5F,QAASA,QAIhC,E,UCTA,EAhB+B,WAC7B,IAAQmC,GAAetD,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMqD,UAAU,IAAjEA,WAYR,MAAO,CAAE8B,iBAVgBC,EAAAA,GAAW,CAClC2B,UAAW3B,EAAAA,KAERC,KACC,iBACA,yBACA,SAAAnI,GAAK,YAAc8J,IAAV9J,KAAkC,OAAVmG,QAAU,IAAVA,GAAAA,EAAY4D,SAAS/J,GAAM,MAKpE,ECAagK,EAA2B,CACtCzI,GAAI,GACJ4H,QAhB6B,CAC7B,CAAE5H,GAAI,YAAa6H,KAAM,IACzB,CAAE7H,GAAI,WAAY6H,KAAM,IACxB,CAAE7H,GAAI,WAAY6H,KAAM,KAcxBnG,UAXiC,CACjCf,SAAU,EACV4C,aAAc,EACd5B,eAAgB,EAChBC,cAAe,EACf8G,cAAe,ICfJC,EAAiB,SAAC/D,GAA0B,IAADzF,EACtD,OAAOyF,IAA4B,QAAlBzF,GAAA2I,EAAAA,EAAAA,GAAQlD,UAAU,IAAAzF,OAAA,EAAdA,EAAiByJ,MAAK,SAACC,EAAWC,GAIrD,OAHc,IAAI9D,KAAK6D,GAAGE,UACZ,IAAI/D,KAAK8D,GAAGC,SAG5B,IAAGC,UAEL,ECsEA,EAzDuB,WACrB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBC,GAA+BC,EAAAA,EAAAA,MAAwBC,GAAA9G,EAAAA,EAAAA,GAAA4G,EAAA,GAAhDG,EAAWD,EAAA,GAAE5G,EAAO4G,EAAA,GAC3BE,GAA2BC,EAAAA,EAAAA,MAApBC,GAAiDlH,EAAAA,EAAAA,GAAAgH,EAAA,GAAjC,GACvBG,GAAsBC,EAAAA,EAAAA,MAAfC,GAAuCrH,EAAAA,EAAAA,GAAAmH,EAAA,GAA5B,GACV9E,GAAetD,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMqD,UAAU,IAAjEA,WACA8B,EAAqBmD,IAArBnD,iBACRoD,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAzH,EAAAA,EAAAA,GAAAuH,EAAA,GAA1CG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAoCJ,EAAAA,EAAAA,UAAS,CAAEzB,UAAW,KAAK8B,GAAA7H,EAAAA,EAAAA,GAAA4H,EAAA,GAAxDE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BxG,EAAgB,CAAE0E,UAAU,GAADzH,OAAK0J,EAAAA,GAAc,KAAA1J,OAAI2J,EAAAA,KAElDnD,EAAaX,EAEbhE,EAAQ,eAAAvD,GAAAwD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjE,GAA0B,IAAAwE,EAAAhC,EAAAsG,EAAA,OAAA/E,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAK1B,OAJhBG,EAAOxE,EAAOyJ,UAAUP,MAAM,EAAG,GACjC1G,EAAQxC,EAAOyJ,UAAUP,OAAO,GAChCJ,GAAqBrE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtBmF,GAAY,IACfzI,GAAInB,EAAOyJ,YAAStF,EAAAE,KAAA,EAGhBoG,EAAY,CAAEjG,KAAAA,EAAMhC,MAAAA,EAAOsG,UAAAA,IAAa,KAAD,EAC7C2C,EAAczL,GAAQ,wBAAAmE,EAAAQ,OAAA,GAAAV,EAAA,KACvB,gBAVaW,GAAA,OAAAtE,EAAAuE,MAAA,KAAAC,UAAA,KAYR8G,EAAmB,eAAAC,GAAA/H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8H,EAAO9L,GAA0B,IAAAwE,EAAAhC,EAAAuJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAApI,EAAAA,EAAAA,KAAAG,MAAA,SAAAkI,GAAA,cAAAA,EAAAhI,KAAAgI,EAAA/H,MAAA,WACvD+G,EAAU,CAADgB,EAAA/H,KAAA,SAKqC,OAJ1CG,EAAOxE,EAAOyJ,UAAUP,MAAM,EAAG,GACjC1G,EAAQxC,EAAOyJ,UAAUP,OAAO,GAChC6C,EAAShG,GAAUkD,EAAAA,EAAAA,GAAOlD,GAAc,GACxCiG,EAAW,GAAAhK,QAAAiH,EAAAA,EAAAA,GAAO8C,GAAM,IAAA/J,OAAKwC,EAAI,KAAAxC,OAAIQ,KACrCyJ,EAAenC,EAAekC,GAAYI,EAAA/H,KAAA,EAE1CuG,EAAiBqB,GAAc,KAAD,EACpC7B,EAAS,IAADpI,OAAKhC,EAAOyJ,YAAa2C,EAAA/H,KAAA,qBACxBT,EAAQyI,QAAQ,CAADD,EAAA/H,KAAA,SAEgB,OADlCG,EAAOxE,EAAOyJ,UAAUP,MAAM,EAAG,GACjC1G,EAAQxC,EAAOyJ,UAAUP,OAAO,GAAEkD,EAAA/H,KAAA,GAClC0G,EAAY,CAAEvG,KAAAA,EAAMhC,MAAAA,IAAS,KAAD,IAClC8J,EAAAA,EAAAA,GAAM,IAAI,yBAAAF,EAAAzH,OAAA,GAAAmH,EAAA,KAEb,gBAhBwBS,GAAA,OAAAV,EAAAhH,MAAA,KAAAC,UAAA,KA4BzB,OAVA0H,EAAAA,EAAAA,YAAU,WACJ5I,EAAQwH,UACVC,GAAa,GACRA,GAAa,EACtB,GAAG,CAACzH,EAAQwH,aAEZoB,EAAAA,EAAAA,YAAU,WACRZ,EAAoBJ,EACtB,GAAG,CAACJ,EAAWR,IAER,CAAE7F,cAAAA,EAAeyD,WAAAA,EAAY3E,SAAAA,EAAUD,QAAAA,EAChD,EC5BA,EAvCyB,WACvB,IAAA6I,EAAyDC,IAAjD3H,EAAa0H,EAAb1H,cAAeyD,EAAUiE,EAAVjE,WAAY3E,EAAQ4I,EAAR5I,SAAUD,EAAO6I,EAAP7I,QACrCsB,GAAeC,EAAAA,EAAAA,GACrBvB,GACAtE,EAAAA,EAAAA,KAAC8F,EAAAA,IAAmB,CAAC7F,UAAU,eAAeC,MAAO,CAAE6F,SAAU,aAF3DH,WAKFyH,EAAa,CACjB,CACE/M,MAAO,YACPY,KAAM,QACND,MAAM,qBACNE,cAAc,EACdC,IAAI,GAADsB,OAAK0J,EAAAA,GAAc,KAAA1J,OAAI2J,EAAAA,IAC1BhL,IAAK,YAIT,OACErB,EAAAA,EAAAA,KAACgG,EAAAA,GAAM,CACLP,cAAeA,EACf8C,iBAAkBW,EAClB3E,SAAUA,EAASnE,UAEnBmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAU,OAAMG,SAAA,EACpBJ,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CAAC9C,WAAYuM,KAExBrN,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACLlF,KAAK,SACLmF,SAAU/B,EAAQgC,UAClBrG,UAAU,4IAA2IG,SAEpJwF,QAKX,E,UCVA,EA/B8B,WAC5B,IAAciC,GAAcyF,EAAAA,EAAAA,MAApBC,KAEFC,EAAsB,OAAT3F,QAAS,IAATA,OAAS,EAATA,EAAW9G,KAAI,SAAAC,GAAW,OAAAA,EAARiH,QAAkC,IACjEwF,EAAuB,OAAT5F,QAAS,IAATA,OAAS,EAATA,EAAW9G,KAAI,SAAAwL,GAAY,OAAAA,EAATtD,SAAoC,IAwB1E,MAAO,CAAEV,iBAtBgBC,EAAAA,GAAW,CAClCP,SAAUO,EAAAA,KAEPpH,IAAI,EAAG,iBACPC,IAAI,GAAI,iBACRoH,KACC,iBACA,yBACA,SAAAnI,GAAK,YACO8J,IAAV9J,KACW,OAAVkN,QAAU,IAAVA,GAAAA,EAAYnD,SAAS/J,EAAM,GAAGoN,cAAgBpN,EAAMsJ,MAAM,IAAG,IAEjElB,SAAS,sBACZO,UAAWT,EAAAA,KAERC,KACC,iBACA,qBACA,SAAAnI,GAAK,YAAc8J,IAAV9J,KAAmC,OAAXmN,QAAW,IAAXA,GAAAA,EAAapD,SAAS/J,GAAM,MAKrE,ECYA,EApCsB,WACpB,IAAAqN,GAA2BC,EAAAA,EAAAA,MAAoBC,GAAAzJ,EAAAA,EAAAA,GAAAuJ,EAAA,GAAxCG,EAAOD,EAAA,GAAEvJ,EAAOuJ,EAAA,GACftF,EAAqBwF,IAArBxF,iBAGFR,GAFsBuF,EAAAA,EAAAA,MAApBC,MAEmB,GAQrBrE,EAAaX,EACbhE,EAAQ,eAAAgI,GAAA/H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EACfjE,EAAiBM,GAAA,IAAAgN,EAAAC,EAAAC,EAAA,OAAAzJ,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAYhB,OAXCiJ,EAAShN,EAATgN,UAEIC,GAAU9I,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXzE,GAAM,IACTuH,SACEvH,EAAOuH,SAAS2B,MAAM,EAAG,GAAG8D,cAAgBhN,EAAOuH,SAAS2B,MAAM,GACpE/H,IAAI0H,EAAAA,EAAAA,OAGA2E,EAAc,GAAAxL,QAAAiH,EAAAA,EAAAA,GAAI5B,GAAK,CAAEkG,IAAYxD,MAAK,SAACC,EAAGC,GAAC,OACnDD,EAAEzC,SAASkG,cAAcxD,EAAE1C,SAAS,IACrCpD,EAAAE,KAAA,EAEK+I,EAAQI,GAAa,KAAD,EAC1BF,IAAY,wBAAAnJ,EAAAQ,OAAA,GAAAV,EAAA,KACb,gBAjBaW,EAAA2H,GAAA,OAAAV,EAAAhH,MAAA,KAAAC,UAAA,KAmBd,MAAO,CAAEC,cA1Ba,CACpB5D,GAAI,GACJoG,SAAU,GACVgB,UAAW,WAuBWC,WAAAA,EAAY3E,SAAAA,EAAUD,QAAAA,EAChD,ECOA,EA5CwB,WACtB,IAAA8J,EAAyDC,IAAjD5I,EAAa2I,EAAb3I,cAAeyD,EAAUkF,EAAVlF,WAAY3E,EAAQ6J,EAAR7J,SAAUD,EAAO8J,EAAP9J,QACrCsB,GAAeC,EAAAA,EAAAA,GACrBvB,GACAtE,EAAAA,EAAAA,KAAC8F,EAAAA,IAAmB,CAAC7F,UAAU,eAAeC,MAAO,CAAE6F,SAAU,aAF3DH,WAqBR,OACE5F,EAAAA,EAAAA,KAACgG,EAAAA,GAAM,CACLP,cAAeA,EACf8C,iBAAkBW,EAClB3E,SAAUA,EAASnE,UAEnBmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAU,OAAMG,SAAA,EACpBJ,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CAAC9C,WAvBC,CACjB,CACER,MAAO,WACPY,KAAM,OACND,MAAO,kBACPE,cAAc,EACdG,YAAa,aAEf,CACEhB,MAAO,YACPY,KAAM,QACND,MAAO,cACPE,cAAc,OAaZnB,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACLlF,KAAK,SACLmF,SAAU/B,EAAQgC,UAClBrG,UAAU,4IAA2IG,SAEpJwF,QAKX,E,oBCJA,EAnC0B,SAAC7F,GACzB,IAAA4L,GAA0BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAzH,EAAAA,EAAAA,GAAAuH,EAAA,GAAlC2C,EAAMzC,EAAA,GAAE0C,EAAO1C,EAAA,GACtB,OACEtK,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAT,SAAA,EACEmB,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CACLoI,QAAQ,kBACRC,QAAS,kBAAMF,GAAQ,SAAAzJ,GAAI,OAAKA,CAAI,GAAC,EACrC,gBAAewJ,EACf,gBAAc,wBACdnM,KAAK,KACLlC,UAAS,yGAAAyC,OACP4L,EAAS,mBAAqB,oBAEhCpO,MAAO,CACLwO,WAAY,uBACZtO,SAAA,CAEDL,EAAM4O,OACP3O,EAAAA,EAAAA,KAAC4O,EAAAA,IAA0B,CACzB3O,UAAU,OACVC,MAAO,CACL2O,UAAU,GAADnM,OAAK4L,EAAS,iBAAmB,GAAE,KAC5CQ,mBAAoB,eAI1B9O,EAAAA,EAAAA,KAAC+O,EAAAA,EAAQ,CAACC,GAAIV,EAAOlO,UACnBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,4CAA2CG,SACvDL,EAAMK,eAKjB,E,WCMA,GAtCuB,WAAO,IAAD6O,EACnBC,GAAyBC,EAAAA,GAAAA,KAAzBD,qBACAhM,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,UAAU,IAA5DH,MAEFkM,GACmB,QAAvBH,EAAAC,EAAqB,UAAE,IAAAD,OAAA,EAAvBA,EAAyBvB,eAAgBwB,EAAqBtF,MAAM,GAEhEyF,EAAiBnM,IACrBlD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMG,UACnBJ,EAAAA,EAAAA,KAACsP,EAAiB,CAACX,MAAO,iBAAiBvO,UACzCJ,EAAAA,EAAAA,KAACuP,EAAgB,QAIjBC,EAAetM,IAASlD,EAAAA,EAAAA,KAACyP,EAAc,IAqB7C,MAAO,CAAEC,eAnBc,EACrB1P,EAAAA,EAAAA,KAACsP,EAAiB,CAACX,MAAOS,EAAsBhP,UAC9CJ,EAAAA,EAAAA,KAAC2P,EAAkB,MAErBN,EACAG,GAcuBI,aAXJ,EACnB5P,EAAAA,EAAAA,KAACsP,EAAiB,CAACX,MAAO,sBAAiBvO,UACzCJ,EAAAA,EAAAA,KAAC6P,EAAgB,OAEnB7P,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMG,UACnBJ,EAAAA,EAAAA,KAACsP,EAAiB,CAACX,MAAO,0BAAqBvO,UAC7CJ,EAAAA,EAAAA,KAAC8P,EAAe,SAMxB,ECvBA,GAnBoB,WAClB,IAAQlJ,GAAiB9C,EAAAA,EAAAA,KAAjB8C,aACRmJ,EAAyCC,KAAjCN,EAAcK,EAAdL,eAAgBE,EAAYG,EAAZH,aAExB,OACErO,EAAAA,EAAAA,MAAC0O,EAAAA,EAAUC,KAAI,CAACjQ,UAAU,4EAA2EG,SAAA,CAClGwG,GACC8I,EAAe3O,KAAI,SAACoP,EAAW9I,GAC7B,OAAOrH,EAAAA,EAAAA,KAACoQ,EAAAA,SAAc,CAAAhQ,SAAY+P,GAAN9I,EAC9B,KAEAT,GACAgJ,EAAa7O,KAAI,SAACoP,EAAW9I,GAC3B,OAAOrH,EAAAA,EAAAA,KAACoQ,EAAAA,SAAc,CAAAhQ,SAAY+P,GAAN9I,EAC9B,MAGR,ECXA,GATsB,WACpB,OACErH,EAAAA,EAAAA,KAACiQ,EAAAA,EAAUI,OAAM,CACfpQ,UAAU,kCACVqQ,aAAa,GAGnB,ECkBA,GAnB0B,SAACvQ,GACzB,IAAQmP,GAAyBC,EAAAA,GAAAA,KAAzBD,qBACAtI,GAAiB9C,EAAAA,EAAAA,KAAjB8C,aAER,OACErF,EAAAA,EAAAA,MAAC6E,EAAAA,EAAM,CACLoI,QAAQ,UACRC,QAAS1O,EAAMwQ,WACftQ,UAAW,6GACXC,MAAO,CACLC,OAAQ,UACRC,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,OAAAI,SAAK,cACJwG,GAAe5G,EAAAA,EAAAA,KAAA,OAAAI,SAAM8O,KAA8BlP,EAAAA,EAAAA,KAAA,OAAAI,SAAK,iBAG/D,E,iCCkCA,GAnDsB,WACpB,IAAM0K,GAAWC,EAAAA,EAAAA,MACjBY,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAzH,EAAAA,EAAAA,GAAAuH,EAAA,GAA1CrF,EAASuF,EAAA,GAAE2E,EAAY3E,EAAA,GAe1BjG,GACFrE,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,oEAAmEG,SAAA,EAChFJ,EAAAA,EAAAA,KAACyQ,GAAAA,IAAe,CAACxQ,UAAU,eAAe,aAkB9C,OAbIqG,IACFV,GACE5F,EAAAA,EAAAA,KAAC0Q,GAAAA,EAAO,CACNC,UAAU,SACVxO,KAAK,KACLqM,QAAQ,YACRvO,UAAU,UAASG,UAEnBJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBG,SAAC,mBAMtCJ,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACLqI,QAnCW,WACb+B,GAAa,GACbI,GAAAA,GACGC,UACAC,MAAK,WACJhG,EAAS,IACX,IACCiG,OAAM,SAAAC,GAAK,OAAIhE,EAAAA,EAAAA,GAAMgE,EAAM,IAC3BC,SAAQ,WACPT,GAAa,EACf,GACJ,EAyBIvQ,UAAU,6DACVC,MAAO,CACLmC,OAAQ,WAEVgE,SAAUC,EAAUlG,SAEnBwF,GAGP,E,oBCjCA,GApB6B,WAC3B,IAAMsL,GAAUC,EAAAA,GAAAA,MAIhB,OACEnR,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACLqI,QALiB,WACnByC,EAAQE,MACV,EAIInR,UAAU,gEACVC,MAAO,CACLmC,OAAQ,WACRjC,UAEFmB,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,kEAAiEG,SAAA,EAC9EJ,EAAAA,EAAAA,KAACqR,GAAAA,IAAW,CAACpR,UAAU,eAAe,oBAI9C,ECUA,GAzBmB,WACjB,IAAQ2G,GAAiB9C,EAAAA,EAAAA,KAAjB8C,aACFlD,EAAS,mCAEf,OACE1D,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBG,UACrCmB,EAAAA,EAAAA,MAAC4F,EAAAA,EAAS,CAAA/G,SAAA,EACNwG,IACA5G,EAAAA,EAAAA,KAACmH,EAAAA,EAAUC,KAAI,CAACnH,UAAWyD,EAAOtD,UAChCJ,EAAAA,EAAAA,KAACsR,GAAoB,OAGzBtR,EAAAA,EAAAA,KAACmH,EAAAA,EAAUC,KAAI,CAACnH,UAAWyD,EAAOtD,UAChCmB,EAAAA,EAAAA,MAAC+F,EAAAA,GAAI,CAACC,GAAG,cAActH,UAAU,oCAAmCG,SAAA,EAClEJ,EAAAA,EAAAA,KAACuR,EAAAA,IAAgB,IAAG,oBAGxBvR,EAAAA,EAAAA,KAACmH,EAAAA,EAAUC,KAAI,CAACnH,UAAWyD,EAAOtD,UAChCJ,EAAAA,EAAAA,KAACwR,GAAa,UAKxB,E,WCNA,GAd0B,WACxB,IAAMC,GAAWC,EAAAA,EAAAA,MAEjBC,GAAmCrE,EAAAA,EAAAA,MAA3BC,EAAIoE,EAAJpE,KAAMyD,EAAKW,EAALX,MAAO1K,EAASqL,EAATrL,WAErB4G,EAAAA,EAAAA,YAAU,WACRuE,GAASG,EAAAA,GAAAA,IAAarE,IAEtBkE,GAASI,EAAAA,GAAAA,IAAkBb,IAE3BS,GAASK,EAAAA,GAAAA,IAAsBxL,GACjC,GAAG,CAACiH,EAAMyD,EAAO1K,EAAWmL,GAC9B,E,sBCMA,GAlB0B,WACxB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB7N,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aAErB+N,GAAmCC,EAAAA,EAAAA,IAAkB,CACnD9M,KAAMnB,EACNb,MAAOc,IAFDuJ,EAAIwE,EAAJxE,KAAMyD,EAAKe,EAALf,MAAO1K,EAASyL,EAATzL,WAKrB4G,EAAAA,EAAAA,YAAU,WACRuE,GAASQ,EAAAA,GAAAA,IAAS1E,IAElBkE,GAASS,EAAAA,GAAAA,IAAclB,IAEvBS,GAASU,EAAAA,GAAAA,IAAkB7L,GAC7B,GAAG,CAACiH,EAAMyD,EAAO1K,EAAWmL,GAC9B,ECkCA,GA/CqB,WACnBW,MACAC,EAAAA,GAAAA,KACAC,KAEA,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR5G,GAA0BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAzH,EAAAA,EAAAA,GAAAuH,EAAA,GAAlC8G,EAAM5G,EAAA,GAAE6G,EAAO7G,EAAA,GACd8G,GAAgBC,EAAAA,EAAAA,KAAhBD,YASR,OAJAzF,EAAAA,EAAAA,YAAU,WACRyF,GAAe,KAAOD,GAAQ,EAChC,GAAG,CAACC,KAGF3S,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,UACI,CAAC,KAAKiK,SAASkI,KACfhR,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAT,SAAA,EACEJ,EAAAA,EAAAA,KAACiQ,EAAAA,EAAS,CACR4C,KAAMJ,EACNK,OAbU,WAAH,OAASJ,GAAQ,EAAO,EAc/B5Q,KAAK,mBACLiR,QAAQ,EACRC,UAAU,EACV/S,UAAS,GAAAyC,OACPiQ,GAAe,KAAO,kBAAiB,mBAEzCzS,MAAO,CACLyD,MAAOgP,GAAe,IAAM,MAAQ,QACpCM,SAAUN,GAAe,KAAO,SAChCvS,UAEFmB,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,gDAA+CG,SAAA,EAC5DJ,EAAAA,EAAAA,KAACkT,GAAa,KACdlT,EAAAA,EAAAA,KAACmT,GAAW,KACZnT,EAAAA,EAAAA,KAACoT,GAAU,UAGfpT,EAAAA,EAAAA,KAACqT,GAAiB,CAAC9C,WA9BR,WAAH,OAASmC,GAAQ,SAAA5N,GAAI,OAAKA,CAAI,GAAE,QAmClD,C,gIC1DA,IAAMwO,EAAQ,IAAIzM,KAEZ0M,EAAa,SAACvK,GAClB,IAAM9D,EAAO8D,EAAKwK,cACZtQ,EAAQuQ,OAAOzK,EAAKiJ,WAAa,GAAGyB,SAAS,EAAG,KAChDC,EAAMF,OAAOzK,EAAK4K,WAAWF,SAAS,EAAG,KAC/C,MAAM,GAANhR,OAAUwC,EAAI,KAAAxC,OAAIQ,EAAK,KAAAR,OAAIiR,EAC7B,EAEME,EAA2B,IAAIhN,KAAKyM,EAAM1I,UAAY,SACtDkJ,EAA2B,IAAIjN,KAAKyM,EAAM1I,UAAY,QAE/CwB,EAAiBkH,EAAME,cACvBnH,EAAkBoH,OAAOH,EAAMrB,WAAa,GAAGyB,SAAS,EAAG,KAI3DrL,GAHgBoL,OAAOH,EAAMM,WAAWF,SAAS,EAAG,KACnCH,EAAWD,GAEPC,EAAWM,IAChCvL,EAAqBiL,EAAWO,GAIR,IAAI/M,KAAKC,eAAe,QAAS,CACpE9B,KAAM,UACNhC,MAAO,OACP+D,SAAU,QACTC,OAAOoM,E,0FCXGS,GAAMC,EAAAA,EAAAA,IAVI,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAKI1D,GAAO2D,EAAAA,EAAAA,IAAQR,IACJS,EAAAA,EAAAA,IAAYT,E,mECMpC,IAd2B,WACzB,IAAMtC,GAAWC,EAAAA,EAAAA,MAEjB+C,GAAmCC,EAAAA,EAAAA,MAA3BnH,EAAIkH,EAAJlH,KAAMyD,EAAKyD,EAALzD,MAAO1K,EAASmO,EAATnO,WAErB4G,EAAAA,EAAAA,YAAU,WACRuE,GAASkD,EAAAA,EAAAA,IAAcpH,IAEvBkE,GAASmD,EAAAA,EAAAA,IAAmB5D,IAE5BS,GAASoD,EAAAA,EAAAA,IAAuBvO,GAClC,GAAG,CAACiH,EAAMyD,EAAO1K,EAAWmL,GAC9B,C,2ECaA,IA5BqB,SAACnN,EAAuBwQ,IAE3C5H,EAAAA,EAAAA,YAAU,WACR,GAAI5I,EAAQyI,QAAS,CACnB,IAAMiE,EAAQ1M,EAAQ0M,MAChB+D,EAAS/D,GAAS,WAAYA,GAASA,EAAMgE,QAAUhE,EAAMgE,OAEnEC,IAAAA,KAAU,CACRC,KAAK,mBAADxS,OAAWqS,GAAU,IACzBI,mBAAoB,qBAExB,CACF,GAAG,CAAC7Q,EAAQyI,UAEZ,IAAInH,EAAiCkP,EAWrC,OATIxQ,EAAQgC,YACVV,GACE5F,EAAAA,EAAAA,KAAC0Q,EAAAA,EAAO,CAACC,UAAU,SAASxO,KAAK,KAAKqM,QAAQ,YAAWpO,UACvDJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBG,SAAC,kBAMjC,CAAEwF,WAAAA,EACX,C,+CCZA,IAjBsB,WAAO,IAAD5E,EAClByF,GAAetD,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMqD,UAAU,IAAjEA,WAaR,MAAO,CAAEF,4BAX2BE,IAA4B,QAAlBzF,GAAA2I,EAAAA,EAAAA,GAAQlD,UAAU,IAAAzF,OAAA,EAAdA,EAAiBD,KACjE,SAACoJ,GACC,IAAMiL,EAAoB,IAAIvO,KAAKsD,GACnC,OAAO,IAAIpD,KAAKC,eAAe,QAAS,CACtC9B,KAAM,UACNhC,MAAO,OACP+D,SAAU,QACTC,OAAOkO,EACZ,KAIJ,C,qCCOA,IAvB4B,WAC1B,IACM1O,GADe8L,EAAAA,EAAAA,MAAbD,SACkB3I,MAAM,GAIhC,GAFqBlD,GAAY,gBAAgB+B,KAAK/B,GAEpC,CAAC,IAAD2O,EACV1O,EAAuBD,GAAY,IAAIG,KAAKH,GAQlD,MAAO,CAACwI,qBANNvI,IAKE,QALkB0O,EACpB,IAAItO,KAAKC,eAAe,QAAS,CAC/B9B,KAAM,UACNhC,MAAO,OACP+D,SAAU,eACV,IAAAoO,OAAA,EAJFA,EAIInO,OAAOP,IAEf,CAEE,MAAO,CAACuI,qBADqB,GAIjC,C,qCCVA,IAXqB,WACnB,IACMxI,GADe8L,EAAAA,EAAAA,MAAbD,SACkB+C,MAAM,KAAK1L,OAAO,GAAG,GACzC7F,EAAsB,OAAR2C,QAAQ,IAARA,OAAQ,EAARA,EAAUkD,MAAM,EAAG,GACjC5F,EAAuB,OAAR0C,QAAQ,IAARA,OAAQ,EAARA,EAAUkD,OAAO,GAItC,MAAO,CAAElD,SAAAA,EAAU3C,YAAAA,EAAaC,aAAAA,EAAc4C,aAFzB,gBAAgB6B,KAAK/B,GAG5C,C,+CCSA,IAlBuB,WACrB,IAAAiF,GAAsCC,EAAAA,EAAAA,UAAS2J,OAAOC,YAAW3J,GAAAzH,EAAAA,EAAAA,GAAAuH,EAAA,GAA1DgH,EAAW9G,EAAA,GAAE4J,EAAc5J,EAAA,GAclC,OAbAqB,EAAAA,EAAAA,YAAU,WACR,IAAMwI,EAAe,WACnBD,EAAeF,OAAOC,WACxB,EAGA,OAFAD,OAAOI,iBAAiB,SAAUD,GAE3B,WACLH,OAAOK,oBAAoB,SAAUF,EACvC,CACF,GAAG,IAII,CAAE/C,YAAAA,EACX,C,qGChBakD,EAAc,SAACC,GAC1B,MAAO,CACLnH,MAAOmH,EACPC,kBAAkB,EAClBZ,mBAAoB,UACpBa,kBAAmB,OACnBC,kBAAmB,MACnBC,iBAAkB,MAEtB,EAEalJ,EAAQ,SAACgE,GACpBiE,IAAAA,KAAU,CACRC,KAAK,kBAADxS,OAAUsO,GACdmE,mBAAoB,qBAExB,C","sources":["components/inputs/FormErrors.tsx","components/inputs/InputsText.tsx","components/inputs/inputsRange/InputsRange.tsx","components/formHours/FormHoursError.tsx","components/formHours/FormHoursTop.tsx","components/formHours/useFormikHours.tsx","components/formHours/FormHoursContext.tsx","components/CollapseMonthsList.tsx","components/inputs/InputsSelect.tsx","components/formDay/FormDayButton.tsx","components/formDay/useDataFormDay.tsx","components/formDay/validationFormDay.tsx","components/formDay/useFormikDay.tsx","components/formDay/FormDayContext.tsx","components/formMonth/useValidationMonthForm.tsx","components/formMonth/dataFormMonth.tsx","utils/sortListMonths.tsx","components/formMonth/useFormikMonth.tsx","components/formMonth/FormMonthContext.tsx","components/formUser/useValidationFormUser.tsx","components/formUser/useFormikUser.tsx","components/formUser/FormUserContext.tsx","components/CollapseContainer.tsx","components/sidebar/useDataSidebar.tsx","components/sidebar/SidebarBody.tsx","components/sidebar/SidebarHeader.tsx","components/sidebar/SidebarMenuButton.tsx","components/sidebar/SidebarLogout.tsx","pages/settings/SettingsReturnButton.tsx","components/sidebar/SidebarNav.tsx","hooks/updateReduxDatabase/useReduxListUsers.tsx","hooks/updateReduxDatabase/useReduxMonthData.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","data/firebaseConfig.tsx","hooks/updateReduxDatabase/useReduxListMonths.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx","utils/alertHelpers.tsx"],"sourcesContent":["import { FormikTouched, FormikErrors } from \"formik\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  errors: FormikErrors<ModelDay>;\r\n  touched: FormikTouched<ModelDay>;\r\n};\r\n\r\nconst FormErrors = (props: Props) => {\r\n  return (\r\n    <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"0.7rem\" }}>\r\n      {props.touched[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormErrors;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    value: string;\r\n    type: string;\r\n    label?: string;\r\n    placeholder?: string;\r\n    isErrorPrint?: boolean;\r\n    min?: string;\r\n    max?: string;\r\n  }[];\r\n};\r\n\r\nconst InputsText = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue, errors, touched } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(\r\n        ({ value, label, type, isErrorPrint, min, max, placeholder }) => {\r\n          return (\r\n            <Form.Group key={value}>\r\n              {label && (\r\n                <Form.Label\r\n                  htmlFor=\"date\"\r\n                  className=\"mb-0 fs-responsive fw-medium\"\r\n                >\r\n                  {label}\r\n                </Form.Label>\r\n              )}\r\n              <Form.Control\r\n                id={value}\r\n                type={type}\r\n                name={value}\r\n                value={values[value as keyof typeof values]}\r\n                onChange={e => setFieldValue(value, e.target.value)}\r\n                onBlur={handleBlur}\r\n                min={min}\r\n                max={max}\r\n                placeholder={placeholder}\r\n                size=\"sm\"\r\n                className=\"p-0 px-1 border border-primary shadow-sm w-100\"\r\n                style={{ minHeight: 0, cursor: \"pointer\" }}\r\n              />\r\n              {isErrorPrint && (\r\n                <FormErrors value={value} errors={errors} touched={touched} />\r\n              )}\r\n            </Form.Group>\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsText;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\ntype Props = {\r\n  inputsValues: string[];\r\n};\r\n\r\nconst InputsRange = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelFormValues>();\r\n\r\n  const gradientValue = values.allHours / 3.2;\r\n  const gradientBackground: string = `linear-gradient(to right, rgba(180,120,255) ${gradientValue}%, rgba(180,180,255) ${gradientValue}%)`;\r\n\r\n  return (\r\n    <>\r\n      {props.inputsValues.map(value => {\r\n        return (\r\n          <Form.Group\r\n            key={value}\r\n            className=\"mt-2 d-flex align-items-center w-100\"\r\n          >\r\n            <Form.Range\r\n              name={value}\r\n              min={0}\r\n              max={320}\r\n              value={values[value as keyof typeof values]}\r\n              onChange={e => setFieldValue(value, e.target.value)}\r\n              onBlur={handleBlur}\r\n              className=\"form-range custom-range medium\"\r\n              style={{\r\n                height: 10,\r\n                background: gradientBackground,\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsRange;\r\n","import { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\nconst FormHoursError = () => {\r\n  const { values } = useFormikContext<ModelFormValues>();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  var content = \"\";\r\n\r\n  if (month) {\r\n    if (\r\n      month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours >\r\n      +values?.allHours\r\n    ) {\r\n      content = `Min. ${\r\n        month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours\r\n      } h`;\r\n    }\r\n  }\r\n\r\n  return <div className=\"text-danger fs-8\">{content}</div>;\r\n};\r\n\r\nexport default FormHoursError;\r\n","import InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormHoursTop = () => {\r\n\r\n  const dataInputsText = [\r\n    { value: \"allHours\", type: \"number\", isErrorPrint: false },\r\n  ];\r\n\r\n  const styles = \"fs-7 d-flex align-items-end\";\r\n  return (\r\n    <div className=\"d-flex justify-content-between fw-medium \">\r\n      <div className={styles}>0 h</div>\r\n\r\n      <div className=\"col-6 col-sm-5 d-flex\" style={{ width: \"62px\" }}>\r\n        <InputsText inputsData={dataInputsText} /> &nbsp;\r\n        <div>h</div>\r\n      </div>\r\n\r\n      <div className={styles}>320 h</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormHoursTop;\r\n","import { useSelector } from \"react-redux\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddAllHoursMutation } from \"../../services/apiSliceMonths\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\nconst useFormikHours = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n\r\n  const calcHours = month && month.calcHours;\r\n\r\n  // const { submittedHours, acceptedHours } = month && month?.calcHours;\r\n\r\n  const initialValues = { allHours: 0 };\r\n\r\n  const onSubmit = async (values: ModelFormValues) => {\r\n   \r\n    if (month) {\r\n      if (\r\n        month?.calcHours?.submittedHours + month?.calcHours?.acceptedHours >\r\n        +values?.allHours\r\n      )\r\n        return;\r\n    }\r\n\r\n    calcHours &&\r\n      values.allHours &&\r\n      (await addAllHours({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        calcHours: {\r\n          ...calcHours,\r\n          allHours: +values.allHours,\r\n          currentHours:\r\n            +values.allHours -\r\n            calcHours.acceptedHours -\r\n            calcHours.submittedHours,\r\n        },\r\n      }));\r\n  };\r\n\r\n  return { initialValues, onSubmit, success };\r\n};\r\n\r\nexport default useFormikHours;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport InputsRange from \"../inputs/inputsRange/InputsRange\";\r\nimport FormHoursError from \"./FormHoursError\";\r\nimport FormHoursTop from \"./FormHoursTop\";\r\nimport useFormikHours from \"./useFormikHours\";\r\n\r\nconst FormHoursContext = () => {\r\n  const { initialValues, onSubmit, success } = useFormikHours();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      <Form className=\"py-2\">\r\n        <FormHoursTop />\r\n        <InputsRange inputsValues={[\"allHours\"]} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mt-2\">\r\n          <FormHoursError />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={success.isLoading}\r\n            className=\"col-2 d-flex justify-content-center align-items-center m-0 justify-content-center p-0 m-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormHoursContext;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useMonthDates from \"../hooks/useMonthDates\";\r\nimport useURLValues from \"../hooks/useURLValues\";\r\nimport { RootState } from \"../redux/store\";\r\nimport { sortListMonths } from \"../utils/sortListMonths\";\r\n\r\nconst CollapseMonthsList = () => {\r\n  const { databaseMonthsDatesToString } = useMonthDates();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { monthURL, isMonthInURL } = useURLValues();\r\n\r\n  // const sortedMonths = sortListMonths(listMonths);\r\n\r\n  const monthURLToDateFormat = isMonthInURL ? new Date(monthURL) : null;\r\n\r\n  const curMonthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup\r\n      className=\"scrolHidden fs-7 fw-medium text-capitalize\"\r\n      style={{ height: \"5rem\" }}\r\n    >\r\n      {!listMonths && (\r\n        <ListGroup.Item className=\"border-0 p-0 text-warning\">\r\n          Brak danych\r\n        </ListGroup.Item>\r\n      )}\r\n\r\n      {databaseMonthsDatesToString?.map((month: string, idx: number) => {\r\n        return (\r\n          <ListGroup.Item key={month} className=\"border-0 p-0\">\r\n            <Link\r\n              to={`/${listMonths?.[idx]}`}\r\n              className={`${\r\n                curMonthURLStringFormat !== month || !curMonthURLStringFormat\r\n                  ? \"text-dark\"\r\n                  : \"text-info\"\r\n              } text-decoration-none`}\r\n            >\r\n              {month}\r\n            </Link>\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default CollapseMonthsList;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    name: string;\r\n    firstOption: string;\r\n    label: string;\r\n    options: string[] | number[];\r\n  }[];\r\n};\r\n\r\nconst InputsSelect = (props: Props) => {\r\n  const { errors, touched, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(({ name, firstOption, label, options }) => {\r\n        return (\r\n          <Form.Group key={label}>\r\n            <Form.Label\r\n              htmlFor={name}\r\n              className=\"mb-0 fw-medium  fs-responsive\"\r\n            >\r\n              {label}\r\n            </Form.Label>\r\n\r\n            <Form.Select\r\n              id={name}\r\n              name={name}\r\n              onChange={e => setFieldValue(name, e.target.value)}\r\n              onBlur={handleBlur}\r\n              size=\"sm\"\r\n              className={`p-0 px-1 border border-primary shadow-sm text-capitalize ${\r\n                firstOption === \"Brak danych\" ? \"text-warning\" : \"\"\r\n              }`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <option>{firstOption}</option>\r\n\r\n              {options?.map((option: string | number) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n            <FormErrors value={name} errors={errors} touched={touched} />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsSelect;\r\n","import { useFormikContext } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\nimport { ModelSuccess } from \"../../sharedModels/modelSucces\";\r\n\r\ntype Props = {\r\n  success: ModelSuccess;\r\n};\r\n\r\nconst FormDayButton = (props: Props) => {\r\n  const { values } = useFormikContext<ModelDay>();\r\n  const { btnContent } = useHTTPState(props.success, \"Dodaj dzień\");\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const currentHours = month?.calcHours?.currentHours || 0;\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={props.success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 ms-auto bg-primary text-white fs-responsive\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"1rem\" }}>\r\n        {currentHours - +values.hours < 0 || currentHours === 0\r\n          ? \"Brak dostępnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormDayButton;\r\n","import {\r\n  dateInNext_14_Days,\r\n  dateInNext_60_Days,\r\n} from \"../../data/dataCurrentDates\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\n\r\nconst useDataFormDay = () => {\r\n  const { listUsers: dataUsers } = useSelector((state: RootState) => state.listUsers);\r\n\r\n  const users = dataUsers ? dataUsers : [];\r\n\r\n  const names = users?.map(({ userName }: ModelUser) => {\r\n    return userName;\r\n  });\r\n\r\n  const dataInputsSelect = [\r\n    {\r\n      name: \"userName\",\r\n      firstOption: `${names.length === 0 ? \"Brak danych\" : \"Imię\"}`,\r\n      label: \"Podaj imię\",\r\n      options: names,\r\n    },\r\n    {\r\n      name: \"hours\",\r\n      firstOption: \"Godziny\",\r\n      label: \"Podaj liczbę godzin\",\r\n      options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    },\r\n\r\n    {\r\n      name: \"place\",\r\n      firstOption: \"Lokalizacja\",\r\n      label: \"Podaj lokalizację\",\r\n      options: [\"Wewnątrz\", \"Poza\"],\r\n    },\r\n  ];\r\n  const dataInputsText = [\r\n    {\r\n      value: \"date\",\r\n      label: \"Podaj dzień\",\r\n      type: \"date\",\r\n      isErrorPrint: true,\r\n      min: dateInNext_14_Days,\r\n      max: dateInNext_60_Days,\r\n    },\r\n  ];\r\n  return { dataInputsSelect, dataInputsText };\r\n};\r\nexport default useDataFormDay;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  hours: yup\r\n    .string()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useSelector } from \"react-redux\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\nimport { dateInNext_14_Days } from \"../../data/dataCurrentDates\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddDayMutation } from \"../../services/apiSliceMonths\";\r\nimport { validationSchema } from \"./validationFormDay\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\ntype ModelInitialValues = {\r\n  id: string;\r\n  date: string;\r\n  hours: string;\r\n  userName: string;\r\n  place: string;\r\n  userColor: string;\r\n};\r\n\r\nconst useFormikDay = () => {\r\n  const [addDay, success] = useAddDayMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const { listUsers } = useSelector((state: RootState) => state.listUsers);\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    date: dateInNext_14_Days,\r\n    hours: \"\",\r\n    userName: \"Imię\",\r\n    place: \"\",\r\n    userColor: \"\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: ModelInitialValues) => {\r\n    if (\r\n      month &&\r\n      (month?.calcHours?.currentHours - +values.hours < 0 ||\r\n        month?.calcHours?.currentHours === 0)\r\n    )\r\n      return;\r\n\r\n    const userColor =\r\n      listUsers &&\r\n      listUsers?.find((user: ModelUser) => {\r\n        return user.userName === values.userName;\r\n      })?.userColor;\r\n\r\n    const valuesToDatabase = {\r\n      ...values,\r\n      id: UUID(),\r\n      hours: +values.hours,\r\n      userColor: userColor || \"\",\r\n    };\r\n\r\n    month &&\r\n      (await addDay({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        monthBody: {\r\n          ...month,\r\n          calcHours: {\r\n            ...month?.calcHours,\r\n            currentHours: month.calcHours.currentHours - valuesToDatabase.hours,\r\n            submittedHours:\r\n              month.calcHours.submittedHours + valuesToDatabase.hours,\r\n          },\r\n\r\n          columns: [\r\n            {\r\n              ...month.columns[0],\r\n              days: month.columns[0].days\r\n                ? [...month.columns[0].days, valuesToDatabase]\r\n                : [valuesToDatabase],\r\n            },\r\n            ...month.columns.slice(1),\r\n          ],\r\n        },\r\n      }));\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikDay;\r\n","import { Form, Formik } from \"formik\";\r\nimport InputsSelect from \"../inputs/InputsSelect\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport FormDayButton from \"./FormDayButton\";\r\nimport useDataFormDay from \"./useDataFormDay\";\r\nimport useFormikDay from \"./useFormikDay\";\r\nimport \"./_formDay.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst FormDayContext = () => {\r\n  const { dataInputsText, dataInputsSelect } = useDataFormDay();\r\n  const { initialValues, validation, onSubmit, success } = useFormikDay();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const allHours = month?.calcHours?.allHours;\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className={`${allHours === 0 ? \"formContainerBlur\" : \"\"} mt-2`}>\r\n        <InputsSelect inputsData={dataInputsSelect} />\r\n        <InputsText inputsData={dataInputsText} />\r\n        <FormDayButton success={success} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormDayContext;\r\n","import * as yup from \"yup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useValidationMonthForm = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const validationSchema = yup.object({\r\n    monthDate: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Miesiąc zapisany\",\r\n        value => value !== undefined && !listMonths?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationMonthForm;\r\n","import { ModelColumn } from \"../../sharedModels/modelColumn\";\r\nimport { ModelCalcHours } from \"../../sharedModels/modelCalcHours\";\r\nimport { ModelMonth } from \"../../sharedModels/modelMonth\";\r\n\r\nconst columns: ModelColumn[] = [\r\n  { id: \"submitted\", days: [] },\r\n  { id: \"accepted\", days: [] },\r\n  { id: \"rejected\", days: [] },\r\n];\r\n\r\n const calcHours: ModelCalcHours = {\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submittedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n};\r\n\r\nexport const monthPattern: ModelMonth = {\r\n  id: \"\",\r\n  columns,\r\n  calcHours,\r\n};\r\n","export const sortListMonths = (listMonths: string[]) => {\r\n  return listMonths && [...listMonths]?.sort((a: string, b: string) => {\r\n    const dateA = new Date(a).getTime();\r\n    const dateB = new Date(b).getTime();\r\n\r\n    return dateA - dateB;\r\n  }).reverse()\r\n\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateListMonthsMutation,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSliceMonths\";\r\nimport { alert } from \"../../utils/alertHelpers\";\r\nimport useValidationMonthForm from \"./useValidationMonthForm\";\r\nimport * as yup from \"yup\";\r\nimport { monthPattern } from \"./dataFormMonth\";\r\nimport { ModelMonth } from \"../../sharedModels/modelMonth\";\r\nimport { sortListMonths } from \"../../utils/sortListMonths\";\r\n\r\ninterface ModelInitialValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useFormikMonth = () => {\r\n  const navigate = useNavigate();\r\n  const [updateMonth, success] = useUpdateMonthMutation();\r\n  const [updateListMonths] = useUpdateListMonthsMutation();\r\n  const [deleteMonth] = useDeleteMonthMutation();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { validationSchema } = useValidationMonthForm();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [formValues, setFormValues] = useState({ monthDate: \"\" });\r\n\r\n  const initialValues = { monthDate: `${currYearDigits}-${currMonthDigits}` };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: ModelInitialValues) => {\r\n    const year = values.monthDate.slice(0, 4);\r\n    const month = values.monthDate.slice(-2);\r\n    const monthBody: ModelMonth = {\r\n      ...monthPattern,\r\n      id: values.monthDate,\r\n    };\r\n\r\n    await updateMonth({ year, month, monthBody });\r\n    setFormValues(values);\r\n  };\r\n\r\n  const executeAddMonthInfo = async (values: ModelInitialValues) => {\r\n    if (isSuccess) {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      const months = listMonths ? [...listMonths] : [];\r\n      const updatedList = [...months, `${year}-${month}`];\r\n      const sortedMonths = sortListMonths(updatedList);\r\n\r\n      await updateListMonths(sortedMonths);\r\n      navigate(`/${values.monthDate}`);\r\n    } else if (success.isError) {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      await deleteMonth({ year, month });\r\n      alert(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (success.isSuccess) {\r\n      setIsSuccess(true);\r\n    } else setIsSuccess(false);\r\n  }, [success.isSuccess]);\r\n\r\n  useEffect(() => {\r\n    executeAddMonthInfo(formValues);\r\n  }, [isSuccess, updateListMonths]);\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikMonth;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikMonth from \"./useFormikMonth\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormMonthContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikMonth();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"monthDate\",\r\n      type: \"month\",\r\n      label:\"Podaj miesiąc\",\r\n      isErrorPrint: true,\r\n      min: `${currYearDigits}-${currMonthDigits}`,\r\n      max: \"2025-12\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormMonthContext;\r\n","import { useUsersQuery } from \"../../services/apiSliceUsers\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\n\r\nconst useValidationFormUser = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n  const validationSchema = yup.object({\r\n    userName: yup\r\n      .string()\r\n      .min(3, \"Min. 3 litery\")\r\n      .max(10, \"Max. 10 liter\")\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Imię zajęte\",\r\n        value =>\r\n          value !== undefined &&\r\n          !usersNames?.includes(value[0].toUpperCase() + value.slice(1))\r\n      )\r\n      .required(\"Imię wymagane\"),\r\n    userColor: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Kolor zajęty\",\r\n        value => value !== undefined && !UsersColors?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationFormUser;\r\n","import {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../services/apiSliceUsers\";\r\nimport useValidationUserForm from \"./useValidationFormUser\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\nimport { ModelUser } from \"../../sharedModels/modelUser\";\r\nimport { FormikHelpers } from \"formik\";\r\n\r\nconst useFormikUser = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { validationSchema } = useValidationUserForm();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers || [];\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    userName: \"\",\r\n    userColor: \"#e0cce1\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n  const onSubmit = async (\r\n    values: ModelUser,\r\n    { resetForm }: FormikHelpers<ModelUser>\r\n  ) => {\r\n    const userValues = {\r\n      ...values,\r\n      userName:\r\n        values.userName.slice(0, 1).toUpperCase() + values.userName.slice(1),\r\n      id: UUID(),\r\n    };\r\n\r\n    const sortedUsers = [...users, userValues].sort((a, b) =>\r\n      a.userName.localeCompare(b.userName)\r\n    );\r\n\r\n    await addUser(sortedUsers);\r\n    resetForm();\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikUser;\r\n\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikUser from \"./useFormikUser\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst FormUserContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikUser();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-primary\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"userName\",\r\n      type: \"text\",\r\n      label: \"Podaj imię\",\r\n      isErrorPrint: true,\r\n      placeholder: \"Imię\",\r\n    },\r\n    {\r\n      value: \"userColor\",\r\n      type: \"color\",\r\n      label: \"Podaj kolor\",\r\n      isErrorPrint: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormUserContext;\r\n","import { ReactNode, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n  title: string;\r\n};\r\n\r\nconst CollapseContainer = (props: Props) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline-primary\"\r\n        onClick={() => setOpen(prev => !prev)}\r\n        aria-expanded={isOpen}\r\n        aria-controls=\"example-collapse-text\"\r\n        size=\"sm\"\r\n        className={`fw-medium fs-responsive w-100 d-flex justify-content-between align-items-center bg-primary text-white ${\r\n          isOpen ? \"rounded-bottom-0\" : \"rounded-bottom-1\"\r\n        }`}\r\n        style={{\r\n          transition: \"border-radius 420ms\",\r\n        }}\r\n      >\r\n        {props.title}\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3\"\r\n          style={{\r\n            transform: `${isOpen ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={isOpen}>\r\n        <div className=\"border border-primary rounded-bottom px-1\">\r\n          {props.children}\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CollapseContainer;\r\n","import FormHoursContext from \"../formHours/FormHoursContext\";\r\nimport CollapseMonthsList from \"../CollapseMonthsList\";\r\nimport FormDayContext from \"../formDay/FormDayContext\";\r\nimport FormMonthContext from \"../formMonth/FormMonthContext\";\r\nimport FormUserContext from \"../formUser/FormUserContext\";\r\nimport CollapseContainer from \"../CollapseContainer\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useDataSidebar = () => {\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  const monthStringCapitalize =\r\n    monthURLStringFormat[0]?.toUpperCase() + monthURLStringFormat.slice(1);\r\n\r\n  const printFormHours = month && (\r\n    <div className=\"mt-1\">\r\n      <CollapseContainer title={\"Zapisz godziny\"}>\r\n        <FormHoursContext />\r\n      </CollapseContainer>\r\n    </div>\r\n  );\r\n  const printFormDay = month && <FormDayContext />;\r\n\r\n  const dataMonthPanel = [\r\n    <CollapseContainer title={monthStringCapitalize}>\r\n      <CollapseMonthsList />\r\n    </CollapseContainer>,\r\n    printFormHours,\r\n    printFormDay,\r\n  ];\r\n\r\n  const dataSettings = [\r\n    <CollapseContainer title={\"Zapisz miesiąc\"}>\r\n      <FormMonthContext />\r\n    </CollapseContainer>,\r\n    <div className=\"mt-1\">\r\n      <CollapseContainer title={\"Zapisz użytkownika\"}>\r\n        <FormUserContext />\r\n      </CollapseContainer>\r\n    </div>,\r\n  ];\r\n\r\n  return { dataMonthPanel, dataSettings };\r\n};\r\n\r\nexport default useDataSidebar;\r\n","import React from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport useDataSidebar from \"./useDataSidebar\";\r\n\r\nconst SidebarBody = () => {\r\n  const { isMonthInURL } = useURLValues();\r\n  const { dataMonthPanel, dataSettings } = useDataSidebar();\r\n\r\n  return (\r\n    <Offcanvas.Body className=\"scrolHidden flex-grow-0 p-0 border border-4 border-white bg-white rounded\">\r\n      {isMonthInURL &&\r\n        dataMonthPanel.map((component, idx) => {\r\n          return <React.Fragment key={idx}>{component}</React.Fragment>;\r\n        })}\r\n\r\n      {!isMonthInURL &&\r\n        dataSettings.map((component, idx) => {\r\n          return <React.Fragment key={idx}>{component}</React.Fragment>;\r\n        })}\r\n    </Offcanvas.Body>\r\n  );\r\n};\r\n\r\nexport default SidebarBody;\r\n","import Offcanvas from \"react-bootstrap/Offcanvas\";\r\n\r\nconst SidebarHeader = () => {\r\n  return (\r\n    <Offcanvas.Header\r\n      className=\"d-sm-none w-fit-content ms-auto\"\r\n      closeButton={true}\r\n    ></Offcanvas.Header>\r\n  );\r\n};\r\n\r\nexport default SidebarHeader;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\ntype Props = {\r\n  toggleShow: () => void;\r\n};\r\n\r\nconst SidebarMenuButton = (props: Props) => {\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n  const { isMonthInURL } = useURLValues();\r\n\r\n  return (\r\n    <Button\r\n      variant=\"primary\"\r\n      onClick={props.toggleShow}\r\n      className= \"d-flex d-sm-none justify-content-center align-items-center rounded-0 p-0 fw-medium w-100 px-4 fixed-bottom\"\r\n      style={{\r\n        height: \"2.5rem\",\r\n      }}\r\n    >\r\n      <div>Menu:&nbsp;</div>\r\n      {isMonthInURL ? <div>{monthURLStringFormat}</div> : <div>ustawienia</div>}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarMenuButton;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport { alert } from \"../../utils/alertHelpers\";\r\nimport { RiLogoutBoxLine } from \"react-icons/ri\";\r\n\r\nconst SidebarLogout = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const logout = () => {\r\n    setIsLoading(true);\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch(error => alert(error))\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div className=\"d-flex align-center  d-flex align-items-center text-primary w-100\">\r\n      <RiLogoutBoxLine className=\"fs-6 me-1 \" />\r\n      Wyloguj\r\n    </div>\r\n  );\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        variant=\"secondary\"\r\n        className=\"mx-auto\"\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={logout}\r\n      className=\"fs-6 fw-medium text-info p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n      disabled={isLoading}\r\n    >\r\n      {btnContent}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarLogout;\r\n","import { createBrowserHistory } from \"history\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ImArrowLeft } from \"react-icons/im\";\r\n\r\nconst SettingsReturnButton = () => {\r\n  const history = createBrowserHistory();\r\n  const handleGoBack = () => {\r\n    history.back();\r\n  };\r\n  return (\r\n    <Button\r\n      onClick={handleGoBack}\r\n      className=\"fs-6 fw-medium text-primary p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      <div className=\"d-flex align-center  d-flex align-items-center text-start w-100\">\r\n        <ImArrowLeft className=\"fs-6 me-1 \" /> Wróć\r\n      </div>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SettingsReturnButton;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { AiTwotoneSetting } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SidebarLogout from \"./SidebarLogout\";\r\nimport SettingsReturnButton from \"../../pages/settings/SettingsReturnButton\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\nconst SidebarNav = () => {\r\n  const { isMonthInURL } = useURLValues();\r\n  const styles = \"bg-transparent border-0 p-0 ps-2\";\r\n\r\n  return (\r\n    <nav className=\"mt-auto mb-2 fw-medium\">\r\n      <ListGroup>\r\n        {!isMonthInURL && (\r\n          <ListGroup.Item className={styles}>\r\n            <SettingsReturnButton />\r\n          </ListGroup.Item>\r\n        )}\r\n        <ListGroup.Item className={styles}>\r\n          <Link to=\"/ustawienia\" className=\"text-primary text-decoration-none\">\r\n            <AiTwotoneSetting /> Ustawienia\r\n          </Link>\r\n        </ListGroup.Item>\r\n        <ListGroup.Item className={styles}>\r\n          <SidebarLogout />\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SidebarNav;\r\n","import { useEffect } from \"react\";\r\nimport { useUsersQuery } from \"../../services/apiSliceUsers\";\r\n\r\nimport {\r\n  geListtUsers,\r\n  getListUsersError,\r\n  getListUsersIsLoading,\r\n} from \"../../redux/storeFeatures/listUsersSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useReduxListUsers = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { data, error, isLoading } = useUsersQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(geListtUsers(data));\r\n\r\n    dispatch(getListUsersError(error));\r\n\r\n    dispatch(getListUsersIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxListUsers;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getMonth,\r\n  getMonthError,\r\n  getMonthIsLoading,\r\n} from \"../../redux/storeFeatures/monthPanelSlice\";\r\nimport { useMonthDataQuery } from \"../../services/apiSliceMonths\";\r\nimport useURLValues from \"../useURLValues\";\r\n\r\nconst useReduxMonthData = () => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const { data, error, isLoading } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(getMonth(data));\r\n\r\n    dispatch(getMonthError(error));\r\n\r\n    dispatch(getMonthIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxMonthData;\r\n","import \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport useWindowWidth from \"../../hooks/useWindowWidth\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarMenuButton from \"./SidebarMenuButton\";\r\nimport SidebarNav from \"./SidebarNav\";\r\nimport useReduxListUsers from \"../../hooks/updateReduxDatabase/useReduxListUsers\";\r\nimport useReduxListMonths from \"../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport useReduxMonthData from \"../../hooks/updateReduxDatabase/useReduxMonthData\";\r\n\r\nconst IndexSidebar = () => {\r\n  useReduxListUsers();\r\n  useReduxListMonths();\r\n  useReduxMonthData();\r\n\r\n  const { pathname } = useLocation();\r\n  const [isShow, setShow] = useState(false);\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(prev => !prev);\r\n\r\n  useEffect(() => {\r\n    windowWidth >= 500 && setShow(true);\r\n  }, [windowWidth]);\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(pathname) && (\r\n        <>\r\n          <Offcanvas\r\n            show={isShow}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className={`${\r\n              windowWidth <= 500 && \"backgroundImage\"\r\n            } bg-transparent`}\r\n            style={{\r\n              width: windowWidth >= 500 ? \"30%\" : \"100vw\",\r\n              maxWidth: windowWidth >= 500 && \"250px\",\r\n            }}\r\n          >\r\n            <div className=\"p-1 d-flex flex-column bg-opacity-white h-100\">\r\n              <SidebarHeader />\r\n              <SidebarBody />\r\n              <SidebarNav />\r\n            </div>\r\n          </Offcanvas>\r\n          <SidebarMenuButton toggleShow={toggleShow} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext_14_Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext_60_Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext_14_Days = formatDate(futureDateInNext_14_Days);\r\nexport const dateInNext_60_Days = formatDate(futureDateInNext_60_Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getDatabase, ref, get } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nexport const app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\nexport const database = getDatabase(app);\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getListMonths,\r\n  getListMonthsError,\r\n  getListMonthsIsLoading,\r\n} from \"../../redux/storeFeatures/listMonthsSlice\";\r\nimport { useListMonthsQuery } from \"../../services/apiSliceMonths\";\r\n\r\nconst useReduxListMonths = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { data, error, isLoading } = useListMonthsQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(getListMonths(data));\r\n\r\n    dispatch(getListMonthsError(error));\r\n\r\n    dispatch(getListMonthsIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxListMonths;\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  \r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n  \r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const databaseMonthsDatesToString = listMonths && [...listMonths]?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(1);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return {monthURLStringFormat};\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return {monthURLStringFormat};\r\n  }\r\n\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n"],"names":["props","_jsx","className","style","height","children","touched","value","errors","_useFormikContext","useFormikContext","values","handleBlur","setFieldValue","_Fragment","inputsData","map","_ref","label","type","isErrorPrint","min","max","placeholder","_jsxs","Form","Group","Label","htmlFor","Control","id","name","onChange","e","target","onBlur","size","minHeight","cursor","FormErrors","gradientValue","allHours","gradientBackground","concat","inputsValues","Range","background","_month$calcHours","_month$calcHours2","_month$calcHours3","_month$calcHours4","month","useSelector","state","monthPanel","content","calcHours","submittedHours","acceptedHours","styles","width","InputsText","_useURLValues","useURLValues","yearFromURL","monthFromURL","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","_slicedToArray","addAllHours","success","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","t0","year","_objectSpread","currentHours","stop","_x","apply","arguments","initialValues","_useFormikHours","useFormikHours","btnContent","useHTTPState","AiOutlinePlusCircle","fontSize","Formik","FormHoursTop","InputsRange","FormHoursError","Button","disabled","isLoading","databaseMonthsDatesToString","useMonthDates","listMonths","monthURL","monthURLToDateFormat","isMonthInURL","Date","curMonthURLStringFormat","Intl","DateTimeFormat","timeZone","format","ListGroup","Item","idx","Link","to","firstOption","options","Select","option","hours","dataUsers","listUsers","users","names","userName","dataInputsSelect","length","dataInputsText","dateInNext_14_Days","dateInNext_60_Days","validationSchema","yup","test","required","place","_useAddDayMutation","useAddDayMutation","_useAddDayMutation2","addDay","date","userColor","validation","_listUsers$find","valuesToDatabase","find","user","UUID","monthBody","columns","days","_toConsumableArray","slice","_useDataFormDay","useDataFormDay","_useFormikDay","useFormikDay","InputsSelect","FormDayButton","monthDate","undefined","includes","monthPattern","rejectedHours","sortListMonths","sort","a","b","getTime","reverse","navigate","useNavigate","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","updateMonth","_useUpdateListMonthsM","useUpdateListMonthsMutation","updateListMonths","_useDeleteMonthMutati","useDeleteMonthMutation","deleteMonth","useValidationMonthForm","_useState","useState","_useState2","isSuccess","setIsSuccess","_useState3","_useState4","formValues","setFormValues","currYearDigits","currMonthDigits","executeAddMonthInfo","_ref2","_callee2","months","updatedList","sortedMonths","_year","_month","_context2","isError","alert","_x2","useEffect","_useFormikMonth","useFormikMonth","dataInputs","useUsersQuery","data","usersNames","UsersColors","toUpperCase","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","useValidationUserForm","resetForm","userValues","sortedUsers","localeCompare","_useFormikUser","useFormikUser","isOpen","setOpen","variant","onClick","transition","title","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","_monthURLStringFormat","monthURLStringFormat","useMonthURLToString","monthStringCapitalize","printFormHours","CollapseContainer","FormHoursContext","printFormDay","FormDayContext","dataMonthPanel","CollapseMonthsList","dataSettings","FormMonthContext","FormUserContext","_useDataSidebar","useDataSidebar","Offcanvas","Body","component","React","Header","closeButton","toggleShow","setIsLoading","RiLogoutBoxLine","Spinner","animation","auth","signOut","then","catch","error","finally","history","createBrowserHistory","back","ImArrowLeft","SettingsReturnButton","AiTwotoneSetting","SidebarLogout","dispatch","useDispatch","_useUsersQuery","geListtUsers","getListUsersError","getListUsersIsLoading","_useMonthDataQuery","useMonthDataQuery","getMonth","getMonthError","getMonthIsLoading","useReduxListUsers","useReduxListMonths","useReduxMonthData","pathname","useLocation","isShow","setShow","windowWidth","useWindowWidth","show","onHide","scroll","backdrop","maxWidth","SidebarHeader","SidebarBody","SidebarNav","SidebarMenuButton","today","formatDate","getFullYear","String","padStart","day","getDate","futureDateInNext_14_Days","futureDateInNext_60_Days","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","getDatabase","_useListMonthsQuery","useListMonthsQuery","getListMonths","getListMonthsError","getListMonthsIsLoading","btnText","errMsg","status","Swal","text","confirmButtonColor","monthToDateFormat","_Intl$DateTimeFormat","split","window","innerWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","alertHelper","message","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText"],"sourceRoot":""}
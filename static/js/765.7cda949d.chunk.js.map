{"version":3,"file":"static/js/765.7cda949d.chunk.js","mappings":"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","sources":["components/IndexContainer.tsx","hooks/useDatabaseListMonths.tsx","hooks/updateReduxDatabase/useReduxListMonths.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useWindowWidth.tsx","components/ListContainer.tsx","pages/settings/settingsLists/dataStylesSettingsLists.tsx","pages/settings/settingsLists/ListMonths.tsx","pages/settings/settingsLists/ListUsers.tsx","pages/settings/indexSettings/SettinsContent.tsx","pages/settings/indexSettings/useRequestSettings.tsx","pages/settings/indexSettings/IndexSettings.tsx","utils/printPanelContent.tsx","../node_modules/warning/warning.js"],"sourcesContent":["import { ReactNode } from \"react\";\r\nimport useWindowWidth from \"../hooks/useWindowWidth\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst IndexContainer = (props: Props) => {\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n\r\n  return (\r\n    <main\r\n      className=\"d-flex backgroundImage m-0\"\r\n      style={{\r\n        height: \"100vh\",\r\n        overflow: \"hidden\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <aside\r\n        style={{\r\n          width: windowWidth >= 500 ? \"30%\" : 0,\r\n          maxWidth: \"250px\",\r\n          height: \"100%\",\r\n        }}\r\n      ></aside>\r\n      <div\r\n        className=\"d-flex ps-1 flex-fill\"\r\n        style={{\r\n          width: windowWidth >= 500 ? \"70%\" : \"100%\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexContainer;\r\n","import { onValue, ref } from \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { database } from \"../data/firebaseConfig\";\r\n\r\nconst useDatabaseListMonths = () => {\r\n  const nestedRef = ref(database, \"years\");\r\n  const [isError, setError] = useState(\"\");\r\n  const [databaseKeysYears, setDatabaseKeysYears] = useState<any>([]);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onValue(\r\n      nestedRef,\r\n      snapshot => {\r\n        let keysYears: any = [];\r\n        let keysMonths: any = [];\r\n        snapshot?.forEach((secondLevelSnapshot: any) => {\r\n          const secondLevelKey = secondLevelSnapshot.key;\r\n          const secondLevelData = secondLevelSnapshot.val();\r\n          keysYears.push(secondLevelKey);\r\n          keysMonths.push(Object.keys(secondLevelData));\r\n        });\r\n\r\n        const hh = [...keysMonths]\r\n          .map((year, idx) => {\r\n            return year.map((month: any) => {\r\n              return keysYears[idx] + \"-\" + month.slice(6);\r\n            });\r\n          })\r\n          .flat()\r\n          .reverse();\r\n\r\n        setDatabaseKeysYears(hh);\r\n      },\r\n      error => {\r\n        setError(\"error\");\r\n        console.error(\"Error fetching data:\", error);\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    databaseKeysYears,\r\n    isError,\r\n  };\r\n};\r\n\r\nexport default useDatabaseListMonths;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getListMonths,\r\n  getListMonthsError,\r\n  getListMonthsIsLoading,\r\n} from \"../../redux/storeFeatures/listMonthsSlice\";\r\nimport { useListMonthsQuery } from \"../../services/apiSliceMonths\";\r\nimport useDatabaseListMonths from \"../useDatabaseListMonths\";\r\n\r\nconst useReduxListMonths = () => {\r\n  const dispatch = useDispatch();\r\n  const { databaseKeysYears, isError } = useDatabaseListMonths();\r\n\r\n  // const { data, error, isLoading } = useListMonthsQuery();\r\n\r\n  // console.log(\"\", databaseKeysYears);\r\n\r\n  useEffect(() => {\r\n    dispatch(getListMonths(databaseKeysYears));\r\n    // dispatch(getListMonths(data));\r\n    // dispatch(getListMonthsError(error));\r\n\r\n    // dispatch(getListMonthsIsLoading(isLoading));\r\n  }, [databaseKeysYears, dispatch]);\r\n};\r\n\r\nexport default useReduxListMonths;\r\n","import { ReactNode } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n\r\n  const databaseMonthsDatesToString = listMonths && [...listMonths]?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { ReactNode } from \"react\";\r\n\r\ntype Props = {\r\n  header: string;\r\n  listContent: any[] | undefined | null;\r\n  children: ReactNode;\r\n};\r\n\r\nconst ListContainer = (props: Props) => {\r\n  return (\r\n    <>\r\n      <h3 className=\"h6\">{props.header}: {props.listContent?.length}</h3>\r\n\r\n      <ListGroup className=\"border-0 p-0\">\r\n        {!props.listContent && (\r\n          <ListGroup.Item className=\"py-1 px-2 text-warning border-0\">\r\n            Brak danych\r\n          </ListGroup.Item>\r\n        )}\r\n        {props.children}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListContainer;\r\n","export const dataStylesListGroupItem = \"shadow-sm p-0 mb-2 ps-2 pe-0 rounded-1\";\r\nexport const dataStylesButton =\r\n  \"w-100 d-flex justify-content-between align-items-center px-1 text-capitalize rounded-0 bg-white border-0\";\r\n","import { useEffect, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  agreeAlert,\r\n  closeAlert,\r\n  printAlert,\r\n} from \"../../../redux/storeFeatures/alertSlice\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateListMonthsMutation,\r\n} from \"../../../services/apiSliceMonths\";\r\nimport {\r\n  dataStylesButton,\r\n  dataStylesListGroupItem,\r\n} from \"./dataStylesSettingsLists\";\r\n\r\n\r\n\r\nconst ListMonths = () => {\r\n  const dispatch = useDispatch();\r\n  const { databaseMonthsDatesToString } = useMonthDates();\r\n  const [deleteMonth, success] = useDeleteMonthMutation();\r\n  const [updateListMonths, successInfo] = useUpdateListMonthsMutation();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n  const { agree } = useSelector((state: RootState) => state.alert);\r\n  const [monthDate, setMonthDate] = useState(\"\");\r\n\r\n\r\n\r\n\r\n  const handleAlert = (monthDate: string) => {\r\n    dispatch(printAlert(\"Usunąć miesiąc?\"));\r\n    setMonthDate(monthDate);\r\n  };\r\n\r\n  const deleteMonthAsync = async () => {\r\n    if (agree && monthDate && listMonths?.includes(monthDate)) {\r\n      const updatedListMonths = listMonths?.filter(month => {\r\n        return month !== monthDate;\r\n      });\r\n\r\n      const year = monthDate.slice(0, 4);\r\n      const month = monthDate.slice(-2);\r\n      await deleteMonth({ year: year, month: month });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    deleteMonthAsync();\r\n    dispatch(agreeAlert(false));\r\n    dispatch(closeAlert());\r\n  }, [agree]);\r\n\r\n  return (\r\n    <>\r\n      {databaseMonthsDatesToString?.map(\r\n        (monthDateToString: string, idx: number) => {\r\n          return (\r\n            <ListGroup.Item\r\n              key={monthDateToString}\r\n              className={dataStylesListGroupItem}\r\n            >\r\n              <Button\r\n                disabled={success.isLoading}\r\n                onClick={() => listMonths && handleAlert(listMonths[idx])}\r\n                className={`${dataStylesButton} text-dark`}\r\n              >\r\n                {monthDateToString}\r\n                {listMonths && monthDate === listMonths[idx] ? (\r\n                  btnContent\r\n                ) : (\r\n                  <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n                )}\r\n              </Button>\r\n            </ListGroup.Item>\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListMonths;\r\n","import { useEffect, useState } from \"react\";\r\nimport { ListGroup } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  agreeAlert,\r\n  closeAlert,\r\n  printAlert,\r\n} from \"../../../redux/storeFeatures/alertSlice\";\r\nimport { useDeleteUserMutation } from \"../../../services/apiSliceUsers\";\r\nimport { ModelUser } from \"../../../sharedModels/modelUser\";\r\nimport {\r\n  dataStylesButton,\r\n  dataStylesListGroupItem,\r\n} from \"./dataStylesSettingsLists\";\r\n\r\nconst ListUsers = () => {\r\n  const dispatch = useDispatch();\r\n  const [deleteUser, success] = useDeleteUserMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n  const { listUsers } = useSelector((state: RootState) => state.listUsers);\r\n  const { agree } = useSelector((state: RootState) => state.alert);\r\n  const [userName, setUserName] = useState(\"\");\r\n\r\n  const handleAlert = (userName: string) => {\r\n    dispatch(printAlert(\"Usunąć użytkownika?\"));\r\n    setUserName(userName);\r\n  };\r\n\r\n  const usersNames = listUsers?.map(user => {\r\n    return user.userName;\r\n  });\r\n\r\n  const deleteUserAsync = async () => {\r\n    if (agree && userName && usersNames?.includes(userName)) {\r\n      const userBodyPUTRequest = listUsers?.filter(\r\n        (user: ModelUser) => user?.userName !== userName\r\n      );\r\n\r\n      userBodyPUTRequest && (await deleteUser(userBodyPUTRequest));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    deleteUserAsync();\r\n    dispatch(agreeAlert(false));\r\n    success.isSuccess && dispatch(closeAlert());\r\n  }, [agree]);\r\n\r\n  return (\r\n    <>\r\n      {listUsers?.map(user => {\r\n        return (\r\n          <ListGroup.Item\r\n            key={user.userName}\r\n            className={dataStylesListGroupItem}\r\n            style={{\r\n              backgroundColor: user.userColor,\r\n              overflow: \"hidden\",\r\n            }}\r\n          >\r\n            <Button\r\n              onClick={() => handleAlert(user.userName)}\r\n              disabled={success.isLoading}\r\n              className={dataStylesButton}\r\n              style={{ color: user.userColor }}\r\n            >\r\n              {user.userName}\r\n\r\n              {userName === user.userName ? (\r\n                btnContent\r\n              ) : (\r\n                <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n              )}\r\n            </Button>\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ListUsers;\r\n","import { useSelector } from \"react-redux\";\r\nimport ListContainer from \"../../../components/ListContainer\";\r\nimport useReduxListMonths from \"../../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport ListMonths from \"../settingsLists/ListMonths\";\r\nimport ListUsers from \"../settingsLists/ListUsers\";\r\n\r\nconst SettinsContent = () => {\r\n  useReduxListMonths();\r\n  const { listMonths } = useSelector((state: RootState) => state.listMonths);\r\n  const { listUsers } = useSelector((state: RootState) => state.listUsers);\r\n\r\n  return (\r\n    <div\r\n      className=\"bg-white p-2 py-4 p-sm-4 w-100\"\r\n      style={{\r\n        height: \"100%\",\r\n        overflow: \"hidden auto\",\r\n        outline: \"4px solid white\",\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          maxWidth: \"480px\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        <ListContainer header={\"Zapisane miesiące\"} listContent={listMonths}>\r\n          <ListMonths />\r\n        </ListContainer>\r\n        <div className=\"border my-4\"></div>\r\n\r\n        <ListContainer header={\"Zapisani użytkownicy\"} listContent={listUsers}>\r\n          <ListUsers />\r\n        </ListContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SettinsContent;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { printPanelContent } from \"../../../utils/printPanelContent\";\r\nimport SettinsContent from \"./SettinsContent\";\r\n\r\nconst useRequestSettings = () => {\r\n  const { listUsersError, listUsersIsLoading } = useSelector(\r\n    (state: RootState) => state.listUsers\r\n  );\r\n  const { listMonthsError, listMonthsIsLoading } = useSelector(\r\n    (state: RootState) => state.listMonths\r\n  );\r\n\r\n  let requestState;\r\n\r\n  if (listUsersIsLoading || listMonthsIsLoading) {\r\n    requestState = printPanelContent(\r\n      <Spinner animation=\"border\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (listUsersError) {\r\n    if (\"status\" in listUsersError) {\r\n      const errMsg = \"status\" in listUsersError && listUsersError.status;\r\n\r\n      requestState = printPanelContent(\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg}</> <br />\r\n          <>Odśwież stronę</>\r\n        </h3>\r\n      );\r\n    }\r\n  } else if (listMonthsError) {\r\n    if (\"status\" in listMonthsError) {\r\n      const errMsg = \"status\" in listMonthsError && listMonthsError.status;\r\n\r\n      requestState = printPanelContent(\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg}</> <br />\r\n          <>Odśwież stronę</>\r\n        </h3>\r\n      );\r\n    }\r\n  } else {\r\n    requestState = <SettinsContent />;\r\n  }\r\n\r\n  return { requestState };\r\n};\r\nexport default useRequestSettings;\r\n","import IndexContainer from \"../../../components/IndexContainer\";\r\nimport useRequestSettings from \"./useRequestSettings\";\r\n\r\nconst IndexSettings = () => {\r\n  const { requestState } = useRequestSettings();\r\n\r\n  return <IndexContainer>{requestState}</IndexContainer>;\r\n};\r\n\r\nexport default IndexSettings;\r\n","export const printPanelContent = (contentJSX: React.ReactNode) => (\r\n  <div\r\n    className=\" d-flex justify-content-center align-items-center fs-3 text-warning text-center\"\r\n    style={{\r\n      maxWidth: \"1000px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    }}\r\n  >\r\n    {contentJSX}\r\n  </div>\r\n);","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"names":["props","windowWidth","useWindowWidth","_jsxs","className","style","height","overflow","position","children","_jsx","width","maxWidth","nestedRef","ref","database","_useState","useState","_useState2","_slicedToArray","isError","setError","_useState3","_useState4","databaseKeysYears","setDatabaseKeysYears","useEffect","unsubscribe","onValue","snapshot","keysYears","keysMonths","forEach","secondLevelSnapshot","secondLevelKey","key","secondLevelData","val","push","Object","keys","hh","concat","map","year","idx","month","slice","flat","reverse","error","console","dispatch","useDispatch","_useDatabaseListMonth","useDatabaseListMonths","getListMonths","success","btnText","btnContent","isLoading","Spinner","animation","size","variant","_ref","listMonths","useSelector","state","databaseMonthsDatesToString","_toConsumableArray","monthDate","monthToDateFormat","Date","Intl","DateTimeFormat","timeZone","format","window","innerWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","_props$listContent","_Fragment","header","listContent","length","ListGroup","Item","dataStylesListGroupItem","dataStylesButton","useMonthDates","_useDeleteMonthMutati","useDeleteMonthMutation","_useDeleteMonthMutati2","deleteMonth","_useUpdateListMonthsM","useUpdateListMonthsMutation","_useUpdateListMonthsM2","useHTTPState","RiDeleteBin6Line","agree","alert","setMonthDate","deleteMonthAsync","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","includes","filter","stop","apply","arguments","agreeAlert","closeAlert","monthDateToString","Button","disabled","onClick","printAlert","handleAlert","_useDeleteUserMutatio","useDeleteUserMutation","_useDeleteUserMutatio2","deleteUser","listUsers","userName","setUserName","usersNames","user","deleteUserAsync","userBodyPUTRequest","t0","isSuccess","backgroundColor","userColor","color","useReduxListMonths","outline","ListContainer","ListMonths","ListUsers","requestState","_useSelector","listUsersError","listUsersIsLoading","_useSelector2","listMonthsError","listMonthsIsLoading","printPanelContent","errMsg","status","SettinsContent","useRequestSettings","IndexContainer","contentJSX","warning","module","exports"],"sourceRoot":""}
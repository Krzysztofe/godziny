{"version":3,"file":"static/js/198.9e04bc0a.chunk.js","mappings":"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","sources":["components/IndexContainer.tsx","components/alert/Alert.tsx","hooks/useHTTPState.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx","hooks/updateReduxDatabase/useReduxMonthData.tsx","components/HoursSummary.tsx","pages/monthPanel/MonthPanelDayPrintData.tsx","pages/monthPanel/monthPanelDay/utilsMonthPanelDay.tsx","pages/monthPanel/monthPanelDay/MonthPanelDay.tsx","pages/monthPanel/MonthPanelColumn.tsx","pages/monthPanel/monthPanelColumnsHeader.tsx/MonthPanelColumnsHeader.tsx","pages/monthPanel/monthPanelColmns/useScrollThumbPosition.tsx","utils/getHoursFromColumns.tsx","pages/monthPanel/monthPanelColmns/MonthPanelColumns.tsx","pages/monthPanel/monthPanelColmns/utilsMonthPanelColumns.tsx","pages/monthPanel/indexMonthPanel/MonthPanelContent.tsx","pages/monthPanel/indexMonthPanel/useRequestMonthPanel.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx","utils/printPanelContent.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\r\nimport useWindowWidth from \"../hooks/useWindowWidth\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst IndexContainer = (props: Props) => {\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n\r\n  return (\r\n    <main\r\n      className=\"d-flex backgroundImage m-0\"\r\n      style={{\r\n        height: \"100vh\",\r\n        overflow: \"hidden\",\r\n        position: \"relative\",\r\n      }}\r\n    >\r\n      <aside\r\n        style={{\r\n          width: windowWidth >= 500 ? \"30%\" : 0,\r\n          maxWidth: \"250px\",\r\n          height: \"100%\",\r\n        }}\r\n      ></aside>\r\n      <div\r\n        className=\"d-flex ps-1 flex-fill\"\r\n        style={{\r\n          width: windowWidth >= 500 ? \"70%\" : \"100%\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexContainer;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { printAlert } from \"../../redux/storeFeatures/alertSlice\";\r\nimport \"./_alert.scss\";\r\n\r\ntype Props = {\r\n  action: () => void;\r\n  isPrinted: boolean;\r\n  setIsPrinted?: React.Dispatch<React.SetStateAction<boolean>>;\r\n  header: string;\r\n};\r\n\r\nconst Alert = (props: Props) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\r\n    if (\r\n      (e.target as HTMLElement)?.id !== \"opacityContainer\" &&\r\n      (e.target as HTMLElement)?.id !== \"noButton\"\r\n    )\r\n      return;\r\n    if (props?.setIsPrinted) props?.setIsPrinted(false);\r\n    dispatch(printAlert(\"\"));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {props.isPrinted ? (\r\n        <div\r\n          id=\"opacityContainer\"\r\n          className=\"fixed-top d-flex justify-content-center align-items-center \"\r\n          onClick={e => handleClose(e)}\r\n          style={{\r\n            height: \"100vh\",\r\n            zIndex: \"1060\",\r\n            backgroundColor: \"rgba(0,0,0,0.4)\",\r\n          }}\r\n        >\r\n          <div\r\n            className={`p-4 bg-white rounded-1 fs-3 fw-medium alertAnimationDown`}\r\n          >\r\n            {props.header}\r\n            <div className=\"w-fit-content m-auto\">\r\n              {props.header.includes(\"Usunąć\") ? (\r\n                <>\r\n                  <Button id=\"noButton\">Nie</Button>\r\n                  <Button\r\n                    onClick={props.action}\r\n                    className=\"bg-danger ms-4 border \"\r\n                  >\r\n                    Tak\r\n                  </Button>\r\n                </>\r\n              ) : (\r\n                <Button id=\"noButton\" onClick={props.action}>\r\n                  Ok\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n","import { ReactNode } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(9);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return { monthURLStringFormat };\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return { monthURLStringFormat };\r\n  }\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  getMonth,\r\n  getMonthError,\r\n  getMonthIsLoading,\r\n} from \"../../redux/storeFeatures/monthPanelSlice\";\r\nimport { useMonthDataQuery } from \"../../services/apiSliceMonths\";\r\nimport useURLValues from \"../useURLValues\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\n\r\nconst useReduxMonthData = () => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { isMonthInURL } = useURLValues();\r\n\r\n  const year = isMonthInURL ? yearFromURL : \"\";\r\n  const month = isMonthInURL ? monthFromURL : \"\";\r\n\r\n  const { data, error, isLoading } = useMonthDataQuery({\r\n    year,\r\n    month\r\n  });\r\n\r\n\r\n\r\n  useEffect(() => {\r\n   \r\n    dispatch(getMonth(data));\r\n\r\n    dispatch(getMonthError(error));\r\n\r\n    dispatch(getMonthIsLoading(isLoading));\r\n    \r\n  }, [data, error, isLoading, dispatch]);\r\n};\r\n\r\nexport default useReduxMonthData;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst HoursSummary = () => {\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n\r\n  \r\n  return (\r\n    <div className=\"d-flex gap-2 mx-auto fw-medium pb-2 w-fit-content\">\r\n      <div>Wszystkie {month?.calcHours?.allHours} - </div>\r\n\r\n      <div\r\n        className={`${\r\n          month && month?.calcHours?.currentHours <= 0 ? \"text-danger\" : \"\"\r\n        }`}\r\n      >\r\n        {month && month?.calcHours?.currentHours} {\"\"}\r\n        {month && month?.calcHours?.currentHours < 0 ? \"Brak\" : \"Dostępne\"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HoursSummary;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n}\r\n\r\nconst MonthPanelDayPrintData = (props: Props) => {\r\n  let dateToPrint;\r\n\r\n  if (!props?.day?.date) {\r\n    return <div>Brak danych</div>;\r\n  } else {\r\n    const date = new Date(props.day.date);\r\n    dateToPrint = new Intl.DateTimeFormat(\"pl-PL\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n    }).format(date);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"d-flex justify-content-between fs-7 \">\r\n          <div>{props.day?.userName}</div>\r\n\r\n          <div>\r\n            {props.day?.place === \"Poza\" ? (\r\n              <TbArrowBigRightLineFilled style={{ color: \"rgb(80,173,150)\" }} />\r\n            ) : (\r\n              <MdFactory style={{ color: \"rgb(255, 181, 9)\" }} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"d-flex fw-medium justify-content-between\">\r\n          <div>{dateToPrint ? dateToPrint : \"\"}</div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MonthPanelDayPrintData;\r\n","import { ModelMonth } from \"../../../sharedModels/modelMonth\";\r\nimport { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\n\r\nexport const deleteDayById = (obj: ModelMonth, idToDelete: string) => {\r\n  const updatedColumns = obj.columns.map((column: ModelColumn) => {\r\n    const updatedDays = column?.days?.filter(day => day.id !== idToDelete);\r\n    return { ...column, days: updatedDays };\r\n  });\r\n  return { ...obj, columns: updatedColumns };\r\n};\r\n\r\nexport const calculateUpdatedCalcHours = (\r\n  month: ModelMonth | null,\r\n  columnIdx: number,\r\n  subtractedHours: number | undefined\r\n) => {\r\n  if (!month || !month.calcHours) {\r\n     return {\r\n       currentHours: 0,\r\n       submittedHours: 0,\r\n       acceptedHours: 0,\r\n       rejectedHours: 0,\r\n       allHours: 0,\r\n     };\r\n  }\r\n\r\n  const { calcHours } = month;\r\n\r\n  return {\r\n    ...calcHours,\r\n    currentHours:\r\n      columnIdx !== 2 && subtractedHours\r\n        ? calcHours.currentHours + subtractedHours\r\n        : calcHours.currentHours,\r\n    submittedHours:\r\n      columnIdx === 0 && subtractedHours\r\n        ? calcHours.submittedHours - subtractedHours\r\n        : calcHours.submittedHours,\r\n    acceptedHours:\r\n      columnIdx === 1 && subtractedHours\r\n        ? calcHours.acceptedHours - subtractedHours\r\n        : calcHours.acceptedHours,\r\n    rejectedHours:\r\n      columnIdx === 2 && subtractedHours\r\n        ? calcHours.rejectedHours - subtractedHours\r\n        : calcHours.rejectedHours,\r\n  };\r\n};","import { useEffect, useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  agreeAlert,\r\n  closeAlert,\r\n  printAlert,\r\n} from \"../../../redux/storeFeatures/alertSlice\";\r\nimport { useDeleteDayMutation } from \"../../../services/apiSliceMonths\";\r\nimport { ModelDay } from \"../../../sharedModels/modelDay\";\r\nimport MonthPanelDayPrintData from \"../MonthPanelDayPrintData\";\r\nimport { calculateUpdatedCalcHours, deleteDayById } from \"./utilsMonthPanelDay\";\r\nimport Alert from \"../../../components/alert/Alert\";\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n  columnIdx: number;\r\n  dayIdx: number;\r\n}\r\n\r\nconst MonthPanelDay = (props: Props) => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const [deleteDay, success] = useDeleteDayMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger\" />\r\n  );\r\n  const { agree } = useSelector((state: RootState) => state.alert);\r\n  const [columnIdx, setColumnIdx] = useState(\"\");\r\n  const [dayId, setDayId] = useState(\"\");\r\n  const [isAlertPrinted, setIsAlertPrinted] = useState(false);\r\n\r\n  const findDay = {\r\n    ...month?.columns[props.columnIdx].days?.find(day => {\r\n      return day?.id === props.day.id;\r\n    }),\r\n  };\r\n\r\n  const handleAlert = (idx: string, id: string) => {\r\n    setColumnIdx(idx);\r\n    setDayId(id);\r\n\r\n    setIsAlertPrinted(true);\r\n  };\r\n\r\n  const deleteDayAsync = async () => {\r\n    if (findDay?.id === dayId) {\r\n      const subtractedHours = findDay?.hours;\r\n\r\n      month &&\r\n        (await deleteDay({\r\n          year: yearFromURL,\r\n          month: monthFromURL,\r\n          colIdx: props.columnIdx,\r\n          monthBody: {\r\n            ...month,\r\n            calcHours: calculateUpdatedCalcHours(\r\n              month,\r\n              +columnIdx,\r\n              subtractedHours\r\n            ),\r\n\r\n            columns: deleteDayById({ ...month }, dayId).columns,\r\n          },\r\n        }));\r\n    }\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id}\r\n      index={props.dayIdx}\r\n      isDragDisabled={false}\r\n    >\r\n      {(provided, snapshot) => {\r\n        return (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className={`mb-2 bg-white rounded border ${\r\n              snapshot.isDragging ? \"border-dark\" : \"border-dark-subtle\"\r\n            } `}\r\n          >\r\n            <Alert\r\n              action={deleteDayAsync}\r\n              isPrinted={isAlertPrinted}\r\n              setIsPrinted={setIsAlertPrinted}\r\n              header={\"Usunąć dzień?\"}\r\n            />\r\n            <div\r\n              className=\"px-1 py-2 py-sm-1 rounded\"\r\n              style={{\r\n                borderTop: `8px solid ${props.day?.userColor}`,\r\n                opacity: snapshot.isDragging ? 0.8 : 1,\r\n              }}\r\n            >\r\n              <MonthPanelDayPrintData day={props.day} />\r\n\r\n              <Button\r\n                onClick={() =>\r\n                  handleAlert(props.columnIdx.toString(), props.day.id)\r\n                }\r\n                className=\"d-flex justify-content-between  align-items-center w-100 p-0 bg-transparent border-0 fw-medium text-dark\"\r\n                disabled={success.isLoading}\r\n              >\r\n                <div>{props.day?.hours} h</div>\r\n                <div>{btnContent}</div>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default MonthPanelDay;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport MonthPanelDay from \"./monthPanelDay/MonthPanelDay\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport { ModelColumn } from \"../../sharedModels/modelColumn\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ninterface Props {\r\n  column: ModelColumn;\r\n  columnIdx: number;\r\n}\r\n\r\nconst MonthPanelColumn = (props: Props) => {\r\n  return (\r\n    <Col>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 h-100 overflow-hidden border border-1 border border-top-0\"\r\n              style={{\r\n                backgroundColor: snapshot.isDraggingOver\r\n                  ? \"rgba(0, 0, 0, 0.1)\"\r\n                  : \"rgba(255, 255, 255, 0.2)\",\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {Array.isArray(props.column.days)\r\n                ? props.column.days.map((day: ModelDay, idx: number) => {\r\n                    return (\r\n                      <MonthPanelDay\r\n                        key={UUID()}\r\n                        day={day}\r\n                        columnIdx={props.columnIdx}\r\n                        dayIdx={idx}\r\n                      />\r\n                    );\r\n                  })\r\n                : []}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumn;\r\n","import Col from \"react-bootstrap/Col\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ninterface Props {\r\n  thumbPosition: number;\r\n}\r\n\r\nconst MonthPanelColumnsHeader = (props: Props) => {\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: month?.calcHours?.submittedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: month?.calcHours?.acceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: month?.calcHours?.rejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <Col\r\n            key={headerText}\r\n            className={`text-dark-emphasis fs-responsive bg-white fw-medium p-1 d-flex align-items-center ${\r\n              props.thumbPosition === 0\r\n                ? \"border-bottom border-3 border-white\"\r\n                : \"border-bottom border-3\"\r\n            }`}\r\n            style ={{height: \"35px\"}}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </Col>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumnsHeader;\r\n","import { useRef, useState } from \"react\";\r\n\r\nconst useScrollThumbPosition = () => {\r\n  const scrollableRef = useRef(null);\r\n  const [thumbPosition, setThumbPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const element = scrollableRef.current;\r\n\r\n    if (element) {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      const thumbPosition = (scrollTop / maxScrollTop) * 100;\r\n      setThumbPosition(thumbPosition);\r\n    }\r\n  };\r\n\r\n  return { scrollableRef, thumbPosition, handleScroll };\r\n};\r\n\r\nexport default useScrollThumbPosition;\r\n","import { ModelDay } from \"../sharedModels/modelDay\";\r\nimport { ModelColumn } from \"../sharedModels/modelColumn\";\r\n\r\nconst getHoursFromColumn = (days: ModelDay[]) => {\r\n  return days?.reduce((acu, day) => {\r\n    const dayHours = day?.hours || 0;\r\n    return acu + dayHours;\r\n  }, 0);\r\n};\r\n\r\nconst getHoursFromColumns = (columns: ModelColumn[]) => {\r\n  const submittedHours = getHoursFromColumn(columns[0]?.days);\r\n  const acceptedHours = getHoursFromColumn(columns[1]?.days);\r\n  const rejectedHours = getHoursFromColumn(columns[2]?.days);\r\n\r\n  return { submittedHours, acceptedHours, rejectedHours };\r\n};\r\n\r\nexport default getHoursFromColumns;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSliceMonths\";\r\nimport MonthPanelColumn from \"../MonthPanelColumn\";\r\nimport MonthPanelColumnsHeader from \"../monthPanelColumnsHeader.tsx/MonthPanelColumnsHeader\";\r\nimport useScrollThumbPosition from \"./useScrollThumbPosition\";\r\nimport { addDaysToColumns, handleDragDrop } from \"./utilsMonthPanelColumns\";\r\nimport useWindowWidth from \"../../../hooks/useWindowWidth\";\r\nimport getHoursFromColumns from \"../../../utils/getHoursFromColumns\";\r\n\r\nconst MonthPanelColumns = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const [updateMonth] = useUpdateMonthMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const columnsWithDays = month && addDaysToColumns(month?.columns);\r\n  const [columns, setColumns] = useState<ModelColumn[]>([]);\r\n  const [executeUpdateMonth, setExecuteUpdateMonth] = useState(false);\r\n  const { submittedHours, acceptedHours, rejectedHours } =\r\n    getHoursFromColumns(columns);\r\n  const { scrollableRef, thumbPosition, handleScroll } =\r\n    useScrollThumbPosition();\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  useEffect(() => {\r\n    if (columnsWithDays) {\r\n      setColumns(columnsWithDays);\r\n    }\r\n  }, [month?.columns]);\r\n\r\n  useEffect(() => {\r\n    if (columns.length > 0 && month) {\r\n      updateMonth({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        monthBody: {\r\n          ...month,\r\n          columns: columns,\r\n          calcHours: {\r\n            ...month?.calcHours,\r\n            currentHours:\r\n              month?.calcHours?.allHours -\r\n              submittedHours -\r\n              acceptedHours -\r\n              rejectedHours +\r\n              rejectedHours,\r\n            submittedHours,\r\n            acceptedHours,\r\n            rejectedHours,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [executeUpdateMonth]);\r\n\r\n  const handleDragEnd = (results: DropResult) => {\r\n    month &&\r\n      handleDragDrop(\r\n        results,\r\n        month?.calcHours.currentHours,\r\n        columns,\r\n        setColumns\r\n      );\r\n    setExecuteUpdateMonth(prev => !prev);\r\n  };\r\n\r\n  const rowStyles = \"d-flex column-gap-1\";\r\n\r\n  return (\r\n    <div\r\n      ref={scrollableRef}\r\n      onScroll={handleScroll}\r\n      className=\"overflow-y-scroll h-100\"\r\n      style={{\r\n        maxHeight:\r\n          windowWidth >= 500\r\n            ? \"calc(100% - 32px)\"\r\n            : \"calc(100% - 32px - 2.5rem)\",\r\n      }}\r\n    >\r\n      <div className={`${rowStyles} sticky-top`}>\r\n        <MonthPanelColumnsHeader thumbPosition={thumbPosition} />\r\n      </div>\r\n\r\n      <div className={`${rowStyles}`} style={{ minHeight: \"calc(100% - 35px)\" }}>\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          {columns?.map((column: ModelColumn, idx: number) => {\r\n            return (\r\n              <MonthPanelColumn\r\n                key={column.id}\r\n                column={column}\r\n                columnIdx={idx}\r\n              />\r\n            );\r\n          })}\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumns;\r\n","import { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\n\r\nexport const addDaysToColumns = (columns: ModelColumn[]) => {\r\n  if (!Array.isArray(columns)) {\r\n    return [];\r\n  }\r\n  return columns?.map((column: ModelColumn) => {\r\n    if (!column?.hasOwnProperty(\"days\")) {\r\n      return { ...column, days: [] };\r\n    }\r\n    return column;\r\n  });\r\n};\r\n\r\nexport const handleDragDrop = (\r\n  results: any,\r\n  currentHours: number,\r\n  columns: ModelColumn[],\r\n  setColumns: React.Dispatch<React.SetStateAction<ModelColumn[]>>\r\n) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  const hoursInDay = columns[2]?.days[source.index]?.hours;\r\n  if (source.droppableId === \"rejected\" && currentHours < hoursInDay) return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns?.findIndex((column: ModelColumn) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns?.findIndex((column: ModelColumn) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = columns && [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: ModelColumn) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport HoursSummary from \"../../../components/HoursSummary\";\r\nimport MonthPanelColumns from \"../monthPanelColmns/MonthPanelColumns\";\r\n\r\nconst MonthPanelContent = () => {\r\n  const { pathname } = useLocation();\r\n  const [isAnimate, setAnimate] = useState(false);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    setAnimate(false);\r\n    const timeoutId = setTimeout(() => {\r\n      setAnimate(true);\r\n    });\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [pathname]);\r\n\r\n  return (\r\n    <>\r\n      {isAnimate && (\r\n        <div\r\n          className=\"py-1 opacityAnimation\"\r\n          style={{\r\n            maxWidth: \"1000px\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <HoursSummary />\r\n          <MonthPanelColumns />\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelContent;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { printPanelContent } from \"../../../utils/printPanelContent\";\r\nimport MonthPanelContent from \"./MonthPanelContent\";\r\n\r\nconst useRequestMonthPanel = () => {\r\n  const { month, error, isLoading } = useSelector(\r\n    (state: RootState) => state.monthPanel\r\n  );\r\n\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  let requestState;\r\n\r\n  if (isLoading) {\r\n    requestState = printPanelContent(\r\n      <Spinner animation=\"border\" variant=\"secondary\" className=\"fs-6\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      requestState = printPanelContent(\r\n        <div className=\"text-danger text-center \">\r\n          <> Błąd: {errMsg} </> <br />\r\n          <>Odśwież stronę</>\r\n        </div>\r\n      );\r\n    }\r\n  } else if (!month || month?.id === \"\") {\r\n    requestState = printPanelContent(\r\n      <div>\r\n        Brak danych z miesiąca {monthURLStringFormat}. Zapisz miesiąc w\r\n        ustawieniach.\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    requestState = (\r\n      <>\r\n        <MonthPanelContent />\r\n      </>\r\n    );\r\n  }\r\n  return { requestState };\r\n};\r\n\r\nexport default useRequestMonthPanel;\r\n","import IndexContainer from \"../../../components/IndexContainer\";\r\nimport useReduxMonthData from \"../../../hooks/updateReduxDatabase/useReduxMonthData\";\r\nimport useRequestMonthPanel from \"./useRequestMonthPanel\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  useReduxMonthData();\r\n\r\n  const { requestState } = useRequestMonthPanel();\r\n\r\n  return <IndexContainer>{requestState} </IndexContainer>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","export const printPanelContent = (contentJSX: React.ReactNode) => (\r\n  <div\r\n    className=\" d-flex justify-content-center align-items-center fs-3 text-warning text-center\"\r\n    style={{\r\n      maxWidth: \"1000px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    }}\r\n  >\r\n    {contentJSX}\r\n  </div>\r\n);"],"names":["props","windowWidth","useWindowWidth","_jsxs","className","style","height","overflow","position","children","_jsx","width","maxWidth","dispatch","useDispatch","_Fragment","isPrinted","id","onClick","e","_e$target","_e$target2","target","setIsPrinted","printAlert","handleClose","zIndex","backgroundColor","header","includes","Button","action","success","btnText","btnContent","isLoading","Spinner","animation","size","variant","monthURL","useLocation","pathname","slice","test","_Intl$DateTimeFormat","monthURLToDateFormat","Date","monthURLStringFormat","Intl","DateTimeFormat","year","month","timeZone","format","split","yearFromURL","monthFromURL","isMonthInURL","_useState","useState","window","innerWidth","_useState2","_slicedToArray","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","_useURLValues","useURLValues","_useMonthDataQuery","useMonthDataQuery","data","error","getMonth","getMonthError","getMonthIsLoading","_month$calcHours","_month$calcHours2","_month$calcHours3","_month$calcHours4","useSelector","state","monthPanel","calcHours","allHours","concat","currentHours","_props$day","dateToPrint","day","date","_props$day2","_props$day3","userName","place","TbArrowBigRightLineFilled","color","MdFactory","deleteDayById","obj","idToDelete","updatedColumns","columns","map","column","_column$days","updatedDays","days","filter","_objectSpread","calculateUpdatedCalcHours","columnIdx","subtractedHours","submittedHours","acceptedHours","rejectedHours","_month$columns$props$","_useDeleteDayMutation","useDeleteDayMutation","_useDeleteDayMutation2","deleteDay","useHTTPState","RiDeleteBin6Line","alert","agree","setColumnIdx","_useState3","_useState4","dayId","setDayId","_useState5","_useState6","isAlertPrinted","setIsAlertPrinted","findDay","find","deleteDayAsync","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","hours","t0","colIdx","monthBody","stop","apply","arguments","Draggable","draggableId","index","dayIdx","isDragDisabled","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","Alert","borderTop","userColor","opacity","MonthPanelDayPrintData","idx","toString","disabled","Col","Droppable","droppableId","droppableProps","isDraggingOver","Array","isArray","MonthPanelDay","UUID","placeholder","headerText","counter","thumbPosition","scrollableRef","useRef","setThumbPosition","handleScroll","element","current","scrollTop","scrollHeight","clientHeight","getHoursFromColumn","reduce","acu","_columns$","_columns$2","_columns$3","_useUpdateMonthMutati","useUpdateMonthMutation","updateMonth","columnsWithDays","hasOwnProperty","addDaysToColumns","setColumns","executeUpdateMonth","setExecuteUpdateMonth","_getHoursFromColumns","getHoursFromColumns","_useScrollThumbPositi","useScrollThumbPosition","length","rowStyles","onScroll","maxHeight","MonthPanelColumnsHeader","minHeight","DragDropContext","onDragEnd","results","_columns$$days$source","source","destination","hoursInDay","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","MonthPanelColumn","isAnimate","setAnimate","timeoutId","setTimeout","clearTimeout","HoursSummary","MonthPanelColumns","requestState","_useSelector","useMonthURLToString","printPanelContent","errMsg","status","MonthPanelContent","useReduxMonthData","useRequestMonthPanel","IndexContainer","contentJSX"],"sourceRoot":""}
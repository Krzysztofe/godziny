{"version":3,"file":"static/js/685.9a9b05be.chunk.js","mappings":"oHAmBA,IAVmB,SAACA,GAClB,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAAgCC,MAAO,CAAEC,OAAQ,UAAWC,SACxEL,EAAMM,QAAQN,EAAMO,QACnBP,EAAMQ,OAAOR,EAAMO,QACnBP,EAAMQ,OAAOR,EAAMO,QAG3B,C,kECwCA,IAxCmB,SAACP,GAClB,IAAAS,GACEC,EAAAA,EAAAA,MADMC,EAAMF,EAANE,OAAQC,EAAUH,EAAVG,WAAYC,EAAaJ,EAAbI,cAAeL,EAAMC,EAAND,OAAQF,EAAOG,EAAPH,QAGnD,OACEL,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACGL,EAAMe,WAAWC,KAChB,SAAAC,GAAkE,IAA/DV,EAAKU,EAALV,MAAOW,EAAKD,EAALC,MAAOC,EAAIF,EAAJE,KAAMC,EAAYH,EAAZG,aAAcC,EAAGJ,EAAHI,IAAKC,EAAGL,EAAHK,IAAKC,EAAWN,EAAXM,YAC7C,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,MAAK,CAAArB,SAAA,CACRa,IACCjB,EAAAA,EAAAA,KAACwB,EAAAA,EAAKE,MAAK,CAACC,QAAQ,OAAO1B,UAAU,sBAAqBG,SACvDa,KAGLjB,EAAAA,EAAAA,KAACwB,EAAAA,EAAKI,QAAO,CACXC,GAAIvB,EACJY,KAAMA,EACNY,KAAMxB,EACNA,MAAOI,EAAOJ,GACdyB,SAAU,SAAAC,GAAC,OAAIpB,EAAcN,EAAO0B,EAAEC,OAAO3B,MAAM,EACnD4B,OAAQvB,EACRS,IAAKA,EACLC,IAAKA,EACLC,YAAaA,EACba,KAAK,KACLlC,UAAU,iDACVC,MAAO,CAAEkC,UAAW,EAAGC,OAAQ,aAEhClB,IACCnB,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,MAAOA,EAAOC,OAAQA,EAAQF,QAASA,MArBtCC,EAyBrB,KAIR,C,8NCFA,EAvCoB,SAACP,GACnB,IAAAS,GACEC,EAAAA,EAAAA,MADMC,EAAMF,EAANE,OAAQC,EAAUH,EAAVG,WAAYC,EAAaJ,EAAbI,cAGpB2B,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IAA7DH,MAIFI,GAHsB,OAALJ,QAAK,IAALA,GAAAA,EAAOK,KAAKC,eACR,OAALN,QAAK,IAALA,GAAAA,EAAOK,KAAKE,cAEZpC,EAAOqC,SAAW,KAClCC,EAA0B,+CAAAC,OAAkDN,EAAa,yBAAAM,OAAwBN,EAAa,MAEpI,OACE3C,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACGL,EAAMmD,aAAanC,KAAI,SAAAT,GACtB,OACEN,EAAAA,EAAAA,KAACwB,EAAAA,EAAKC,MAAK,CAETxB,UAAU,uCAAsCG,UAEhDJ,EAAAA,EAAAA,KAACwB,EAAAA,EAAK2B,MAAK,CACTrB,KAAMxB,EACNc,IAAK,EACLC,IAAK,IACLf,MAAOI,EAAOJ,GACdyB,SAAU,SAAAC,GAAC,OAAIpB,EAAcN,EAAO0B,EAAEC,OAAO3B,MAAM,EACnD4B,OAAQvB,EACRV,UAAU,iCACVC,MAAO,CACLC,OAAQ,GACRiD,WAAYJ,MAbX1C,EAkBX,KAGN,EC5BA,EAfuB,WACrB,IAAQI,GAAWD,EAAAA,EAAAA,MAAXC,OACA6B,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IAA7DH,MACFM,EAAsB,OAALN,QAAK,IAALA,OAAK,EAALA,EAAOK,KAAKC,eAC7BC,EAAqB,OAALP,QAAK,IAALA,OAAK,EAALA,EAAOK,KAAKE,cAElC,OACE9C,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBG,SAC9ByC,EAAiBC,GAAiBpC,EAAOqC,SAAQ,QAAAE,OACtCJ,EAAiBC,EAAa,MACtC,IAGV,E,UCCA,EApBqB,WACnB,IAIMO,EAAS,8BACf,OACE9B,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,4CAA2CG,SAAA,EACxDJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWoD,EAAOjD,SAAC,SAExBmB,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,wBAAuBG,SAAA,EACpCJ,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CAACxC,WAVK,CACrB,CAAER,MAAO,WAAYY,KAAM,SAAUC,cAAc,MASL,SAC1CnB,EAAAA,EAAAA,KAAA,OAAAI,SAAK,UAGPJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWoD,EAAOjD,SAAC,YAG9B,E,8BCWA,EAtBuB,WAAO,IAADmD,EAAAC,EAC3BC,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aACbrB,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IAA7DH,MACRsB,GAA+BC,EAAAA,EAAAA,MAAwBC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAWF,EAAA,GAAEG,EAAOH,EAAA,GACrBlB,EAAsB,OAALN,QAAK,IAALA,GAAW,QAANgB,EAALhB,EAAOK,YAAI,IAAAW,OAAN,EAALA,EAAaV,eAC9BC,EAAqB,OAALP,QAAK,IAALA,GAAW,QAANiB,EAALjB,EAAOK,YAAI,IAAAY,OAAN,EAALA,EAAaV,cAI7BqB,EAAQ,eAAAnD,GAAAoD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAO7D,GAAuB,OAAA2D,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,YACzC9B,EAAiBC,GAAiBpC,EAAOqC,UAAQ,CAAA0B,EAAAE,KAAA,eAAAF,EAAAG,OAAA,wBAAAH,EAAAE,KAAA,EAE/CV,EAAY,CAChBY,KAAMlB,EACNpB,MAAOqB,EACPb,UAAWrC,EAAOqC,WACjB,KAAD,mBAAA0B,EAAAK,OAAA,GAAAP,EAAA,KACH,gBARaQ,GAAA,OAAA/D,EAAAgE,MAAA,KAAAC,UAAA,KAUd,MAAO,CAAEC,cAZa,CAAEnC,SAAU,GAYVoB,SAAAA,EAAUD,QAAAA,EACpC,ECQA,EA5ByB,WACvB,IAAAiB,EAA6CC,IAArCF,EAAaC,EAAbD,cAAef,EAAQgB,EAARhB,SAAUD,EAAOiB,EAAPjB,QACzBmB,GAAeC,EAAAA,EAAAA,GACrBpB,GACAlE,EAAAA,EAAAA,KAACuF,EAAAA,IAAmB,CAACtF,UAAU,YAAYC,MAAO,CAAEsF,SAAU,aAFxDH,WAKR,OACErF,EAAAA,EAAAA,KAACyF,EAAAA,GAAM,CAACP,cAAeA,EAAef,SAAUA,EAAS/D,UACvDmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAU,OAAMG,SAAA,EACpBJ,EAAAA,EAAAA,KAAC0F,EAAY,KACb1F,EAAAA,EAAAA,KAAC2F,EAAW,CAACzC,aAAc,CAAC,eAE5B3B,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,yDAAwDG,SAAA,EACrEJ,EAAAA,EAAAA,KAAC4F,EAAc,KACf5F,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACL3E,KAAK,SACL4E,SAAU5B,EAAQ6B,UAClB9F,UAAU,6IAA4IG,SAErJiF,WAMb,E,4BCkBA,EA9C2B,WACzB,IAAAW,GAA0DC,EAAAA,EAAAA,KAAlDC,EAAgBF,EAAhBE,iBAAkBC,EAA2BH,EAA3BG,4BAClBC,GAAe5D,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM2D,UAAU,IAAjEA,WACR3C,GAAmCC,EAAAA,EAAAA,KAA3B2C,EAAQ5C,EAAR4C,SAEFC,EAFwB7C,EAAZ8C,aAE0B,IAAIC,KAAKH,GAAY,KAE3DI,EACJH,GACA,IAAII,KAAKC,eAAe,QAAS,CAC/B9B,KAAM,UACNtC,MAAO,OACPqE,SAAU,QACTC,OAAOP,GAEZ,OACE/E,EAAAA,EAAAA,MAACuF,EAAAA,EAAS,CACR7G,UAAU,6CACVC,MAAO,CAAEC,OAAQ,QAASC,SAAA,EAExBgG,IACApG,EAAAA,EAAAA,KAAC8G,EAAAA,EAAUC,KAAI,CAAC9G,UAAU,4BAA2BG,SAAC,gBAK5B,OAA3B+F,QAA2B,IAA3BA,OAA2B,EAA3BA,EAA6BpF,KAAI,SAACwB,EAAeyE,GAChD,OACEhH,EAAAA,EAAAA,KAAC8G,EAAAA,EAAUC,KAAI,CAAa9G,UAAU,eAAcG,UAClDJ,EAAAA,EAAAA,KAACiH,EAAAA,GAAI,CACHC,GAAE,IAAAjE,OAAsB,OAAhBiD,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAmBc,IAC3B/G,UAAS,GAAAgD,OACPwD,IAA4BlE,GAAUkE,EAElC,YADA,YACW,yBACOrG,SAEvBmC,KATgBA,EAazB,MAGN,E,UCSA,EA5CqB,SAACxC,GACpB,IAAAS,GACEC,EAAAA,EAAAA,MADMF,EAAMC,EAAND,OAAQF,EAAOG,EAAPH,QAASM,EAAUH,EAAVG,WAAYC,EAAaJ,EAAbI,cAGrC,OACEZ,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACGL,EAAMe,WAAWC,KAAI,SAAAC,GAA4C,IAAzCc,EAAId,EAAJc,KAAMqF,EAAWnG,EAAXmG,YAAalG,EAAKD,EAALC,MAAOmG,EAAOpG,EAAPoG,QACjD,OACE7F,EAAAA,EAAAA,MAACC,EAAAA,EAAKC,MAAK,CAAArB,SAAA,EACTJ,EAAAA,EAAAA,KAACwB,EAAAA,EAAKE,MAAK,CAACC,QAASG,EAAM7B,UAAU,sBAAqBG,SACvDa,KAGHM,EAAAA,EAAAA,MAACC,EAAAA,EAAK6F,OAAM,CACVxF,GAAIC,EACJA,KAAMA,EACNC,SAAU,SAAAC,GAAC,OAAIpB,EAAckB,EAAME,EAAEC,OAAO3B,MAAM,EAClD4B,OAAQvB,EACRwB,KAAK,KACLlC,UAAS,4DAAAgD,OACS,gBAAhBkE,EAAgC,eAAiB,IAEnDjH,MAAO,CACLmC,OAAQ,WACRjC,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,UAAAI,SAAS+G,IAED,OAAPC,QAAO,IAAPA,OAAO,EAAPA,EAASrG,KAAI,SAACuG,GACb,OACEtH,EAAAA,EAAAA,KAAA,UAAqBM,MAAOgH,EAAOlH,SAChCkH,GADUA,EAIjB,QAEFtH,EAAAA,EAAAA,KAACsC,EAAAA,EAAU,CAAChC,MAAOwB,EAAMvB,OAAQA,EAAQF,QAASA,MA5BnCY,EA+BrB,KAGN,ECpBA,EAzBsB,SAAClB,GAAkB,IAADwD,EAC9B7C,GAAWD,EAAAA,EAAAA,MAAXC,OACA2E,GAAeC,EAAAA,EAAAA,GAAavF,EAAMmE,QAAS,oBAA3CmB,WACA9C,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IAA7DH,MACFgF,EAAoB,OAALhF,QAAK,IAALA,GAAW,QAANgB,EAALhB,EAAOK,YAAI,IAAAW,OAAN,EAALA,EAAagE,aAElC,OACEhG,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAT,SAAA,EACEJ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACL3E,KAAK,SACL4E,SAAU/F,EAAMmE,QAAQ6B,UACxB9F,UAAU,0CAAyCG,SAElDiF,KAGHrF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gCAAgCC,MAAO,CAAEC,OAAQ,QAASC,SACtEmH,GAAgB7G,EAAO8G,MAAQ,GAAsB,IAAjBD,EACjC,8BACA,OAIZ,E,oBCaA,EA1CuB,WACrB,IAAcE,GAAcC,EAAAA,EAAAA,MAApBC,KAEFC,EAAQH,GAAwB,GAEhCI,EAAa,OAALD,QAAK,IAALA,OAAK,EAALA,EAAO7G,KAAI,SAAAC,GACvB,OADkCA,EAAR8G,QAE5B,IAiCA,MAAO,CAAEC,iBA/BgB,CACvB,CACEjG,KAAM,WACNqF,YAAY,GAADlE,OAAsB,IAAjB4E,EAAMG,OAAe,cAAgB,aACrD/G,MAAO,kBACPmG,QAASS,GAEX,CACE/F,KAAM,QACNqF,YAAa,UACblG,MAAO,2BACPmG,QAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAGvC,CACEtF,KAAM,QACNqF,YAAa,cACblG,MAAO,yBACPmG,QAAS,CAAC,gBAAY,UAaCa,eAVJ,CACrB,CACE3H,MAAO,OACPW,MAAO,mBACPC,KAAM,OACNC,cAAc,EACdC,IAAK8G,EAAAA,GACL7G,IAAK8G,EAAAA,KAIX,E,8BC9CaC,EAAmBC,EAAAA,GAAW,CACzCP,SAAUO,EAAAA,KAEPC,KAAK,gBAAiB,sBAAiB,SAAAhI,GAAK,MAAc,cAAVA,CAAgB,IAChEiI,SAAS,sBACZf,MAAOa,EAAAA,KAEJC,KACC,iBACA,0BACA,SAAAhI,GAAK,MAAc,kBAAVA,CAAyB,IAEnCiI,SAAS,0BACZC,MAAOH,EAAAA,KAEJC,KACC,iBACA,wBACA,SAAAhI,GAAK,MAAc,gBAAVA,CAAuB,IAEjCiI,SAAS,0B,UCsCd,EAlDqB,WAAO,IAADE,EACzBC,GAA0BC,EAAAA,EAAAA,MAAmBC,GAAA5E,EAAAA,EAAAA,GAAA0E,EAAA,GAAtCG,EAAMD,EAAA,GAAE1E,EAAO0E,EAAA,GACdrG,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IAA7DH,MACAqF,GAAUpF,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMmF,KAAK,IAAvDA,MACFkB,EAAcvG,IAAc,OAALA,QAAK,IAALA,GAAc,QAATkG,EAALlG,EAAOwG,eAAO,IAAAN,OAAT,EAALA,EAAiB,IAC9ChF,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aAEfsB,EAAgB,CACpBrD,GAAI,GACJmH,KAAMd,EAAAA,GACNV,MAAO,GACPM,SAAU,YACVU,MAAO,GACPS,UAAW,IAEPC,EAAad,EAEbjE,EAAQ,eAAAnD,GAAAoD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAO7D,GAAW,IAAA6C,EAAAC,EAAA2F,EAAAF,EAAAG,EAAA,OAAA/E,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAE1B,OAALpC,QAAK,IAALA,GAAW,QAANgB,EAALhB,EAAOK,YAAI,IAAAW,OAAN,EAALA,EAAagE,eAAgB7G,EAAO8G,MAAQ,GACd,KAAzB,OAALjF,QAAK,IAALA,GAAW,QAANiB,EAALjB,EAAOK,YAAI,IAAAY,OAAN,EAALA,EAAa+D,eAAkB,CAAA9C,EAAAE,KAAA,eAAAF,EAAAG,OAAA,iBAYL,OARtBqE,EAAiB,OAALrB,QAAK,IAALA,GAEhB,QAFqBuB,EAALvB,EAAOyB,MAAK,SAACC,GAC7B,OAAOA,EAAKxB,WAAapH,EAAOoH,QAClC,WAAE,IAAAqB,OAFqB,EAALA,EAEdF,UAEEG,GAAgBG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjB7I,GAAM,IACTmB,IAAI2H,EAAAA,EAAAA,KACJhC,OAAQ9G,EAAO8G,MACfyB,UAAWA,GAAa,KAAExE,EAAAE,KAAA,EAGtBkE,EAAO,CACXhE,KAAMlB,EACNpB,MAAOqB,EACP6F,iBAAeF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACVT,GAAW,IACdY,KAAiB,OAAXZ,QAAW,IAAXA,GAAAA,EAAaY,KAAI,GAAAzG,QAAA0G,EAAAA,EAAAA,GACfb,EAAYY,MAAI,CAAEN,IACtB,CAACA,OAEN,KAAD,mBAAA3E,EAAAK,OAAA,GAAAP,EAAA,KACH,gBA5BaQ,GAAA,OAAA/D,EAAAgE,MAAA,KAAAC,UAAA,KA8Bd,MAAO,CAAEC,cAAAA,EAAegE,WAAAA,EAAY/E,SAAAA,EAAUD,QAAAA,EAChD,EC3BA,EArBuB,WAAO,IAADX,EAC3BqG,EAA6CC,IAArC5B,EAAc2B,EAAd3B,eAAgBF,EAAgB6B,EAAhB7B,iBACxB+B,EAAyDC,IAAjD7E,EAAa4E,EAAb5E,cAAegE,EAAUY,EAAVZ,WAAY/E,EAAQ2F,EAAR3F,SAAUD,EAAO4F,EAAP5F,QACrC3B,GAAUC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAMC,WAAW,IAA7DH,MACFQ,EAAgB,OAALR,QAAK,IAALA,GAAW,QAANgB,EAALhB,EAAOK,YAAI,IAAAW,OAAN,EAALA,EAAaR,SAE9B,OACE/C,EAAAA,EAAAA,KAACyF,EAAAA,GAAM,CACLP,cAAeA,EACfkD,iBAAkBc,EAClB/E,SAAUA,EAAS/D,UAEnBmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAS,GAAAgD,OAAkB,IAAbF,EAAiB,oBAAsB,GAAE,SAAQ3C,SAAA,EACnEJ,EAAAA,EAAAA,KAACgK,EAAY,CAAClJ,WAAYiH,KAC1B/H,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CAACxC,WAAYmH,KACxBjI,EAAAA,EAAAA,KAACiK,EAAa,CAAC/F,QAASA,QAIhC,E,UCmBagG,EAAkC,CAC7CrI,GAAI,GACJkH,QAhB6B,CAC7B,CAAElH,GAAI,YAAa6H,KAAM,IACzB,CAAE7H,GAAI,WAAY6H,KAAM,IACxB,CAAE7H,GAAI,WAAY6H,KAAM,KAcxB9G,KAXsB,CACtBG,SAAU,EACVwE,aAAc,EACd1E,eAAgB,EAChBC,cAAe,EACfqH,cAAe,ICzBjB,EAhB+B,WAC7B,IAAQ/D,GAAe5D,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM2D,UAAU,IAAjEA,WAYR,MAAO,CAAEgC,iBAVgBC,EAAAA,GAAW,CAClC+B,UAAW/B,EAAAA,KAERC,KACC,iBACA,yBACA,SAAAhI,GAAK,YAAc+J,IAAV/J,KAAkC,OAAV8F,QAAU,IAAVA,GAAAA,EAAYkE,SAAShK,GAAM,MAKpE,EC0DA,EAtDuB,WACrB,IAAMiK,GAAWC,EAAAA,EAAAA,MACjBC,GAA+BC,EAAAA,EAAAA,MAAwBC,GAAA3G,EAAAA,EAAAA,GAAAyG,EAAA,GAAhDG,EAAWD,EAAA,GAAEzG,EAAOyG,EAAA,GAC3BE,GAA0BC,EAAAA,EAAAA,MAAnBC,GAA+C/G,EAAAA,EAAAA,GAAA6G,EAAA,GAAhC,GACtBG,GAAsBC,EAAAA,EAAAA,MAAfC,GAAuClH,EAAAA,EAAAA,GAAAgH,EAAA,GAA5B,GACV5E,GAAe5D,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM2D,UAAU,IAAjEA,WACAgC,EAAqB+C,IAArB/C,iBACRgD,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAtH,EAAAA,EAAAA,GAAAoH,EAAA,GAA1CG,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAoCJ,EAAAA,EAAAA,UAAS,CAAC,GAAEK,GAAA1H,EAAAA,EAAAA,GAAAyH,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BxG,EAAgB,CAAEkF,UAAU,GAADnH,OAAK4I,EAAAA,GAAc,KAAA5I,OAAI6I,EAAAA,KAElD5C,EAAad,EAEbjE,EAAQ,eAAAnD,GAAAoD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAO7D,GAAW,IAAAmE,EAAAtC,EAAAwJ,EAAA,OAAA1H,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKX,OAJhBE,EAAOnE,EAAO0J,UAAU4B,MAAM,EAAG,GACjCzJ,EAAQ7B,EAAO0J,UAAU4B,OAAO,GAChCD,GAA4BxC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAC7BW,GAAY,IACfrI,GAAInB,EAAO0J,YAAS3F,EAAAE,KAAA,EAGhBiG,EAAY,CAAE/F,KAAAA,EAAMtC,MAAAA,EAAOwJ,UAAAA,IAAa,KAAD,EAC7CH,EAAclL,GAAQ,wBAAA+D,EAAAK,OAAA,GAAAP,EAAA,KACvB,gBAVaQ,GAAA,OAAA/D,EAAAgE,MAAA,KAAAC,UAAA,KAYRgH,EAAmB,eAAAC,GAAA9H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA6H,EAAOzL,GAAW,IAAAmE,EAAAtC,EAAA6J,EAAAC,EAAAC,EAAA,OAAAjI,EAAAA,EAAAA,KAAAG,MAAA,SAAA+H,GAAA,cAAAA,EAAA7H,KAAA6H,EAAA5H,MAAA,WACxC4G,EAAU,CAADgB,EAAA5H,KAAA,QAGgC,OAFrCE,EAAOnE,EAAO0J,UAAU4B,MAAM,EAAG,GACjCzJ,EAAQ7B,EAAO0J,UAAU4B,OAAO,GAChCI,EAAShG,GAA0B,GAAEmG,EAAA5H,KAAA,EACrCoG,EAAgB,GAAD9H,QAAA0G,EAAAA,EAAAA,GAAKyC,GAAM,IAAAnJ,OAAK4B,EAAI,KAAA5B,OAAIV,MAAU,KAAD,EACtDgI,EAAS,IAADtH,OAAKvC,EAAO0J,YAAamC,EAAA5H,KAAA,oBACxBT,EAAQsI,QAAQ,CAADD,EAAA5H,KAAA,SAEgB,OADlCE,EAAOnE,EAAO0J,UAAU4B,MAAM,EAAG,GACjCzJ,EAAQ7B,EAAO0J,UAAU4B,OAAO,GAAEO,EAAA5H,KAAA,GAClCuG,EAAY,CAAErG,KAAAA,EAAMtC,MAAAA,IAAS,KAAD,IAClCkK,EAAAA,EAAAA,GAAM,IAAI,yBAAAF,EAAAzH,OAAA,GAAAqH,EAAA,KAEb,gBAbwBO,GAAA,OAAAR,EAAAlH,MAAA,KAAAC,UAAA,KAyBzB,OAVA0H,EAAAA,EAAAA,YAAU,WACJzI,EAAQqH,UACVC,GAAa,GACRA,GAAa,EACtB,GAAG,CAACtH,EAAQqH,aAEZoB,EAAAA,EAAAA,YAAU,WACRV,EAAoBN,EACtB,GAAG,CAACJ,EAAWR,IAER,CAAE7F,cAAAA,EAAegE,WAAAA,EAAY/E,SAAAA,EAAUD,QAAAA,EAChD,EC1BA,EAvCyB,WACvB,IAAA0I,EAAyDC,IAAjD3H,EAAa0H,EAAb1H,cAAegE,EAAU0D,EAAV1D,WAAY/E,EAAQyI,EAARzI,SAAUD,EAAO0I,EAAP1I,QACrCmB,GAAeC,EAAAA,EAAAA,GACrBpB,GACAlE,EAAAA,EAAAA,KAACuF,EAAAA,IAAmB,CAACtF,UAAU,YAAYC,MAAO,CAAEsF,SAAU,aAFxDH,WAKFyH,EAAa,CACjB,CACExM,MAAO,YACPY,KAAM,QACND,MAAM,qBACNE,cAAc,EACdC,IAAI,GAAD6B,OAAK4I,EAAAA,GAAc,KAAA5I,OAAI6I,EAAAA,IAC1BzK,IAAK,YAIT,OACErB,EAAAA,EAAAA,KAACyF,EAAAA,GAAM,CACLP,cAAeA,EACfkD,iBAAkBc,EAClB/E,SAAUA,EAAS/D,UAEnBmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAU,OAAMG,SAAA,EACpBJ,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CAACxC,WAAYgM,KAExB9M,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACL3E,KAAK,SACL4E,SAAU5B,EAAQ6B,UAClB9F,UAAU,4IAA2IG,SAEpJiF,QAKX,ECPA,EA7B8B,WAC5B,IAAcoC,GAAcC,EAAAA,EAAAA,MAApBC,KAEFoF,EAAsB,OAATtF,QAAS,IAATA,OAAS,EAATA,EAAW1G,KAAI,SAAAC,GAAW,OAAAA,EAAR8G,QAAkC,IACjEkF,EAAuB,OAATvF,QAAS,IAATA,OAAS,EAATA,EAAW1G,KAAI,SAAAmL,GAAY,OAAAA,EAATjD,SAAoC,IAsB1E,MAAO,CAAEb,iBApBgBC,EAAAA,GAAW,CAClCP,SAAUO,EAAAA,KAEPjH,IAAI,EAAG,iBACPC,IAAI,GAAI,iBACRiH,KACC,iBACA,yBACA,SAAAhI,GAAK,YAAc+J,IAAV/J,KAAkC,OAAVyM,QAAU,IAAVA,GAAAA,EAAYzC,SAAShK,GAAM,IAE7DiI,SAAS,sBACZU,UAAWZ,EAAAA,KAERC,KACC,iBACA,qBACA,SAAAhI,GAAK,YAAc+J,IAAV/J,KAAmC,OAAX0M,QAAW,IAAXA,GAAAA,EAAa1C,SAAShK,GAAM,MAKrE,ECKA,EAjCsB,WACpB,IAAA2M,GAA2BC,EAAAA,EAAAA,MAAoBC,GAAAnJ,EAAAA,EAAAA,GAAAiJ,EAAA,GAAxCG,EAAOD,EAAA,GAAEjJ,EAAOiJ,EAAA,GACf/E,EAAqBiF,IAArBjF,iBACMX,GAAcC,EAAAA,EAAAA,MAApBC,KAEFC,EAAQH,GAAa,GAQrByB,EAAad,EACbjE,EAAQ,eAAA+H,GAAA9H,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAO7D,EAAWM,GAAA,IAAAsM,EAAAC,EAAA,OAAAlJ,EAAAA,EAAAA,KAAAG,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKrB,GALyB2I,EAAStM,EAATsM,UAC/BC,GAAahE,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACd7I,GAAM,IACToH,SACEpH,EAAOoH,SAASkE,MAAM,EAAG,GAAGwB,cAAgB9M,EAAOoH,SAASkE,MAAM,GACpEnK,IAAI2H,EAAAA,EAAAA,QAGF/B,EAAU,CAADhD,EAAAE,KAAA,eAAAF,EAAAE,KAAA,EACLyI,EAAQ,GAADnK,QAAA0G,EAAAA,EAAAA,GAAK/B,GAAK,CAAE2F,KAAgB,KAAD,EAAA9I,EAAAE,KAAA,sBAAAF,EAAAE,KAAA,EAElCyI,EAAQ,CAACG,IAAgB,KAAD,EAEhCD,IAAY,yBAAA7I,EAAAK,OAAA,GAAAP,EAAA,KACb,gBAdaQ,EAAA2H,GAAA,OAAAR,EAAAlH,MAAA,KAAAC,UAAA,KAgBd,MAAO,CAAEC,cAvBa,CACpBrD,GAAI,GACJiG,SAAU,GACVmB,UAAW,WAoBWC,WAAAA,EAAY/E,SAAAA,EAAUD,QAAAA,EAChD,ECWA,EA5CwB,WACtB,IAAAuJ,EAAyDC,IAAjDxI,EAAauI,EAAbvI,cAAegE,EAAUuE,EAAVvE,WAAY/E,EAAQsJ,EAARtJ,SAAUD,EAAOuJ,EAAPvJ,QACrCmB,GAAeC,EAAAA,EAAAA,GACrBpB,GACAlE,EAAAA,EAAAA,KAACuF,EAAAA,IAAmB,CAACtF,UAAU,YAAYC,MAAO,CAAEsF,SAAU,aAFxDH,WAqBR,OACErF,EAAAA,EAAAA,KAACyF,EAAAA,GAAM,CACLP,cAAeA,EACfkD,iBAAkBc,EAClB/E,SAAUA,EAAS/D,UAEnBmB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACvB,UAAU,OAAMG,SAAA,EACpBJ,EAAAA,EAAAA,KAACsD,EAAAA,EAAU,CAACxC,WAvBC,CACjB,CACER,MAAO,WACPY,KAAM,OACND,MAAO,kBACPE,cAAc,EACdG,YAAa,aAEf,CACEhB,MAAO,YACPY,KAAM,QACND,MAAO,cACPE,cAAc,OAaZnB,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACL3E,KAAK,SACL4E,SAAU5B,EAAQ6B,UAClB9F,UAAU,4IAA2IG,SAEpJiF,QAKX,E,oBCJA,EAnC0B,SAACtF,GACzB,IAAAqL,GAA0BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAtH,EAAAA,EAAAA,GAAAoH,EAAA,GAAlCuC,EAAMrC,EAAA,GAAEsC,EAAOtC,EAAA,GACtB,OACE/J,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAT,SAAA,EACEmB,EAAAA,EAAAA,MAACsE,EAAAA,EAAM,CACLgI,QAAQ,eACRC,QAAS,kBAAMF,GAAQ,SAAAlJ,GAAI,OAAKA,CAAI,GAAC,EACrC,gBAAeiJ,EACf,gBAAc,wBACdxL,KAAK,KACLlC,UAAS,wGAAAgD,OACP0K,EAAS,mBAAqB,oBAEhCzN,MAAO,CACL6N,WAAY,uBACZ3N,SAAA,CAEDL,EAAMiO,OACPhO,EAAAA,EAAAA,KAACiO,EAAAA,IAA0B,CACzBhO,UAAU,OACVC,MAAO,CACLgO,UAAU,GAADjL,OAAK0K,EAAS,iBAAmB,GAAE,KAC5CQ,mBAAoB,eAI1BnO,EAAAA,EAAAA,KAACoO,EAAAA,EAAQ,CAACC,GAAIV,EAAOvN,UACnBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yCAAwCG,SACpDL,EAAMK,eAKjB,ECIA,GArCoB,WAClB,IAAQmG,GAAiB7C,EAAAA,EAAAA,KAAjB6C,aACA+H,GAAyBC,EAAAA,EAAAA,KAAzBD,qBAER,OACE/M,EAAAA,EAAAA,MAACiN,EAAAA,EAAUC,KAAI,CAACxO,UAAU,4EAA2EG,SAAA,CAClGmG,IACCvG,EAAAA,EAAAA,KAAC0O,EAAiB,CAACV,MAAOM,EAAqBlO,UAC7CJ,EAAAA,EAAAA,KAAC2O,EAAkB,MAGtBpI,IACCvG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMG,UACnBJ,EAAAA,EAAAA,KAAC0O,EAAiB,CAACV,MAAO,iBAAiB5N,UACzCJ,EAAAA,EAAAA,KAAC4O,EAAgB,QAKtBrI,IAAgBvG,EAAAA,EAAAA,KAAC6O,EAAc,KAE9BtI,IACAvG,EAAAA,EAAAA,KAAC0O,EAAiB,CAACV,MAAO,sBAAiB5N,UACzCJ,EAAAA,EAAAA,KAAC8O,EAAgB,OAGnBvI,IACAvG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMG,UACnBJ,EAAAA,EAAAA,KAAC0O,EAAiB,CAACV,MAAO,0BAAqB5N,UAC7CJ,EAAAA,EAAAA,KAAC+O,EAAe,UAM5B,EC3BA,GAfsB,WACpB,IAAQC,GAAgBC,EAAAA,EAAAA,KAAhBD,YAER,OACEhP,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,SACG4O,EAAc,MACbhP,EAAAA,EAAAA,KAACwO,EAAAA,EAAUU,OAAM,CACfC,aAAa,EACbjP,MAAO,CAAEkP,MAAO,cAAeC,WAAY,WAKrD,ECYA,GArB0B,SAACtP,GACzB,IAAQiP,GAAgBC,EAAAA,EAAAA,KAAhBD,YAER,OACEhP,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACLgI,QAAQ,OACRC,QAAS/N,EAAMuP,WACfrP,UAAS,iCAAAgD,OACP+L,GAAe,IAAM,SAAW,WAElC9O,MAAO,CACLqP,SAAU,QACVpP,OAAQ,SACRqP,OAAQ,GACRpP,SACH,QAIL,E,iCCiCA,GAnDsB,WACpB,IAAMmK,GAAWC,EAAAA,EAAAA,MACjBY,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAtH,EAAAA,EAAAA,GAAAoH,EAAA,GAA1CrF,EAASuF,EAAA,GAAEmE,EAAYnE,EAAA,GAe1BjG,GACF9D,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,kEAAiEG,SAAA,EAC9EJ,EAAAA,EAAAA,KAAC0P,GAAAA,IAAe,CAACzP,UAAU,eAAe,aAkB9C,OAbI8F,IACFV,GACErF,EAAAA,EAAAA,KAAC2P,GAAAA,EAAO,CACNC,UAAU,SACVzN,KAAK,KACL0L,QAAQ,YACR5N,UAAU,UAASG,UAEnBJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBG,SAAC,mBAMtCJ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACLiI,QAnCW,WACb2B,GAAa,GACbI,GAAAA,GACGC,UACAC,MAAK,WACJxF,EAAS,IACX,IACCyF,OAAM,SAAAC,GAAK,OAAIxD,EAAAA,EAAAA,GAAMwD,EAAM,IAC3BC,SAAQ,WACPT,GAAa,EACf,GACJ,EAyBIxP,UAAU,6DACVC,MAAO,CACLmC,OAAQ,WAEVyD,SAAUC,EAAU3F,SAEnBiF,GAGP,E,oBCjCA,GApB6B,WAC3B,IAAM8K,GAAUC,EAAAA,GAAAA,MAIhB,OACEpQ,EAAAA,EAAAA,KAAC6F,EAAAA,EAAM,CACLiI,QALiB,WACnBqC,EAAQE,MACV,EAIIpQ,UAAU,6DACVC,MAAO,CACLmC,OAAQ,WACRjC,UAEFmB,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,kEAAiEG,SAAA,EAC9EJ,EAAAA,EAAAA,KAACsQ,GAAAA,IAAW,CAACrQ,UAAU,eAAe,oBAI9C,ECUA,GAzBmB,WACjB,IAAQsG,GAAiB7C,EAAAA,EAAAA,KAAjB6C,aACFlD,EAAS,mCAEf,OACErD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yBAAwBG,UACrCmB,EAAAA,EAAAA,MAACuF,EAAAA,EAAS,CAAA1G,SAAA,EACNmG,IACAvG,EAAAA,EAAAA,KAAC8G,EAAAA,EAAUC,KAAI,CAAC9G,UAAWoD,EAAOjD,UAChCJ,EAAAA,EAAAA,KAACuQ,GAAoB,OAGzBvQ,EAAAA,EAAAA,KAAC8G,EAAAA,EAAUC,KAAI,CAAC9G,UAAWoD,EAAOjD,UAChCmB,EAAAA,EAAAA,MAAC0F,EAAAA,GAAI,CAACC,GAAG,cAAcjH,UAAU,iCAAgCG,SAAA,EAC/DJ,EAAAA,EAAAA,KAACwQ,EAAAA,IAAgB,IAAG,oBAGxBxQ,EAAAA,EAAAA,KAAC8G,EAAAA,EAAUC,KAAI,CAAC9G,UAAWoD,EAAOjD,UAChCJ,EAAAA,EAAAA,KAACyQ,GAAa,UAKxB,E,iCCiCA,GAvCyB,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACjBlN,GAAsCC,EAAAA,EAAAA,KAA9BC,EAAWF,EAAXE,YAAaC,EAAYH,EAAZG,aACrBgN,GAAmCC,EAAAA,EAAAA,IAAkB,CACnDhM,KAAMlB,EACNpB,MAAOqB,IAFD+D,EAAIiJ,EAAJjJ,KAAMsI,EAAKW,EAALX,MAAOlK,EAAS6K,EAAT7K,UAIrB+K,GAIIpJ,EAAAA,EAAAA,MAHID,EAASqJ,EAAfnJ,KACOoJ,EAAUD,EAAjBb,MACWe,EAAcF,EAAzB/K,UAEFkL,GAIIC,EAAAA,EAAAA,MAHIC,EAAcF,EAApBtJ,KACOyJ,EAAeH,EAAtBhB,MACWoB,EAAmBJ,EAA9BlL,UAqBF,OAlBA4G,EAAAA,EAAAA,YAAU,WACR+D,GAASY,EAAAA,GAAAA,IAAS3J,IAClB+I,GAASa,EAAAA,GAAAA,IAActB,IACvBS,GAASc,EAAAA,GAAAA,IAAkBzL,GAC7B,GAAG,CAAC4B,EAAMsI,EAAOlK,EAAW2K,KAE5B/D,EAAAA,EAAAA,YAAU,WACR+D,GAASe,EAAAA,GAAAA,IAAShK,IAClBiJ,GAASgB,EAAAA,GAAAA,IAAcX,IACvBL,GAASiB,EAAAA,GAAAA,IAAkBX,GAC7B,GAAG,CAACvJ,EAAWsJ,EAAYC,EAAgBN,KAE3C/D,EAAAA,EAAAA,YAAU,WACR+D,GAASkB,EAAAA,GAAAA,IAAcT,IACvBT,GAASmB,EAAAA,GAAAA,IAAkBT,IAC3BV,GAASoB,EAAAA,GAAAA,IAAsBT,GACjC,GAAG,CAACF,EAAgBC,EAAiBC,EAAqBX,IAEnD,CAAC,CACV,ECAA,GAjDqB,WACnBqB,KACA,IAAQC,GAAaC,EAAAA,EAAAA,MAAbD,SACR5G,GAA0BC,EAAAA,EAAAA,WAAS,GAAMC,GAAAtH,EAAAA,EAAAA,GAAAoH,EAAA,GAAlC8G,EAAM5G,EAAA,GAAE6G,EAAO7G,EAAA,GACd0D,GAAgBC,EAAAA,EAAAA,KAAhBD,YASR,OAJArC,EAAAA,EAAAA,YAAU,WACRqC,GAAe,KAAOmD,GAAQ,EAChC,GAAG,CAACnD,KAGFhP,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAT,UACI,CAAC,KAAKkK,SAAS0H,KACjBzQ,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAT,SAAA,EACIJ,EAAAA,EAAAA,KAACwO,EAAAA,EAAS,CACR4D,KAAMF,EACNG,OAbU,WAAH,OAASF,GAAQ,EAAO,EAc/BrQ,KAAK,mBACLwQ,QAAQ,EACRC,UAAU,EACVtS,UAAS,GAAAgD,OAAK+L,GAAe,KAAO,mBACpC9O,MAAO,CACLkP,MAAOJ,GAAe,IAAM,MAAQ,QACpCwD,SAAUxD,GAAe,KAAO,QAChCyD,gBAAiB,0BACjBrS,UAEFmB,EAAAA,EAAAA,MAAA,OACEtB,UAAU,yBACVC,MAAO,CACLC,OAAQ,OACRsS,gBAAiB,4BACjBrS,SAAA,EAEFJ,EAAAA,EAAAA,KAAC0S,GAAa,KACd1S,EAAAA,EAAAA,KAAC2S,GAAW,KACZ3S,EAAAA,EAAAA,KAAC4S,GAAU,UAGf5S,EAAAA,EAAAA,KAAC6S,GAAiB,CAACvD,WAnCR,WAAH,OAAS6C,GAAQ,SAAAW,GAAC,OAAKA,CAAC,GAAE,QAwC5C,C,gIC3DA,IAAMC,EAAQ,IAAIvM,KAEZwM,EAAa,SAAChK,GAClB,IAAMnE,EAAOmE,EAAKiK,cACZ1Q,EAAQ2Q,OAAOlK,EAAKsI,WAAa,GAAG6B,SAAS,EAAG,KAChDC,EAAMF,OAAOlK,EAAKqK,WAAWF,SAAS,EAAG,KAC/C,MAAM,GAANlQ,OAAU4B,EAAI,KAAA5B,OAAIV,EAAK,KAAAU,OAAImQ,EAC7B,EAEME,EAAyB,IAAI9M,KAAKuM,EAAMQ,UAAY,SACpDC,EAAyB,IAAIhN,KAAKuM,EAAMQ,UAAY,QAE7C1H,EAAiBkH,EAAME,cACvBnH,EAAkBoH,OAAOH,EAAMzB,WAAa,GAAG6B,SAAS,EAAG,KAI3DjL,GAHgBgL,OAAOH,EAAMM,WAAWF,SAAS,EAAG,KACnCH,EAAWD,GAETC,EAAWM,IAC9BnL,EAAmB6K,EAAWQ,GAIN,IAAI9M,KAAKC,eAAe,QAAS,CACpE9B,KAAM,UACNtC,MAAO,OACPqE,SAAU,QACTC,OAAOkM,E,0FCXGU,GAAMC,EAAAA,EAAAA,IAVI,CACrBC,OAAQ,0CACRC,WAAY,gCACZC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,8CAKInE,GAAOoE,EAAAA,EAAAA,IAAQR,IACJS,EAAAA,EAAAA,IAAYT,E,2ECoBpC,IA1BqB,SAACvP,EAAuBiQ,IAC3CxH,EAAAA,EAAAA,YAAU,WACR,GAAIzI,EAAQsI,QAAS,CACnB,IAAMyD,EAAQ/L,EAAQ+L,MAChBmE,EAASnE,GAAS,WAAYA,GAASA,EAAMoE,QAAUpE,EAAMoE,OAEnEC,IAAAA,KAAU,CACRC,KAAK,mBAADtR,OAAWmR,GAAU,IACzBI,mBAAoB,qBAExB,CACF,GAAG,CAACtQ,EAAQsI,UAEZ,IAAInH,EAAiC8O,EAUrC,OARIjQ,EAAQ6B,YACVV,GACErF,EAAAA,EAAAA,KAAC2P,EAAAA,EAAO,CAACC,UAAU,SAASzN,KAAK,KAAK0L,QAAQ,YAAWzN,UACvDJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,kBAAiBG,SAAC,kBAKjC,CAAEiF,WAAAA,EACX,C,+CCJA,IA5BsB,WAAO,IAADrE,EAClBoF,GAAe5D,EAAAA,EAAAA,KAAY,SAACC,GAAgB,OAAKA,EAAM2D,UAAU,IAAjEA,WAEFF,EAAmBE,IAA4B,QAAlBpF,GAAA2I,EAAAA,EAAAA,GAAQvD,UAAU,IAAApF,OAAA,EAAdA,EAAiByT,MACtD,SAACC,EAAWC,GAIV,OAHc,IAAInO,KAAKkO,GAAGnB,UACZ,IAAI/M,KAAKmO,GAAGpB,SAG5B,KAKIpN,EAA8C,OAAhBD,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBnF,KACpD,SAACqJ,GACC,IAAMwK,EAAoB,IAAIpO,KAAK4D,GACnC,OAAO,IAAI1D,KAAKC,eAAe,QAAS,CACtC9B,KAAM,UACNtC,MAAO,OACPqE,SAAU,QACTC,OAAO+N,EACZ,IAGF,MAAO,CAAE1O,iBAAAA,EAAkBC,4BAAAA,EAC7B,C,qCCJA,IAvB4B,WAC1B,IACME,GADe4L,EAAAA,EAAAA,MAAbD,SACkBhG,MAAM,GAIhC,GAFqB3F,GAAY,gBAAgBiC,KAAKjC,GAEpC,CAAC,IAADwO,EACVvO,EAAuBD,GAAY,IAAIG,KAAKH,GAQlD,MAAO,CAACiI,qBANNhI,IAKE,QALkBuO,EACpB,IAAInO,KAAKC,eAAe,QAAS,CAC/B9B,KAAM,UACNtC,MAAO,OACPqE,SAAU,eACV,IAAAiO,OAAA,EAJFA,EAIIhO,OAAOP,IAEf,CAEE,MAAO,CAACgI,qBADqB,GAIjC,C,qCCVA,IAXqB,WACnB,IACMjI,GADe4L,EAAAA,EAAAA,MAAbD,SACkB8C,MAAM,KAAK9I,OAAO,GAAG,GACzCrI,EAAsB,OAAR0C,QAAQ,IAARA,OAAQ,EAARA,EAAU2F,MAAM,EAAG,GACjCpI,EAAuB,OAARyC,QAAQ,IAARA,OAAQ,EAARA,EAAU2F,OAAO,GAItC,MAAO,CAAE3F,SAAAA,EAAU1C,YAAAA,EAAaC,aAAAA,EAAc2C,aAFzB,gBAAgB+B,KAAKjC,GAG5C,C,+CCUA,IAnBuB,WACrB,IAAA+E,GAAsCC,EAAAA,EAAAA,UAAS0J,OAAOC,YAAW1J,GAAAtH,EAAAA,EAAAA,GAAAoH,EAAA,GAA1D4D,EAAW1D,EAAA,GAAE2J,EAAc3J,EAAA,GAelC,OAdAqB,EAAAA,EAAAA,YAAU,WACR,IAAMuI,EAAe,WACnBD,EAAeF,OAAOC,WACxB,EAGA,OAFAD,OAAOI,iBAAiB,SAAUD,GAE3B,WACLH,OAAOK,oBAAoB,SAAUF,EACvC,CACF,GAAG,IAKI,CAAElG,YAAAA,EACX,C,qGCjBaqG,EAAc,SAACC,GAC1B,MAAO,CACLtH,MAAOsH,EACPC,kBAAkB,EAClBf,mBAAoB,UACpBgB,kBAAmB,OACnBC,kBAAmB,MACnBC,iBAAkB,MAEtB,EAEajJ,EAAQ,SAACwD,GACpBqE,IAAAA,KAAU,CACRC,KAAK,kBAADtR,OAAUgN,GACduE,mBAAoB,qBAExB,C","sources":["components/inputs/FormErrors.tsx","components/inputs/InputsText.tsx","components/inputs/inputsRange/InputsRange.tsx","components/formHours/FormHoursError.tsx","components/formHours/FormHoursTop.tsx","components/formHours/useFormikHours.tsx","components/formHours/FormHoursContext.tsx","components/CollapseMonthsList.tsx","components/inputs/InputsSelect.tsx","components/formDay/FormDayButton.tsx","components/formDay/useDataFormDay.tsx","components/formDay/validationFormDay.tsx","components/formDay/useFormikDay.tsx","components/formDay/FormDayContext.tsx","components/someData/dataSidebarMonthForm.tsx","components/formMonth/useValidationMonthForm.tsx","components/formMonth/useFormikMonth.tsx","components/formMonth/FormMonthContext.tsx","components/formUser/useValidationFormUser.tsx","components/formUser/useFormikUser.tsx","components/formUser/FormUserContext.tsx","components/CollapseContainer.tsx","components/sidebar/SidebarBody.tsx","components/sidebar/SidebarHeader.tsx","components/sidebar/SidebarMenuButton.tsx","components/sidebar/SidebarLogout.tsx","pages/settings/SettingsReturnButton.tsx","components/sidebar/SidebarNav.tsx","components/sidebar/useReduxDatabase.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","data/firebaseConfig.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx","utils/alertHelpers.tsx"],"sourcesContent":["import { FormikTouched, FormikErrors } from \"formik\";\r\nimport { ModelDay } from \"../someData/dataSidebarMonthForm\";\r\n\r\ntype Props = {\r\n  value: string;\r\n  errors: FormikErrors<ModelDay>;\r\n  touched: FormikTouched<ModelDay>;\r\n};\r\n\r\nconst FormErrors = (props: Props) => {\r\n  return (\r\n    <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"0.7rem\" }}>\r\n      {props.touched[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched] &&\r\n        props.errors[props.value as keyof typeof props.touched]}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormErrors;\r\n","import { useFormikContext } from \"formik\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { ModelDay } from \"../someData/dataSidebarMonthForm\";\r\nimport FormErrors from \"./FormErrors\";\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    value: string;\r\n    type: string;\r\n    label?: string;\r\n    placeholder?: string;\r\n    isErrorPrint?: boolean;\r\n    min?: string;\r\n    max?: string;\r\n  }[];\r\n};\r\n\r\nconst InputsText = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue, errors, touched } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(\r\n        ({ value, label, type, isErrorPrint, min, max, placeholder }) => {\r\n          return (\r\n            <Form.Group key={value}>\r\n              {label && (\r\n                <Form.Label htmlFor=\"date\" className=\"mb-0 fs-6 fw-medium\">\r\n                  {label}\r\n                </Form.Label>\r\n              )}\r\n              <Form.Control\r\n                id={value}\r\n                type={type}\r\n                name={value}\r\n                value={values[value as keyof typeof values]}\r\n                onChange={e => setFieldValue(value, e.target.value)}\r\n                onBlur={handleBlur}\r\n                min={min}\r\n                max={max}\r\n                placeholder={placeholder}\r\n                size=\"sm\"\r\n                className=\"p-0 px-1 border border-primary shadow-sm w-100\"\r\n                style={{ minHeight: 0, cursor: \"pointer\" }}\r\n              />\r\n              {isErrorPrint && (\r\n                <FormErrors value={value} errors={errors} touched={touched} />\r\n              )}\r\n            </Form.Group>\r\n          );\r\n        }\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsText;\r\n","import React from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport { useFormikContext } from \"formik\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\ntype Props = {\r\n  inputsValues: string[];\r\n};\r\n\r\nconst InputsRange = (props: Props) => {\r\n  const { values, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelFormValues>();\r\n\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const submittedHours = month?.calc.submittedHours;\r\n  const acceptedHours = month?.calc.acceptedHours;\r\n\r\n  const gradientValue = values.allHours / 3.2;\r\n  const gradientBackground: string = `linear-gradient(to right, rgba(180,120,255) ${gradientValue}%, rgba(180,180,255) ${gradientValue}%)`;\r\n\r\n  return (\r\n    <>\r\n      {props.inputsValues.map(value => {\r\n        return (\r\n          <Form.Group\r\n            key={value}\r\n            className=\"mt-2 d-flex align-items-center w-100\"\r\n          >\r\n            <Form.Range\r\n              name={value}\r\n              min={0}\r\n              max={320}\r\n              value={values[value as keyof typeof values]}\r\n              onChange={e => setFieldValue(value, e.target.value)}\r\n              onBlur={handleBlur}\r\n              className=\"form-range custom-range medium\"\r\n              style={{\r\n                height: 10,\r\n                background: gradientBackground,\r\n              }}\r\n            />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsRange;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useFormikContext } from \"formik\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\nconst FormHoursError = () => {\r\n  const { values } = useFormikContext<ModelFormValues>();\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const submittedHours = month?.calc.submittedHours;\r\n  const acceptedHours = month?.calc.acceptedHours;\r\n\r\n  return (\r\n    <div className=\"text-danger fs-8\">\r\n      {submittedHours + acceptedHours > +values.allHours\r\n        ? `Min. ${submittedHours + acceptedHours} h`\r\n        : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormHoursError;\r\n","import InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormHoursTop = () => {\r\n  const dataInputsText = [\r\n    { value: \"allHours\", type: \"number\", isErrorPrint: false },\r\n  ];\r\n\r\n  const styles = \"fs-7 d-flex align-items-end\";\r\n  return (\r\n    <div className=\"d-flex justify-content-between fw-medium \">\r\n      <div className={styles}>0 h</div>\r\n\r\n      <div className=\"col-3 col-sm-5 d-flex\">\r\n        <InputsText inputsData={dataInputsText} /> &nbsp;\r\n        <div>h</div>\r\n      </div>\r\n\r\n      <div className={styles}>320 h</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormHoursTop;\r\n","import { useSelector } from \"react-redux\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddAllHoursMutation } from \"../../services/apiSliceMonths\";\r\n\r\ntype ModelFormValues = {\r\n  allHours: number;\r\n};\r\n\r\nconst useFormikHours = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const [addAllHours, success] = useAddAllHoursMutation();\r\n  const submittedHours = month?.calc?.submittedHours;\r\n  const acceptedHours = month?.calc?.acceptedHours;\r\n\r\n  const initialValues = { allHours: 0 };\r\n\r\n  const onSubmit = async (values: ModelFormValues) => {\r\n    if (submittedHours + acceptedHours > +values.allHours) return;\r\n\r\n    await addAllHours({\r\n      year: yearFromURL,\r\n      month: monthFromURL,\r\n      allHours: +values.allHours,\r\n    });\r\n  };\r\n\r\n  return { initialValues, onSubmit, success };\r\n};\r\n\r\nexport default useFormikHours;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport InputsRange from \"../inputs/inputsRange/InputsRange\";\r\nimport FormHoursError from \"./FormHoursError\";\r\nimport FormHoursTop from \"./FormHoursTop\";\r\nimport useFormikHours from \"./useFormikHours\";\r\n\r\nconst FormHoursContext = () => {\r\n  const { initialValues, onSubmit, success } = useFormikHours();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-info\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  return (\r\n    <Formik initialValues={initialValues} onSubmit={onSubmit}>\r\n      <Form className=\"py-2\">\r\n        <FormHoursTop />\r\n        <InputsRange inputsValues={[\"allHours\"]} />\r\n\r\n        <div className=\"d-flex justify-content-between align-items-center mt-2\">\r\n          <FormHoursError />\r\n          <Button\r\n            type=\"submit\"\r\n            disabled={success.isLoading}\r\n            className=\"col-2 d-flex justify-content-center align-items-center m-0 justify-content-center p-0 m-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormHoursContext;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useMonthDates from \"../hooks/useMonthDates\";\r\nimport useURLValues from \"../hooks/useURLValues\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst CollapseMonthsList = () => {\r\n  const { sortedInfoMonths, databaseMonthsDatesToString } = useMonthDates();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n  const { monthURL, isMonthInURL } = useURLValues();\r\n\r\n  const monthURLToDateFormat = isMonthInURL ? new Date(monthURL) : null;\r\n\r\n  const curMonthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup\r\n      className=\"scrolHidden fs-7 fw-medium text-capitalize\"\r\n      style={{ height: \"5rem\" }}\r\n    >\r\n      {!infoMonths && (\r\n        <ListGroup.Item className=\"border-0 p-0 text-warning\">\r\n          Brak danych\r\n        </ListGroup.Item>\r\n      )}\r\n\r\n      {databaseMonthsDatesToString?.map((month: string, idx: number) => {\r\n        return (\r\n          <ListGroup.Item key={month} className=\"border-0 p-0\">\r\n            <Link\r\n              to={`/${sortedInfoMonths?.[idx]}`}\r\n              className={`${\r\n                curMonthURLStringFormat !== month || !curMonthURLStringFormat\r\n                  ? \"text-dark\"\r\n                  : \"text-info\"\r\n              } text-decoration-none`}\r\n            >\r\n              {month}\r\n            </Link>\r\n          </ListGroup.Item>\r\n        );\r\n      })}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default CollapseMonthsList;\r\n","import React from \"react\";\r\nimport { useFormikContext, Formik, Form as FormFormik, Field } from \"formik\";\r\nimport { ModelDay } from \"../someData/dataSidebarMonthForm\";\r\nimport useDataSidebarSelects from \"../formDay/useDataFormDay\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport FormErrors from \"./FormErrors\";\r\n\r\ntype Props = {\r\n  inputsData: {\r\n    name: string;\r\n    firstOption: string;\r\n    label: string;\r\n    options: string[] | number[];\r\n  }[];\r\n};\r\n\r\nconst InputsSelect = (props: Props) => {\r\n  const { errors, touched, handleBlur, setFieldValue } =\r\n    useFormikContext<ModelDay>();\r\n\r\n  return (\r\n    <>\r\n      {props.inputsData.map(({ name, firstOption, label, options }) => {\r\n        return (\r\n          <Form.Group key={label}>\r\n            <Form.Label htmlFor={name} className=\"mb-0 fs-6 fw-medium\">\r\n              {label}\r\n            </Form.Label>\r\n\r\n            <Form.Select\r\n              id={name}\r\n              name={name}\r\n              onChange={e => setFieldValue(name, e.target.value)}\r\n              onBlur={handleBlur}\r\n              size=\"sm\"\r\n              className={`p-0 px-1 border border-primary shadow-sm text-capitalize ${\r\n                firstOption === \"Brak danych\" ? \"text-warning\" : \"\"\r\n              }`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <option>{firstOption}</option>\r\n\r\n              {options?.map((option: string | number) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n            <FormErrors value={name} errors={errors} touched={touched} />\r\n          </Form.Group>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InputsSelect;\r\n","import { useFormikContext } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddDayMutation } from \"../../services/apiSliceMonths\";\r\nimport { ModelDay } from \"../someData/dataSidebarMonthForm\";\r\nimport useFormikDay from \"./useFormikDay\";\r\n\r\ntype Props = {\r\n  success: any;\r\n};\r\n\r\nconst FormDayButton = (props: Props) => {\r\n  const { values } = useFormikContext<ModelDay>();\r\n  const { btnContent } = useHTTPState(props.success, \"Dodaj dzień\");\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const currentHours = month?.calc?.currentHours;\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={props.success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 bg-info text-white\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div className=\"text-danger d-block mt-0 fs-8\" style={{ height: \"1rem\" }}>\r\n        {currentHours - +values.hours < 0 || currentHours === 0\r\n          ? \"Brak dostępnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormDayButton;\r\n","import { useUsersQuery } from \"../../services/apiSliceUsers\";\r\nimport { ModelUser } from \"../formUser/ModelUser\";\r\nimport {\r\n  dateInNext14Days,\r\n  dateInNext60Days,\r\n} from \"../../data/dataCurrentDates\";\r\n\r\nconst useDataFormDay = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers ? dataUsers : [];\r\n\r\n  const names = users?.map(({ userName }: ModelUser) => {\r\n    return userName;\r\n  });\r\n\r\n  const dataInputsSelect = [\r\n    {\r\n      name: \"userName\",\r\n      firstOption: `${names.length === 0 ? \"Brak danych\" : \"Imię\"}`,\r\n      label: \"Podaj imię\",\r\n      options: names,\r\n    },\r\n    {\r\n      name: \"hours\",\r\n      firstOption: \"Godziny\",\r\n      label: \"Podaj liczbę godzin\",\r\n      options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    },\r\n\r\n    {\r\n      name: \"place\",\r\n      firstOption: \"Lokalizacja\",\r\n      label: \"Podaj lokalizację\",\r\n      options: [\"Wewnątrz\", \"Poza\"],\r\n    },\r\n  ];\r\n  const dataInputsText = [\r\n    {\r\n      value: \"date\",\r\n      label: \"Podaj dzień\",\r\n      type: \"date\",\r\n      isErrorPrint: true,\r\n      min: dateInNext14Days,\r\n      max: dateInNext60Days,\r\n    },\r\n  ];\r\n  return { dataInputsSelect, dataInputsText };\r\n};\r\nexport default useDataFormDay;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  hours: yup\r\n    .string()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useSelector } from \"react-redux\";\r\nimport { dateInNext14Days } from \"../../data/dataCurrentDates\";\r\nimport { validationSchema } from \"./validationFormDay\";\r\nimport * as yup from \"yup\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { ModelUser } from \"../formUser/ModelUser\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport { useAddDayMutation } from \"../../services/apiSliceMonths\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\nconst useFormikDay = () => {\r\n  const [addDay, success] = useAddDayMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n  const firstColumn = month && month?.columns?.[0];\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    date: dateInNext14Days,\r\n    hours: \"\",\r\n    userName: \"Imię\",\r\n    place: \"\",\r\n    userColor: \"\",\r\n  };\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: any) => {\r\n    if (\r\n      month?.calc?.currentHours - +values.hours < 0 ||\r\n      month?.calc?.currentHours === 0\r\n    )\r\n      return;\r\n\r\n    const userColor = users?.find((user: ModelUser) => {\r\n      return user.userName === values.userName;\r\n    })?.userColor;\r\n\r\n    const valuesToDatabase = {\r\n      ...values,\r\n      id: UUID(),\r\n      hours: +values.hours,\r\n      userColor: userColor || \"\",\r\n    };\r\n\r\n    await addDay({\r\n      year: yearFromURL,\r\n      month: monthFromURL,\r\n      firstColumnBody: {\r\n        ...firstColumn,\r\n        days: firstColumn?.days\r\n          ? [...firstColumn.days, valuesToDatabase]\r\n          : [valuesToDatabase],\r\n      },\r\n    });\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikDay;\r\n","import { Form, Formik } from \"formik\";\r\nimport InputsSelect from \"../inputs/InputsSelect\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport FormDayButton from \"./FormDayButton\";\r\nimport useDataFormDay from \"./useDataFormDay\";\r\nimport useFormikDay from \"./useFormikDay\";\r\nimport \"./_formDay.scss\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst FormDayContext = () => {\r\n  const { dataInputsText, dataInputsSelect } = useDataFormDay();\r\n  const { initialValues, validation, onSubmit, success } = useFormikDay();\r\n  const { month } = useSelector((state: RootState) => state.monthsPanel);\r\n  const allHours = month?.calc?.allHours;\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className={`${allHours === 0 ? \"formContainerBlur\" : \"\"} mt-2`}>\r\n        <InputsSelect inputsData={dataInputsSelect} />\r\n        <InputsText inputsData={dataInputsText} />\r\n        <FormDayButton success={success} />\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormDayContext;\r\n","export interface ModelDay {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n  date: string;\r\n  hours: number;\r\n  place: string;\r\n}\r\n\r\nexport interface ModelColumn {\r\n  id: string;\r\n  days: ModelDay[];\r\n}\r\n\r\nexport interface ModelCalc {\r\n  allHours: number;\r\n  currentHours: number;\r\n  submittedHours: number;\r\n  acceptedHours: number;\r\n  rejectedHours: number;\r\n}\r\n\r\nexport interface ModelMonthPattern {\r\n  id: string;\r\n  columns: ModelColumn[];\r\n  calc: ModelCalc;\r\n}\r\n\r\nexport interface ModelMonthsPatern {\r\n  [key: string]: {\r\n    [key: string]: ModelMonthPattern\r\n  };\r\n}\r\n\r\nconst columns: ModelColumn[] = [\r\n  { id: \"submitted\", days: [] },\r\n  { id: \"accepted\", days: [] },\r\n  { id: \"rejected\", days: [] },\r\n];\r\n\r\nconst calc: ModelCalc = {\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submittedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n};\r\n\r\nexport const monthPattern: ModelMonthPattern = {\r\n  id: \"\",\r\n  columns,\r\n  calc,\r\n};\r\n","import * as yup from \"yup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../redux/store\";\r\n\r\nconst useValidationMonthForm = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const validationSchema = yup.object({\r\n    monthDate: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Miesiąc zapisany\",\r\n        value => value !== undefined && !infoMonths?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationMonthForm;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateMonthInfoMutation,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSliceMonths\";\r\nimport { alert } from \"../../utils/alertHelpers\";\r\nimport {\r\n  ModelMonthPattern,\r\n  monthPattern,\r\n} from \"../someData/dataSidebarMonthForm\";\r\nimport useValidationMonthForm from \"./useValidationMonthForm\";\r\nimport * as yup from \"yup\";\r\n\r\ninterface ModelFormValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useFormikMonth = () => {\r\n  const navigate = useNavigate();\r\n  const [updateMonth, success] = useUpdateMonthMutation();\r\n  const [updateMonthInfo] = useUpdateMonthInfoMutation();\r\n  const [deleteMonth] = useDeleteMonthMutation();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n  const { validationSchema } = useValidationMonthForm();\r\n  const [isSuccess, setIsSuccess] = useState(false);\r\n  const [formValues, setFormValues] = useState({});\r\n\r\n  const initialValues = { monthDate: `${currYearDigits}-${currMonthDigits}` };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n\r\n  const onSubmit = async (values: any) => {\r\n    const year = values.monthDate.slice(0, 4);\r\n    const month = values.monthDate.slice(-2);\r\n    const monthBody: ModelMonthPattern = {\r\n      ...monthPattern,\r\n      id: values.monthDate,\r\n    };\r\n\r\n    await updateMonth({ year, month, monthBody });\r\n    setFormValues(values);\r\n  };\r\n\r\n  const executeAddMonthInfo = async (values: any) => {\r\n    if (isSuccess) {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      const months = infoMonths ? infoMonths : [];\r\n      await updateMonthInfo([...months, `${year}-${month}`]);\r\n      navigate(`/${values.monthDate}`);\r\n    } else if (success.isError) {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      await deleteMonth({ year, month });\r\n      alert(\"\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (success.isSuccess) {\r\n      setIsSuccess(true);\r\n    } else setIsSuccess(false);\r\n  }, [success.isSuccess]);\r\n\r\n  useEffect(() => {\r\n    executeAddMonthInfo(formValues);\r\n  }, [isSuccess, updateMonthInfo]);\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikMonth;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { currMonthDigits, currYearDigits } from \"../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikMonth from \"./useFormikMonth\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport InputsText from \"../inputs/InputsText\";\r\n\r\nconst FormMonthContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikMonth();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-info\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"monthDate\",\r\n      type: \"month\",\r\n      label:\"Podaj miesiąc\",\r\n      isErrorPrint: true,\r\n      min: `${currYearDigits}-${currMonthDigits}`,\r\n      max: \"2025-12\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormMonthContext;\r\n","import { useUsersQuery } from \"../../services/apiSliceUsers\";\r\n// import { ModelUser } from './useSettingsUserFormik';\r\nimport * as yup from \"yup\";\r\n\r\nexport interface ModelUser {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n}\r\n\r\nconst useValidationFormUser = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n  const validationSchema = yup.object({\r\n    userName: yup\r\n      .string()\r\n      .min(3, \"Min. 3 litery\")\r\n      .max(10, \"Max. 10 liter\")\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Imię zajęte\",\r\n        value => value !== undefined && !usersNames?.includes(value)\r\n      )\r\n      .required(\"Imię wymagane\"),\r\n    userColor: yup\r\n      .string()\r\n      .test(\r\n        \"is-in-database\",\r\n        \"Kolor zajęty\",\r\n        value => value !== undefined && !UsersColors?.includes(value)\r\n      ),\r\n  });\r\n\r\n  return { validationSchema };\r\n};\r\n\r\nexport default useValidationFormUser;\r\n","import React from \"react\";\r\nimport {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../services/apiSliceUsers\";\r\nimport useValidationUserForm from \"./useValidationFormUser\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport * as yup from \"yup\";\r\n\r\nconst useFormikUser = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { validationSchema } = useValidationUserForm();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers || [];\r\n\r\n  const initialValues = {\r\n    id: \"\",\r\n    userName: \"\",\r\n    userColor: \"#e0cce1\",\r\n  };\r\n\r\n  const validation = validationSchema as yup.ObjectSchema<typeof initialValues>;\r\n  const onSubmit = async (values: any, { resetForm }: any) => {\r\n    const updatedValues = {\r\n      ...values,\r\n      userName:\r\n        values.userName.slice(0, 1).toUpperCase() + values.userName.slice(1),\r\n      id: UUID(),\r\n    };\r\n\r\n    if (dataUsers) {\r\n      await addUser([...users, updatedValues]);\r\n    } else {\r\n      await addUser([updatedValues]);\r\n    }\r\n    resetForm();\r\n  };\r\n\r\n  return { initialValues, validation, onSubmit, success };\r\n};\r\n\r\nexport default useFormikUser;\r\n","import { Form, Formik } from \"formik\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputsText from \"../inputs/InputsText\";\r\nimport useHTTPState from \"../../hooks/useHTTPState\";\r\nimport useFormikUser from \"./useFormikUser\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst FormUserContext = () => {\r\n  const { initialValues, validation, onSubmit, success } = useFormikUser();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-info\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  const dataInputs = [\r\n    {\r\n      value: \"userName\",\r\n      type: \"text\",\r\n      label: \"Podaj imię\",\r\n      isErrorPrint: true,\r\n      placeholder: \"Imię\",\r\n    },\r\n    {\r\n      value: \"userColor\",\r\n      type: \"color\",\r\n      label: \"Podaj kolor\",\r\n      isErrorPrint: true,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validation}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form className=\"py-2\">\r\n        <InputsText inputsData={dataInputs} />\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          disabled={success.isLoading}\r\n          className=\"col-2 d-flex justify-content-center align-items-center justify-content-center p-0 m-0 ms-auto  text-info-emphasis border-0 bg-transparent\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default FormUserContext;\r\n","import { ReactNode, useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n  title: string;\r\n};\r\n\r\nconst CollapseContainer = (props: Props) => {\r\n  const [isOpen, setOpen] = useState(false);\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline-info\"\r\n        onClick={() => setOpen(prev => !prev)}\r\n        aria-expanded={isOpen}\r\n        aria-controls=\"example-collapse-text\"\r\n        size=\"sm\"\r\n        className={`fw-medium w-100 d-flex justify-content-between align-items-center text-capitalize bg-info text-white ${\r\n          isOpen ? \"rounded-bottom-0\" : \"rounded-bottom-1\"\r\n        }`}\r\n        style={{\r\n          transition: \"border-radius 420ms\",\r\n        }}\r\n      >\r\n        {props.title}\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3\"\r\n          style={{\r\n            transform: `${isOpen ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={isOpen}>\r\n        <div className=\"border border-info rounded-bottom px-1\">\r\n          {props.children}\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CollapseContainer;\r\n","import Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport useMonthURLToString from \"../../hooks/useMonthURLToString\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport FormHoursContext from \"../formHours/FormHoursContext\";\r\nimport CollapseMonthsList from \"../CollapseMonthsList\";\r\nimport FormDayContext from \"../formDay/FormDayContext\";\r\nimport FormMonthContext from \"../formMonth/FormMonthContext\";\r\nimport FormUserContext from \"../formUser/FormUserContext\";\r\nimport CollapseContainer from \"../CollapseContainer\";\r\n\r\nconst SidebarBody = () => {\r\n  const { isMonthInURL } = useURLValues();\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  return (\r\n    <Offcanvas.Body className=\"scrolHidden flex-grow-0 p-0 border border-4 border-white bg-white rounded\">\r\n      {isMonthInURL && (\r\n        <CollapseContainer title={monthURLStringFormat}>\r\n          <CollapseMonthsList />\r\n        </CollapseContainer>\r\n      )}\r\n      {isMonthInURL && (\r\n        <div className=\"mt-1\">\r\n          <CollapseContainer title={\"Zapisz godziny\"}>\r\n            <FormHoursContext />\r\n          </CollapseContainer>\r\n        </div>\r\n      )}\r\n      {/* {isMonthInURL && <MonthHoursSummary />} */}\r\n      {isMonthInURL && <FormDayContext />}\r\n\r\n      {!isMonthInURL && (\r\n        <CollapseContainer title={\"Zapisz miesiąc\"}>\r\n          <FormMonthContext />\r\n        </CollapseContainer>\r\n      )}\r\n      {!isMonthInURL && (\r\n        <div className=\"mt-1\">\r\n          <CollapseContainer title={\"Zapisz użytkownika\"}>\r\n            <FormUserContext />\r\n          </CollapseContainer>\r\n        </div>\r\n      )}\r\n    </Offcanvas.Body>\r\n  );\r\n};\r\n\r\nexport default SidebarBody;\r\n","import Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport useWindowWidth from \"../../hooks/useWindowWidth\";\r\n\r\nconst SidebarHeader = () => {\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  return (\r\n    <>\r\n      {windowWidth < 500 && (\r\n        <Offcanvas.Header\r\n          closeButton={true}\r\n          style={{ width: \"fit-content\", marginLeft: \"auto\" }}\r\n        ></Offcanvas.Header>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarHeader;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport useWindowWidth from \"../../hooks/useWindowWidth\";\r\n\r\ntype Props = {\r\n  toggleShow: ()=>void;\r\n};\r\n\r\nconst SidebarMenuButton = (props: Props) => {\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  return (\r\n    <Button\r\n      variant=\"info\"\r\n      onClick={props.toggleShow}\r\n      className={`rounded-0 p-0 fw-medium w-100 ${\r\n        windowWidth >= 500 ? \"d-none\" : \"d-block\"\r\n      }`}\r\n      style={{\r\n        position: \"fixed\",\r\n        height: \"2.5rem\",\r\n        bottom: 0,\r\n      }}\r\n    >\r\n      Menu\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarMenuButton;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport { alert } from \"../../utils/alertHelpers\";\r\nimport { RiLogoutBoxLine } from \"react-icons/ri\";\r\n\r\nconst SidebarLogout = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const logout = () => {\r\n    setIsLoading(true);\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch(error => alert(error))\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  let btnContent = (\r\n    <div className=\"d-flex align-center  d-flex align-items-center text-start w-100\">\r\n      <RiLogoutBoxLine className=\"fs-6 me-1 \" />\r\n      Wyloguj\r\n    </div>\r\n  );\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner\r\n        animation=\"border\"\r\n        size=\"sm\"\r\n        variant=\"secondary\"\r\n        className=\"mx-auto\"\r\n      >\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={logout}\r\n      className=\"fs-6 fw-medium text-info p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n      disabled={isLoading}\r\n    >\r\n      {btnContent}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarLogout;\r\n","import { createBrowserHistory } from \"history\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { ImArrowLeft } from \"react-icons/im\";\r\n\r\nconst SettingsReturnButton = () => {\r\n  const history = createBrowserHistory();\r\n  const handleGoBack = () => {\r\n    history.back();\r\n  };\r\n  return (\r\n    <Button\r\n      onClick={handleGoBack}\r\n      className=\"fs-6 fw-medium text-info p-0 bg-transparent border-0 w-100\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n      }}\r\n    >\r\n      <div className=\"d-flex align-center  d-flex align-items-center text-start w-100\">\r\n        <ImArrowLeft className=\"fs-6 me-1 \" /> Wróć\r\n      </div>\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SettingsReturnButton;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { AiTwotoneSetting } from \"react-icons/ai\";\r\nimport { Link } from \"react-router-dom\";\r\nimport SidebarLogout from \"./SidebarLogout\";\r\nimport SettingsReturnButton from \"../../pages/settings/SettingsReturnButton\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\n\r\nconst SidebarNav = () => {\r\n  const { isMonthInURL } = useURLValues();\r\n  const styles = \"bg-transparent border-0 p-0 ps-2\";\r\n\r\n  return (\r\n    <nav className=\"mt-auto mb-2 fw-medium\">\r\n      <ListGroup>\r\n        {!isMonthInURL && (\r\n          <ListGroup.Item className={styles}>\r\n            <SettingsReturnButton />\r\n          </ListGroup.Item>\r\n        )}\r\n        <ListGroup.Item className={styles}>\r\n          <Link to=\"/ustawienia\" className=\"text-info text-decoration-none\">\r\n            <AiTwotoneSetting /> Ustawienia\r\n          </Link>\r\n        </ListGroup.Item>\r\n        <ListGroup.Item className={styles}>\r\n          <SidebarLogout />\r\n        </ListGroup.Item>\r\n      </ListGroup>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default SidebarNav;\r\n","import { useDispatch } from \"react-redux\";\r\nimport useURLValues from \"../../hooks/useURLValues\";\r\nimport {\r\n  useMonthDataQuery,\r\n  useMonthsInfoQuery,\r\n} from \"../../services/apiSliceMonths\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  getMonth,\r\n  getMonthError,\r\n  getMonthIsLoading,\r\n} from \"../../redux/storeFeatures/monthsPanelSlice\";\r\nimport { useUsersQuery } from \"../../services/apiSliceUsers\";\r\nimport {\r\n  getUsers,\r\n  getUsersError,\r\n  getUsersIsLoading,\r\n} from \"../../redux/storeFeatures/usersSlice\";\r\nimport {\r\n  getInfoMonths,\r\n  getInfoMonthError,\r\n  getInfoMonthIsLoading,\r\n} from \"../../redux/storeFeatures/infoMonthsSlice\";\r\n\r\nconst useReduxDatabase = () => {\r\n  const dispatch = useDispatch();\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data, error, isLoading } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n  const {\r\n    data: dataUsers,\r\n    error: errorUsers,\r\n    isLoading: isLoadingUsers,\r\n  } = useUsersQuery();\r\n  const {\r\n    data: dataInfoMonths,\r\n    error: errorInfoMonths,\r\n    isLoading: isLoadingInfoMonths,\r\n  } = useMonthsInfoQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(getMonth(data));\r\n    dispatch(getMonthError(error));\r\n    dispatch(getMonthIsLoading(isLoading));\r\n  }, [data, error, isLoading, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getUsers(dataUsers));\r\n    dispatch(getUsersError(errorUsers));\r\n    dispatch(getUsersIsLoading(isLoadingUsers));\r\n  }, [dataUsers, errorUsers, isLoadingUsers, dispatch]);\r\n\r\n  useEffect(() => {\r\n    dispatch(getInfoMonths(dataInfoMonths));\r\n    dispatch(getInfoMonthError(errorInfoMonths));\r\n    dispatch(getInfoMonthIsLoading(isLoadingInfoMonths));\r\n  }, [dataInfoMonths, errorInfoMonths, isLoadingInfoMonths, dispatch]);\r\n\r\n  return {};\r\n};\r\n\r\nexport default useReduxDatabase;\r\n","import \"firebase/database\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport useWindowWidth from \"../../hooks/useWindowWidth\";\r\nimport \"./../../scss/utilityClasses/_bgImage.scss\";\r\nimport SidebarBody from \"./SidebarBody\";\r\nimport SidebarHeader from \"./SidebarHeader\";\r\nimport SidebarMenuButton from \"./SidebarMenuButton\";\r\nimport SidebarNav from \"./SidebarNav\";\r\nimport useReduxDatabase from \"./useReduxDatabase\";\r\n\r\nconst IndexSidebar = () => {\r\n  useReduxDatabase();\r\n  const { pathname } = useLocation();\r\n  const [isShow, setShow] = useState(false);\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(s => !s);\r\n\r\n  useEffect(() => {\r\n    windowWidth >= 500 && setShow(true);\r\n  }, [windowWidth]);\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(pathname) && (\r\n      <>\r\n          <Offcanvas\r\n            show={isShow}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className={`${windowWidth <= 500 && \"backgroundImage\"}`}\r\n            style={{\r\n              width: windowWidth >= 500 ? \"30%\" : \"100vw\",\r\n              maxWidth: windowWidth >= 500 && \"250px\",\r\n              backgroundColor: \"rgba(255, 255, 255, 0)\",\r\n            }}\r\n          >\r\n            <div\r\n              className=\"p-1 d-flex flex-column\"\r\n              style={{\r\n                height: \"100%\",\r\n                backgroundColor: \"rgba(255, 255, 255, 0.5)\",\r\n              }}\r\n            >\r\n              <SidebarHeader />\r\n              <SidebarBody />\r\n              <SidebarNav />\r\n            </div>\r\n          </Offcanvas>\r\n          <SidebarMenuButton toggleShow={toggleShow} />\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext14Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext60Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext14Days = formatDate(futureDateInNext14Days);\r\nexport const dateInNext60Days = formatDate(futureDateInNext60Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getDatabase, ref, get } from \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nexport const app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\nexport const database = getDatabase(app);\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const sortedInfoMonths = infoMonths && [...infoMonths]?.sort(\r\n    (a: string, b: string) => {\r\n      const dateA = new Date(a).getTime();\r\n      const dateB = new Date(b).getTime();\r\n\r\n      return dateA - dateB;\r\n    }\r\n  );\r\n\r\n \r\n\r\n  const databaseMonthsDatesToString = sortedInfoMonths?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { sortedInfoMonths, databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(1);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return {monthURLStringFormat};\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return {monthURLStringFormat};\r\n  }\r\n\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n"],"names":["props","_jsx","className","style","height","children","touched","value","errors","_useFormikContext","useFormikContext","values","handleBlur","setFieldValue","_Fragment","inputsData","map","_ref","label","type","isErrorPrint","min","max","placeholder","_jsxs","Form","Group","Label","htmlFor","Control","id","name","onChange","e","target","onBlur","size","minHeight","cursor","FormErrors","month","useSelector","state","monthsPanel","gradientValue","calc","submittedHours","acceptedHours","allHours","gradientBackground","concat","inputsValues","Range","background","styles","InputsText","_month$calc","_month$calc2","_useURLValues","useURLValues","yearFromURL","monthFromURL","_useAddAllHoursMutati","useAddAllHoursMutation","_useAddAllHoursMutati2","_slicedToArray","addAllHours","success","onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","year","stop","_x","apply","arguments","initialValues","_useFormikHours","useFormikHours","btnContent","useHTTPState","AiOutlinePlusCircle","fontSize","Formik","FormHoursTop","InputsRange","FormHoursError","Button","disabled","isLoading","_useMonthDates","useMonthDates","sortedInfoMonths","databaseMonthsDatesToString","infoMonths","monthURL","monthURLToDateFormat","isMonthInURL","Date","curMonthURLStringFormat","Intl","DateTimeFormat","timeZone","format","ListGroup","Item","idx","Link","to","firstOption","options","Select","option","currentHours","hours","dataUsers","useUsersQuery","data","users","names","userName","dataInputsSelect","length","dataInputsText","dateInNext14Days","dateInNext60Days","validationSchema","yup","test","required","place","_month$columns","_useAddDayMutation","useAddDayMutation","_useAddDayMutation2","addDay","firstColumn","columns","date","userColor","validation","_users$find","valuesToDatabase","find","user","_objectSpread","UUID","firstColumnBody","days","_toConsumableArray","_useDataFormDay","useDataFormDay","_useFormikDay","useFormikDay","InputsSelect","FormDayButton","monthPattern","rejectedHours","monthDate","undefined","includes","navigate","useNavigate","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","updateMonth","_useUpdateMonthInfoMu","useUpdateMonthInfoMutation","updateMonthInfo","_useDeleteMonthMutati","useDeleteMonthMutation","deleteMonth","useValidationMonthForm","_useState","useState","_useState2","isSuccess","setIsSuccess","_useState3","_useState4","formValues","setFormValues","currYearDigits","currMonthDigits","monthBody","slice","executeAddMonthInfo","_ref2","_callee2","months","_year","_month","_context2","isError","alert","_x2","useEffect","_useFormikMonth","useFormikMonth","dataInputs","usersNames","UsersColors","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","useValidationUserForm","resetForm","updatedValues","toUpperCase","_useFormikUser","useFormikUser","isOpen","setOpen","variant","onClick","transition","title","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","monthURLStringFormat","useMonthURLToString","Offcanvas","Body","CollapseContainer","CollapseMonthsList","FormHoursContext","FormDayContext","FormMonthContext","FormUserContext","windowWidth","useWindowWidth","Header","closeButton","width","marginLeft","toggleShow","position","bottom","setIsLoading","RiLogoutBoxLine","Spinner","animation","auth","signOut","then","catch","error","finally","history","createBrowserHistory","back","ImArrowLeft","SettingsReturnButton","AiTwotoneSetting","SidebarLogout","dispatch","useDispatch","_useMonthDataQuery","useMonthDataQuery","_useUsersQuery","errorUsers","isLoadingUsers","_useMonthsInfoQuery","useMonthsInfoQuery","dataInfoMonths","errorInfoMonths","isLoadingInfoMonths","getMonth","getMonthError","getMonthIsLoading","getUsers","getUsersError","getUsersIsLoading","getInfoMonths","getInfoMonthError","getInfoMonthIsLoading","useReduxDatabase","pathname","useLocation","isShow","setShow","show","onHide","scroll","backdrop","maxWidth","backgroundColor","SidebarHeader","SidebarBody","SidebarNav","SidebarMenuButton","s","today","formatDate","getFullYear","String","padStart","day","getDate","futureDateInNext14Days","getTime","futureDateInNext60Days","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","getDatabase","btnText","errMsg","status","Swal","text","confirmButtonColor","sort","a","b","monthToDateFormat","_Intl$DateTimeFormat","split","window","innerWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","alertHelper","message","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText"],"sourceRoot":""}
{"version":3,"file":"static/js/263.3a9f1438.chunk.js","mappings":"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","sources":["components/IndexContainer.tsx","hooks/useHTTPState.tsx","hooks/useMonthURLToString.tsx","hooks/useURLValues.tsx","hooks/useWindowWidth.tsx","components/HoursSummary.tsx","pages/monthPanel/MonthPanelDayPrintData.tsx","pages/monthPanel/monthPanelDay/utilsMonthPanelDay.tsx","pages/monthPanel/monthPanelDay/MonthPanelDay.tsx","pages/monthPanel/MonthPanelColumn.tsx","pages/monthPanel/monthPanelColumnsHeader.tsx/MonthPanelColumnsHeader.tsx","pages/monthPanel/monthPanelColmns/useScrollThumbPosition.tsx","utils/getHoursFromColumns.tsx","pages/monthPanel/monthPanelColmns/MonthPanelColumns.tsx","pages/monthPanel/monthPanelColmns/utilsMonthPanelColumns.tsx","pages/monthPanel/indexMonthPanel/MonthPanelContent.tsx","pages/monthPanel/indexMonthPanel/useRequestMonthPanel.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx","utils/alertHelpers.tsx","utils/printPanelContent.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\r\nimport useWindowWidth from \"../hooks/useWindowWidth\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst IndexContainer = (props: Props) => {\r\n  const { windowWidth } = useWindowWidth();\r\n  return (\r\n    <main\r\n      className=\"d-flex backgroundImage m-0 opacityAnimation\"\r\n      style={{ height: \"100dvh\", overflow: \"hidden\" }}\r\n    >\r\n      <aside\r\n        style={{\r\n          width: windowWidth >= 500 ? \"30%\" : 0,\r\n          maxWidth: \"250px\",\r\n          height: \"100%\",\r\n        }}\r\n      ></aside>\r\n      <div\r\n        className=\"d-flex ps-1 flex-fill\"\r\n        style={{\r\n          width: windowWidth >= 500 ? \"70%\" : \"100%\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexContainer;\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\nimport { ModelSuccess } from \"../sharedModels/modelSucces\";\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n  \r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.slice(1);\r\n\r\n  const isMonthInURL = monthURL && /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  if (isMonthInURL) {\r\n    const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n    const monthURLStringFormat =\r\n      monthURLToDateFormat &&\r\n      new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      })?.format(monthURLToDateFormat);\r\n    return {monthURLStringFormat};\r\n  } else {\r\n    const monthURLStringFormat = \"\";\r\n    return {monthURLStringFormat};\r\n  }\r\n\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL, isMonthInURL };\r\n};\r\n\r\nexport default useURLValues;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst HoursSummary = () => {\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  return (\r\n    <div className=\"d-flex gap-2 mx-auto fw-medium pb-2 w-fit-content\">\r\n      <div>Wszystkie {month?.calcHours?.allHours} - </div>\r\n\r\n      <div\r\n        className={`${\r\n          month && month?.calcHours?.currentHours <= 0 ? \"text-danger\" : \"\"\r\n        }`}\r\n      >\r\n        {month && month?.calcHours?.currentHours} {\"\"}\r\n        {month && month?.calcHours?.currentHours < 0 ? \"Brak\" : \"Dostępne\"}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HoursSummary;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n}\r\n\r\nconst MonthPanelDayPrintData = (props: Props) => {\r\n  let dateToPrint;\r\n\r\n  if (!props?.day?.date) {\r\n    return <div>Brak danych</div>;\r\n  } else {\r\n    const date = new Date(props.day.date);\r\n    dateToPrint = new Intl.DateTimeFormat(\"pl-PL\", {\r\n      day: \"numeric\",\r\n      month: \"short\",\r\n    }).format(date);\r\n\r\n    return (\r\n      <>\r\n        <div className=\"d-flex justify-content-between fs-7 \">\r\n          <div>{props.day?.userName}</div>\r\n\r\n          <div>\r\n            {props.day?.place === \"Poza\" ? (\r\n              <TbArrowBigRightLineFilled style={{ color: \"rgb(80,173,150)\" }} />\r\n            ) : (\r\n              <MdFactory style={{ color: \"rgb(255, 181, 9)\" }} />\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"d-flex fw-medium justify-content-between\">\r\n          <div>{dateToPrint ? dateToPrint : \"\"}</div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n};\r\n\r\nexport default MonthPanelDayPrintData;\r\n","import { ModelMonth } from \"../../../sharedModels/modelMonth\";\r\nimport { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\n\r\nexport const deleteDayById = (obj: ModelMonth, idToDelete: string) => {\r\n  const updatedColumns = obj.columns.map((column: ModelColumn) => {\r\n    const updatedDays = column?.days?.filter(day => day.id !== idToDelete);\r\n    return { ...column, days: updatedDays };\r\n  });\r\n  return { ...obj, columns: updatedColumns };\r\n};\r\n\r\nexport const calculateUpdatedCalcHours = (\r\n  month: ModelMonth | null,\r\n  columnIdx: number,\r\n  subtractedHours: number | undefined\r\n) => {\r\n  if (!month || !month.calcHours) {\r\n     return {\r\n       currentHours: 0,\r\n       submittedHours: 0,\r\n       acceptedHours: 0,\r\n       rejectedHours: 0,\r\n       allHours: 0,\r\n     };\r\n  }\r\n\r\n  const { calcHours } = month;\r\n\r\n  return {\r\n    ...calcHours,\r\n    currentHours:\r\n      columnIdx !== 2 && subtractedHours\r\n        ? calcHours.currentHours + subtractedHours\r\n        : calcHours.currentHours,\r\n    submittedHours:\r\n      columnIdx === 0 && subtractedHours\r\n        ? calcHours.submittedHours - subtractedHours\r\n        : calcHours.submittedHours,\r\n    acceptedHours:\r\n      columnIdx === 1 && subtractedHours\r\n        ? calcHours.acceptedHours - subtractedHours\r\n        : calcHours.acceptedHours,\r\n    rejectedHours:\r\n      columnIdx === 2 && subtractedHours\r\n        ? calcHours.rejectedHours - subtractedHours\r\n        : calcHours.rejectedHours,\r\n  };\r\n};","import { Draggable } from \"react-beautiful-dnd\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useDeleteDayMutation } from \"../../../services/apiSliceMonths\";\r\nimport { ModelDay } from \"../../../sharedModels/modelDay\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\nimport MonthPanelDayPrintData from \"../MonthPanelDayPrintData\";\r\nimport { calculateUpdatedCalcHours, deleteDayById } from \"./utilsMonthPanelDay\";\r\n\r\n\r\ninterface Props {\r\n  day: ModelDay;\r\n  columnIdx: number;\r\n  dayIdx: number;\r\n}\r\n\r\nconst MonthPanelDay = (props: Props) => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const [deleteDay, success] = useDeleteDayMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger\" />\r\n  );\r\n\r\n  const handleDelete = async (idx: number, id: string) => {\r\n    Swal.fire(alertHelper(\"Usunąć dzień\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n\r\n        const subtractedHours = {\r\n          ...month?.columns[props.columnIdx].days.find(day => {\r\n            return day?.id === props.day.id;\r\n          }),\r\n        }?.hours;\r\n\r\n        month && \r\n          (await deleteDay({\r\n            year: yearFromURL,\r\n            month: monthFromURL,\r\n            colIdx: props.columnIdx,\r\n            monthBody: {\r\n              ...month,\r\n              calcHours: calculateUpdatedCalcHours(\r\n                month,\r\n                idx,\r\n                subtractedHours\r\n              ),\r\n\r\n              columns: deleteDayById({ ...month }, id).columns,\r\n            },\r\n          }));\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id}\r\n      index={props.dayIdx}\r\n      isDragDisabled={false}\r\n    >\r\n      {(provided, snapshot) => {\r\n        return (\r\n          <div\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n            className={`mb-2 bg-white rounded border ${\r\n              snapshot.isDragging ? \"border-dark\" : \"border-dark-subtle\"\r\n            } `}\r\n          >\r\n            <div\r\n              className=\"px-1 py-2 py-sm-1 rounded\"\r\n              style={{\r\n                borderTop: `8px solid ${props.day?.userColor}`,\r\n                opacity: snapshot.isDragging ? 0.8 : 1,\r\n              }}\r\n            >\r\n              <MonthPanelDayPrintData day={props.day} />\r\n\r\n              <Button\r\n                onClick={() => handleDelete(props.columnIdx, props.day.id)}\r\n                className=\"d-flex justify-content-between  align-items-center w-100 p-0 bg-transparent border-0 fw-medium text-dark\"\r\n                disabled={success.isLoading}\r\n              >\r\n                <div>{props.day?.hours} h</div>\r\n                <div>{btnContent}</div>\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default MonthPanelDay;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport MonthPanelDay from \"./monthPanelDay/MonthPanelDay\";\r\nimport { v4 as UUID } from \"uuid\";\r\nimport { ModelColumn } from \"../../sharedModels/modelColumn\";\r\nimport { ModelDay } from \"../../sharedModels/modelDay\";\r\n\r\n\r\ninterface Props {\r\n  column: ModelColumn;\r\n  columnIdx: number;\r\n}\r\n\r\nconst MonthPanelColumn = (props: Props) => {\r\n  return (\r\n    <Col>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 h-100 overflow-hidden border border-1 border border-top-0\"\r\n              style={{\r\n                backgroundColor: snapshot.isDraggingOver\r\n                  ? \"rgba(0, 0, 0, 0.1)\"\r\n                  : \"rgba(255, 255, 255, 0.2)\",\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {Array.isArray(props.column.days)\r\n                ? props.column.days.map((day: ModelDay, idx: number) => {\r\n                    return (\r\n                      <MonthPanelDay\r\n                        key={UUID()}\r\n                        day={day}\r\n                        columnIdx={props.columnIdx}\r\n                        dayIdx={idx}\r\n                      />\r\n                    );\r\n                  })\r\n                : []}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumn;\r\n","import Col from \"react-bootstrap/Col\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { v4 as UUID } from \"uuid\";\r\n\r\ninterface Props {\r\n  thumbPosition: number;\r\n}\r\n\r\nconst MonthPanelColumnsHeader = (props: Props) => {\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: month?.calcHours?.submittedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: month?.calcHours?.acceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: month?.calcHours?.rejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <Col\r\n            key={headerText}\r\n            className={`text-dark-emphasis bg-white fw-medium p-1 ${\r\n              props.thumbPosition === 0\r\n                ? \"border-bottom border-3 border-white\"\r\n                : \"border-bottom border-3\"\r\n            }`}\r\n            style={{\r\n              fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\",\r\n            }}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </Col>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumnsHeader;\r\n","import { useRef, useState } from \"react\";\r\n\r\nconst useScrollThumbPosition = () => {\r\n  const scrollableRef = useRef(null);\r\n  const [thumbPosition, setThumbPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const element = scrollableRef.current;\r\n\r\n    if (element) {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      const thumbPosition = (scrollTop / maxScrollTop) * 100;\r\n      setThumbPosition(thumbPosition);\r\n    }\r\n  };\r\n\r\n  return { scrollableRef, thumbPosition, handleScroll };\r\n};\r\n\r\nexport default useScrollThumbPosition;\r\n","import { ModelDay } from \"../sharedModels/modelDay\";\r\nimport { ModelColumn } from \"../sharedModels/modelColumn\";\r\n\r\nconst getHoursFromColumn = (days: ModelDay[]) => {\r\n  return days?.reduce((acu, day) => {\r\n    const dayHours = day?.hours || 0;\r\n    return acu + dayHours;\r\n  }, 0);\r\n};\r\n\r\nconst getHoursFromColumns = (columns: ModelColumn[]) => {\r\n  const submittedHours = getHoursFromColumn(columns[0]?.days);\r\n  const acceptedHours = getHoursFromColumn(columns[1]?.days);\r\n  const rejectedHours = getHoursFromColumn(columns[2]?.days);\r\n\r\n  return { submittedHours, acceptedHours, rejectedHours };\r\n};\r\n\r\nexport default getHoursFromColumns;\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSliceMonths\";\r\nimport MonthPanelColumn from \"../MonthPanelColumn\";\r\nimport MonthPanelColumnsHeader from \"../monthPanelColumnsHeader.tsx/MonthPanelColumnsHeader\";\r\nimport useScrollThumbPosition from \"./useScrollThumbPosition\";\r\nimport { addDaysToColumns, handleDragDrop } from \"./utilsMonthPanelColumns\";\r\nimport useWindowWidth from \"../../../hooks/useWindowWidth\";\r\nimport getHoursFromColumns from \"../../../utils/getHoursFromColumns\";\r\n\r\nconst MonthPanelColumns = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const [updateMonth] = useUpdateMonthMutation();\r\n  const { month } = useSelector((state: RootState) => state.monthPanel);\r\n  const columnsWithDays = month && addDaysToColumns(month?.columns);\r\n  const [columns, setColumns] = useState<ModelColumn[]>([]);\r\n  const [executeUpdateMonth, setExecuteUpdateMonth] = useState(false);\r\n  const { submittedHours, acceptedHours, rejectedHours } =\r\n    getHoursFromColumns(columns);\r\n  const { scrollableRef, thumbPosition, handleScroll } =\r\n    useScrollThumbPosition();\r\n  const { windowWidth } = useWindowWidth();\r\n\r\n  useEffect(() => {\r\n    if (columnsWithDays) {\r\n      setColumns(columnsWithDays);\r\n    }\r\n  }, [month?.columns]);\r\n\r\n  useEffect(() => {\r\n    if (columns.length > 0 && month) {\r\n      updateMonth({\r\n        year: yearFromURL,\r\n        month: monthFromURL,\r\n        monthBody: {\r\n          ...month,\r\n          columns: columns,\r\n          calcHours: {\r\n            ...month?.calcHours,\r\n            currentHours:\r\n              month?.calcHours?.allHours -\r\n              submittedHours -\r\n              acceptedHours -\r\n              rejectedHours +\r\n              rejectedHours,\r\n            submittedHours,\r\n            acceptedHours,\r\n            rejectedHours,\r\n          },\r\n        },\r\n      });\r\n    }\r\n  }, [executeUpdateMonth]);\r\n\r\n  const handleDragEnd = (results: DropResult) => {\r\n    month &&\r\n      handleDragDrop(\r\n        results,\r\n        month?.calcHours.currentHours,\r\n        columns,\r\n        setColumns\r\n      );\r\n    setExecuteUpdateMonth(prev => !prev);\r\n  };\r\n\r\n  const rowStyles = \"d-flex column-gap-1\";\r\n\r\n  return (\r\n    <div\r\n      ref={scrollableRef}\r\n      onScroll={handleScroll}\r\n      className=\"p-0 overflow-y-scroll h-100\"\r\n      style={{\r\n        maxHeight:\r\n          windowWidth >= 500\r\n            ? \"calc(100% - 32px)\"\r\n            : \"calc(100% - 32px - 2.5rem)\",\r\n      }}\r\n    >\r\n      <div className={`${rowStyles} sticky-top`}>\r\n        <MonthPanelColumnsHeader thumbPosition={thumbPosition} />\r\n      </div>\r\n\r\n      <div className={`${rowStyles}`} style={{ minHeight: \"calc(100% - 35px)\" }}>\r\n        <DragDropContext onDragEnd={handleDragEnd}>\r\n          {columns?.map((column: ModelColumn, idx: number) => {\r\n            return (\r\n              <MonthPanelColumn\r\n                key={column.id}\r\n                column={column}\r\n                columnIdx={idx}\r\n              />\r\n            );\r\n          })}\r\n        </DragDropContext>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthPanelColumns;\r\n","import { ModelColumn } from \"../../../sharedModels/modelColumn\";\r\n\r\nexport const addDaysToColumns = (columns: ModelColumn[]) => {\r\n  if (!Array.isArray(columns)) {\r\n    return [];\r\n  }\r\n  return columns?.map((column: ModelColumn) => {\r\n    if (!column?.hasOwnProperty(\"days\")) {\r\n      return { ...column, days: [] };\r\n    }\r\n    return column;\r\n  });\r\n};\r\n\r\nexport const handleDragDrop = (\r\n  results: any,\r\n  currentHours: number,\r\n  columns: ModelColumn[],\r\n  setColumns: React.Dispatch<React.SetStateAction<ModelColumn[]>>\r\n) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  const hoursInDay = columns[2]?.days[source.index]?.hours;\r\n  if (source.droppableId === \"rejected\" && currentHours < hoursInDay) return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns?.findIndex((column: ModelColumn) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns?.findIndex((column: ModelColumn) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = columns && [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: ModelColumn) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import HoursSummary from \"../../../components/HoursSummary\";\r\nimport MonthPanelColumns from \"../monthPanelColmns/MonthPanelColumns\";\r\n\r\nconst MonthPanelContent = () => {\r\n  return (\r\n    <div\r\n      className=\"py-1\"\r\n      style={{\r\n        maxWidth: \"1000px\",\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <HoursSummary />\r\n      <MonthPanelColumns />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthPanelContent;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { printPanelContent } from \"../../../utils/printPanelContent\";\r\nimport MonthPanelContent from \"./MonthPanelContent\";\r\n\r\nconst useRequestMonthPanel = () => {\r\n  const { month, error, isLoading } = useSelector(\r\n    (state: RootState) => state.monthPanel\r\n  );\r\n\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  let requestState;\r\n\r\n  if (isLoading) {\r\n    requestState = printPanelContent(\r\n      <Spinner animation=\"border\" variant=\"secondary\" className=\"fs-6\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      requestState = printPanelContent(\r\n        <div className=\"text-danger text-center \">\r\n          <> Błąd: {errMsg} </> <br />\r\n          <>Odśwież stronę</>\r\n        </div>\r\n      );\r\n    }\r\n  } else if (!month || month?.id === \"\") {\r\n    requestState = printPanelContent(\r\n      <div>\r\n        Brak danych z miesiąca {monthURLStringFormat}. Zapisz miesiąc w\r\n        ustawieniach.\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    requestState = (\r\n      <>\r\n        <MonthPanelContent />\r\n      </>\r\n    );\r\n  }\r\n  return { requestState };\r\n};\r\n\r\nexport default useRequestMonthPanel;\r\n","import useRequestMonthPanel from \"./useRequestMonthPanel\";\r\nimport IndexContainer from \"../../../components/IndexContainer\";\r\nimport useReduxMonthBody from \"../../../hooks/updateReduxDatabase/useReduxMonthData\";\r\nimport useReduxListMonths from \"../../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport useReduxListUsers from \"../../../hooks/updateReduxDatabase/useReduxListUsers\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  // useReduxMonthBody();\r\n  // useReduxListMonths();\r\n\r\n  const { requestState } = useRequestMonthPanel();\r\n\r\n  return <IndexContainer>{requestState}</IndexContainer>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n","export const printPanelContent = (contentJSX: React.ReactNode) => (\r\n  <div\r\n    className=\" d-flex justify-content-center align-items-center fs-3 text-warning text-center\"\r\n    style={{\r\n      maxWidth: \"1000px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    }}\r\n  >\r\n    {contentJSX}\r\n  </div>\r\n);"],"names":["props","windowWidth","useWindowWidth","_jsxs","className","style","height","overflow","children","_jsx","width","maxWidth","success","btnText","useEffect","isError","error","errMsg","status","Swal","text","concat","confirmButtonColor","btnContent","isLoading","Spinner","animation","size","variant","monthURL","useLocation","pathname","slice","test","_Intl$DateTimeFormat","monthURLToDateFormat","Date","monthURLStringFormat","Intl","DateTimeFormat","year","month","timeZone","format","split","yearFromURL","monthFromURL","isMonthInURL","_useState","useState","window","innerWidth","_useState2","_slicedToArray","setWindowWidth","handleResize","addEventListener","removeEventListener","_month$calcHours","_month$calcHours2","_month$calcHours3","_month$calcHours4","useSelector","state","monthPanel","calcHours","allHours","currentHours","_props$day","dateToPrint","day","date","_props$day2","_props$day3","_Fragment","userName","place","TbArrowBigRightLineFilled","color","MdFactory","deleteDayById","obj","idToDelete","updatedColumns","columns","map","column","_column$days","updatedDays","days","filter","id","_objectSpread","calculateUpdatedCalcHours","columnIdx","subtractedHours","submittedHours","acceptedHours","rejectedHours","_useURLValues","useURLValues","_useDeleteDayMutation","useDeleteDayMutation","_useDeleteDayMutation2","deleteDay","useHTTPState","RiDeleteBin6Line","handleDelete","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","idx","wrap","_context2","prev","next","alertHelper","then","_ref2","_callee","result","_month$columns$props$","_context","isConfirmed","find","hours","t0","colIdx","monthBody","stop","_x3","apply","arguments","_x","_x2","Draggable","draggableId","index","dayIdx","isDragDisabled","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","isDragging","borderTop","userColor","opacity","MonthPanelDayPrintData","Button","onClick","disabled","Col","Droppable","droppableId","droppableProps","backgroundColor","isDraggingOver","Array","isArray","MonthPanelDay","UUID","placeholder","headerText","counter","thumbPosition","fontSize","scrollableRef","useRef","setThumbPosition","handleScroll","element","current","scrollTop","scrollHeight","clientHeight","getHoursFromColumn","reduce","acu","_columns$","_columns$2","_columns$3","_useUpdateMonthMutati","useUpdateMonthMutation","updateMonth","columnsWithDays","hasOwnProperty","addDaysToColumns","setColumns","_useState3","_useState4","executeUpdateMonth","setExecuteUpdateMonth","_getHoursFromColumns","getHoursFromColumns","_useScrollThumbPositi","useScrollThumbPosition","length","rowStyles","onScroll","maxHeight","MonthPanelColumnsHeader","minHeight","DragDropContext","onDragEnd","results","_columns$$days$source","source","destination","hoursInDay","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","MonthPanelColumn","HoursSummary","MonthPanelColumns","requestState","_useSelector","useMonthURLToString","printPanelContent","MonthPanelContent","useRequestMonthPanel","IndexContainer","message","title","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","alert","contentJSX"],"sourceRoot":""}
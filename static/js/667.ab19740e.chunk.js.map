{"version":3,"file":"static/js/667.ab19740e.chunk.js","mappings":"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","sources":["hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useWindowWidth.tsx","pages/settings/settingsMonthsList/SettingsMonthsListItem.tsx","pages/settings/settingsMonthsList/SettingsMonthsList.tsx","pages/settings/settingsUserForm/dataSettingsUserForm.tsx","pages/settings/settingsUserForm/useValidationSettingsUserForm.tsx","pages/settings/settingsUserForm/useSettingsUserFormik.tsx","pages/settings/settingsUserForm/SettingsUserForm.tsx","pages/settings/settingsUsersList/SettingsUsersListItem.tsx","pages/settings/settingsUsersList/SettingsUsersList.tsx","pages/settings/indexSettings/useHTTPIndexSettings.tsx","pages/settings/indexSettings/IndexSettings.tsx","utils/alertHelpers.tsx"],"sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const sortedInfoMonths = infoMonths && [...infoMonths]?.sort(\r\n    (a: string, b: string) => {\r\n      const dateA = new Date(a).getTime();\r\n      const dateB = new Date(b).getTime();\r\n\r\n      return dateA - dateB;\r\n    }\r\n  );\r\n\r\n \r\n\r\n  const databaseMonthsDatesToString = sortedInfoMonths?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { sortedInfoMonths, databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import Swal from \"sweetalert2\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateMonthInfoMutation,\r\n} from \"../../../services/apiSliceMonths\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ninterface Props {\r\n  monthDateToString: string;\r\n  monthDate: string;\r\n}\r\n\r\nconst SettingsMonthsListItem = (props: Props) => {\r\n  const [deleteMonth, success] = useDeleteMonthMutation();\r\n  const [updateMonthInfo, successInfo] = useUpdateMonthInfoMutation();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n\r\n  const handleDelete = async () => {\r\n    Swal.fire(alertHelper(\"Chcesz usunąć miesiąc?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const year = props.monthDate.slice(0, 4);\r\n        const month = props.monthDate.slice(-2);\r\n\r\n        const updatedMonthsInfo = infoMonths.filter((infoMonth: string) => {\r\n          return infoMonth !== `${year}-${month}`;\r\n        });\r\n\r\n        await deleteMonth({ year: year, month: month });\r\n        await updateMonthInfo(updatedMonthsInfo);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item onClick={handleDelete} className=\"border-0 p-0 px-1 \">\r\n      <Button\r\n        disabled={success.isLoading}\r\n        className=\"w-100 d-flex justify-content-between align-items-center px-1 bg-primary-subtle text-capitalize border-0 fs-5\"\r\n      >\r\n        {props.monthDateToString} {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport SettingsMonthsListItem from \"./SettingsMonthsListItem\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst SettingsMonthsList = () => {\r\n  const { sortedInfoMonths, databaseMonthsDatesToString } = useMonthDates();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  return (\r\n    <Col className=\"col-9 col-sm-9 col-md-6 col-xl-3 col-xxl-3 me-md-auto\">\r\n      <h3 className=\"h4\" style={{}}>\r\n        Usuń miesiąc\r\n      </h3>\r\n      <ListGroup className=\"border-0 bg-primary-subtle p-0\">\r\n        {!infoMonths ? (\r\n          <p className=\"py-1 px-2 fs-4 text-warning\">Brak danych</p>\r\n        ) : (\r\n          databaseMonthsDatesToString?.map(\r\n            (monthDateToString: string, idx: number) => {\r\n              return (\r\n                <SettingsMonthsListItem\r\n                  monthDateToString={monthDateToString}\r\n                  monthDate={sortedInfoMonths[idx]}\r\n                  key={monthDateToString}\r\n                />\r\n              );\r\n            }\r\n          )\r\n        )}\r\n      </ListGroup>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsList;\r\n","export const dataUserInputs = [\r\n  {\r\n    labelText: \"Podaj imię\",\r\n    name: \"userName\",\r\n    type: \"text\",\r\n    placeholder: \"Imię\",\r\n  },\r\n  {\r\n    labelText: \"Podaj kolor\",\r\n    name: \"userColor\",\r\n    type: \"color\",\r\n    placeholder: \"\",\r\n  },\r\n];\r\n","import { useUsersQuery } from '../../../services/apiSliceUsers';\r\nimport { ModelUser } from './useSettingsUserFormik';\r\nimport * as yup from \"yup\";\r\n\r\nconst useValidationSettingsUserForm = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n\r\n   const validationSchema = yup.object({\r\n     userName: yup\r\n       .string()\r\n       .min(3, \"Min. 3 litery\")\r\n       .max(10, \"Max. 10 liter\")\r\n       .test(\r\n         \"is-in-database\",\r\n         \"Imię zajęte\",\r\n         value => value !== undefined && !usersNames?.includes(value)\r\n       )\r\n       .required(\"Imię wymagane\"),\r\n     userColor: yup\r\n       .string()\r\n       .test(\r\n         \"is-in-database\",\r\n         \"Kolor zajęty\",\r\n         value => value !== undefined && !UsersColors?.includes(value)\r\n       ),\r\n   });\r\n\r\n\r\n    return { validationSchema };\r\n};\r\n\r\nexport default useValidationSettingsUserForm;","import { useFormik } from \"formik\";\r\nimport {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../../services/apiSliceUsers\";\r\nimport useValidationSettingsUserForm from \"./useValidationSettingsUserForm\";\r\n\r\nexport interface ModelUser {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n}\r\n\r\nconst useUserSettingsFormik = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { validationSchema } = useValidationSettingsUserForm();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers || []\r\n\r\n  const formik = useFormik<ModelUser>({\r\n    initialValues: {\r\n      id: \"\",\r\n      userName: \"\",\r\n      userColor: \"#e0cce1\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      const updatedValues = {\r\n        ...values,\r\n        id: crypto.randomUUID(),\r\n      };\r\n\r\n      if (dataUsers) {\r\n        await addUser([...users, updatedValues]);\r\n      } else {\r\n        await addUser([updatedValues]);\r\n      }\r\n      resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useUserSettingsFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { dataUserInputs } from \"./dataSettingsUserForm\";\r\nimport useUserSettingsFormik from \"./useSettingsUserFormik\";\r\nimport { createBrowserHistory } from \"history\";\r\n\r\nconst SettingsUserForm = () => {\r\n  const { formik, success } = useUserSettingsFormik();\r\n  const { btnContent } = useHTTPState(success, \"Zapisz użytkowanika\");\r\n\r\n  const history = createBrowserHistory();\r\n\r\n  const handleGoBack = () => {\r\n    history.back();\r\n  };\r\n\r\n  return (\r\n    <Col className=\"col-9 col-sm-9 col-md-6 col-xl-3 col-xxl-3 me-md-auto\">\r\n      <button onClick={handleGoBack}>Wróć</button>\r\n      <Form onSubmit={formik.handleSubmit}>\r\n        <Row>\r\n          {dataUserInputs.map(({ labelText, name, type, placeholder }, idx) => {\r\n            return (\r\n              <Col key={name} className={`${idx === 0 ? \"col-8\" : \"col-4\"}`}>\r\n                <Form.Group className=\"\">\r\n                  <Form.Label htmlFor={name} className=\"fw-medium\">\r\n                    {labelText}\r\n                  </Form.Label>\r\n\r\n                  <Form.Control\r\n                    id={name}\r\n                    type={type}\r\n                    name={name}\r\n                    value={formik.values[name as keyof typeof formik.values]}\r\n                    onChange={formik.handleChange}\r\n                    onBlur={formik.handleBlur}\r\n                    placeholder={placeholder}\r\n                  />\r\n\r\n                  <Form.Text\r\n                    className=\"text-danger d-block mt-0 mb-4 fs-8\"\r\n                    style={{ height: \"0.7rem\" }}\r\n                  >\r\n                    {formik.touched[name as keyof typeof formik.touched] &&\r\n                      formik.errors[name as keyof typeof formik.touched] &&\r\n                      formik.errors[name as keyof typeof formik.touched]}\r\n                  </Form.Text>\r\n                </Form.Group>\r\n              </Col>\r\n            );\r\n          })}\r\n        </Row>\r\n\r\n        <Button\r\n          disabled={success.isLoading}\r\n          type=\"submit\"\r\n          className=\"col-8 col-sm-7  bg-info text-white fw-medium\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </Form>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default SettingsUserForm;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteUserMutation\r\n} from \"../../../services/apiSliceUsers\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\nimport { ModelUser } from \"../settingsUserForm/useSettingsUserFormik\";\r\n\r\ninterface Props {\r\n  user: ModelUser;\r\n}\r\n\r\nconst SettingsUsersListItem = (props: Props) => {\r\n  const [deleteUser, success] = useDeleteUserMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n\r\n  const handleDelete = async (id: string) => {\r\n    Swal.fire(alertHelper(\"Chcesz usunąć użytkownika?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const userBodyPUTRequest = users?.filter((user: ModelUser) => {\r\n          return user?.id !== id;\r\n        });\r\n\r\n        await deleteUser(userBodyPUTRequest);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      onClick={() => handleDelete(props.user.id)}\r\n      className=\"border-0 p-0\"\r\n      style={{ color: props.user.userColor }}\r\n    >\r\n      <Button\r\n        disabled={success.isLoading}\r\n        className=\"w-100 d-flex justify-content-between align-items-center px-1 bg-primary-subtle text-capitalize border-0 fs-5\"\r\n        style={{ color: props.user.userColor }}\r\n      >\r\n        {props.user.userName}\r\n        {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { ModelUser } from \"../settingsUserForm/useSettingsUserFormik\";\r\nimport SettingsUsersListItem from \"./SettingsUsersListItem\";\r\n\r\nconst SettingsUsersList = () => {\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n\r\n  return (\r\n    <Col className=\"col-9 col-sm-9 col-md-6 col-xl-3 col-xxl-3 me-md-auto\">\r\n      <h3 className=\"h4\">Usuń użytkownika</h3>\r\n      <ListGroup className=\"border-0 bg-primary-subtle p-0\">\r\n        {!users ? (\r\n          <p className=\"py-1 px-2 fs-4 text-warning\">Brak danych</p>\r\n        ) : (\r\n          users?.map((user: ModelUser) => {\r\n            return <SettingsUsersListItem user={user} key={user.id} />;\r\n          })\r\n        )}\r\n      </ListGroup>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersList;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport SettingsMonthsList from \"../settingsMonthsList/SettingsMonthsList\";\r\nimport SettingsUserForm from \"../settingsUserForm/SettingsUserForm\";\r\nimport SettingsUsersList from \"../settingsUsersList/SettingsUsersList\";\r\n\r\nconst useHTTPIndexSettings = () => {\r\n  const { usersError, usersIsLoading } = useSelector(\r\n    (state: RootState) => state.users\r\n  );\r\n  const { infoMonthsError, infoMonthsIsLoading } = useSelector(\r\n    (state: RootState) => state.infoMonths\r\n  );\r\n\r\n  const cc = true;\r\n  let settingsContent;\r\n\r\n  if (usersIsLoading || infoMonthsIsLoading) {\r\n    settingsContent = (\r\n      <Spinner animation=\"border\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (usersError) {\r\n    if (\"status\" in usersError) {\r\n      const errMsg = \"status\" in usersError && usersError.status;\r\n\r\n      settingsContent = (\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else if (infoMonthsError) {\r\n    if (\"status\" in infoMonthsError) {\r\n      const errMsg = \"status\" in infoMonthsError && infoMonthsError.status;\r\n\r\n      settingsContent = (\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else {\r\n    const styles = \"col-12 bg-white\";\r\n\r\n    settingsContent = (\r\n      <>\r\n        <Row className={styles}>\r\n          <SettingsUserForm />\r\n        </Row>\r\n        <Row className={styles}>\r\n          <SettingsUsersList />\r\n        </Row>\r\n        <Row className={`${styles} flex-grow-1 d-block`}\r\n        style = {{maxHeight:\"20%\"}}\r\n        >\r\n          <SettingsMonthsList />\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return { settingsContent };\r\n};\r\nexport default useHTTPIndexSettings;\r\n","import { useUsersQuery } from \"../../../services/apiSliceUsers\";\r\nimport useHTTPIndexSettings from \"./useHTTPIndexSettings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport useWindowWidth from \"../../../hooks/useWindowWidth\";\r\n\r\nconst IndexSettings = () => {\r\n  const { settingsContent } = useHTTPIndexSettings();\r\n  const { users, usersError, usersIsLoading } = useSelector(\r\n    (state: RootState) => state.users\r\n  );\r\n  const { infoMonths, infoMonthsError, infoMonthsIsLoading } = useSelector(\r\n    (state: RootState) => state.infoMonths\r\n  );\r\n\r\n    const { windowWidth } = useWindowWidth();\r\n\r\n \r\n  // const cc = true;\r\n  // let mainStyles = \"bg-primary-subtle\";\r\n\r\n  // if ((infoMonthsIsLoading && !infoMonths) || (usersIsLoading && !users)) {\r\n  //   mainStyles = \"d-flex align-items-center justify-content-center vh-100\";\r\n  // }\r\n\r\n  // if (\r\n  //   !infoMonths ||\r\n  //   infoMonthsError ||\r\n  //   infoMonthsIsLoading ||\r\n  //   !users ||\r\n  //   usersError ||\r\n  //   usersIsLoading\r\n  // ) {\r\n  //   mainStyles =\r\n  //     \"d-flex justify-content-end align-items-center p-1 pe-sm-5 col-sm-7 col-md-8 ms-auto mx-xxl-auto\";\r\n  // }\r\n\r\n  return (\r\n    <main className=\"backgroundImage\" style={{ height: \"100vh\" }}>\r\n      <Container\r\n        className=\"d-flex align-items-center flex-column  pe-0 overflow-y-scroll\"\r\n        style={{\r\n          maxHeight:\r\n            windowWidth > 576 ? \"100vh\" : \"calc(100vh - 40px)\",\r\n        }}\r\n      >\r\n        {settingsContent}\r\n      </Container>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexSettings;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n"],"names":["success","btnText","useEffect","isError","error","errMsg","status","Swal","text","concat","confirmButtonColor","btnContent","isLoading","_jsx","Spinner","animation","size","variant","children","className","_ref","infoMonths","useSelector","state","sortedInfoMonths","_toConsumableArray","sort","a","b","Date","getTime","databaseMonthsDatesToString","map","monthDate","monthToDateFormat","Intl","DateTimeFormat","year","month","timeZone","format","_useState","useState","window","innerWidth","_useState2","_slicedToArray","windowWidth","setWindowWidth","handleResize","addEventListener","removeEventListener","props","_useDeleteMonthMutati","useDeleteMonthMutation","_useDeleteMonthMutati2","deleteMonth","_useUpdateMonthInfoMu","useUpdateMonthInfoMutation","_useUpdateMonthInfoMu2","updateMonthInfo","useHTTPState","RiDeleteBin6Line","handleDelete","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","alertHelper","then","_ref2","_callee","result","updatedMonthsInfo","_context","isConfirmed","slice","filter","infoMonth","stop","_x","apply","arguments","ListGroup","Item","onClick","_jsxs","Button","disabled","monthDateToString","_useMonthDates","useMonthDates","Col","style","idx","SettingsMonthsListItem","dataUserInputs","labelText","name","type","placeholder","dataUsers","useUsersQuery","data","usersNames","userName","UsersColors","userColor","validationSchema","yup","min","max","test","value","undefined","includes","required","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","useValidationSettingsUserForm","users","formik","useFormik","initialValues","id","onSubmit","_onSubmit","values","resetForm","updatedValues","_objectSpread","crypto","randomUUID","_x2","_useUserSettingsFormi","useUserSettingsFormik","history","createBrowserHistory","back","Form","handleSubmit","Row","Group","Label","htmlFor","Control","onChange","handleChange","onBlur","handleBlur","Text","height","touched","errors","_useDeleteUserMutatio","useDeleteUserMutation","_useDeleteUserMutatio2","deleteUser","userBodyPUTRequest","user","color","SettingsUsersListItem","settingsContent","_useSelector","usersError","usersIsLoading","_useSelector2","infoMonthsError","infoMonthsIsLoading","_Fragment","styles","SettingsUserForm","SettingsUsersList","maxHeight","SettingsMonthsList","useHTTPIndexSettings","useWindowWidth","Container","message","title","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","alert"],"sourceRoot":""}
{"version":3,"file":"static/js/184.a31a0f6d.chunk.js","mappings":"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","sources":["data/dataCurrentDates.tsx","hooks/useDatabaseValues.tsx","pages/monthPanel/DayPrintData.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerColumns.tsx/HeaderColumns.tsx","pages/monthPanel/colmns/Columns.tsx","hooks/useMonthURLToString.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderSummary.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/validationFormHeaderMonthPanel.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/useFormHeaderMonthPanel.tsx","pages/monthPanel/monthPanelHeader/formHeaderMonthPanel/FormHeaderMonhPanel.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeaderCollapse.tsx","pages/monthPanel/monthPanelHeader/MonthPanelHeader.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["const today = new Date();\r\n\r\nexport const currYearNumber = new Intl.DateTimeFormat(\"pl\", {\r\n  year: \"numeric\",\r\n}).format(today);\r\n\r\nexport const currMonthNumber = new Intl.DateTimeFormat(\"pl\", {\r\n  month: \"2-digit\",\r\n}).format(today);\r\n\r\nexport const currDateNumber = today.toISOString().split(\"T\")[0]; \r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n\r\n","import { useMonthsDataQuery } from \"../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../pages/monthPanel/utils\";\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  error?: {};\r\n  isLoading: boolean;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  databaseMonthsDates: string[];\r\n  databaseMonthsDatesSorted: any;\r\n  databaseMonthsDatesToString: string[];\r\n}\r\n\r\nconst useDatabaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data, error, isLoading } = useMonthsDataQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find(\r\n          (month: any) => month.monthDate === monthURL\r\n        )\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0]?.days.reduce((sum: any, day: any) => {\r\n          return sum + day?.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1]?.days.reduce((sum: any, day: any) => {\r\n          return sum + day?.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n   \r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days \r\n      ? databaseColumns?.[2]?.days.reduce((sum: any, day: any) => {\r\n          return sum + day?.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  // dates transformation\r\n  const databaseMonthsDates =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection.map(month => month.monthDate)\r\n      : [];\r\n\r\n  const databaseMonthsDatesSorted = data\r\n    ? databaseMonthsDates.sort((date1: any, date2: any) => {\r\n        if (date1 < date2) {\r\n          return -1;\r\n        } else if (date1 > date2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n    : [];\r\n\r\n\r\n  const databaseMonthsDatesToString = databaseMonthsDatesSorted.map(\r\n    (monthDate: any) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    isLoading,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n    databaseMonthsDatesSorted,\r\n    databaseMonthsDatesToString,\r\n  };\r\n};\r\n\r\nexport default useDatabaseValues;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  const { monthURL } = useParams();\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    })\r\n      .format(monthToDateFormat)\r\n      .slice(0, -5);\r\n\r\n  const date = props.day.date.slice(5);\r\n  const dateToPrint = date[0] === \"0\" ? date.slice(1) : date;\r\n\r\n  // console.log(\"\", monthToString);\r\n\r\n  return (\r\n    <div className=\"px-1 py-2 py-sm-1\">\r\n      <div\r\n        className=\"d-flex justify-content-between\"\r\n        style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n      >\r\n        <div>{props.day.userName}</div>\r\n        <div>\r\n          {props.day.hours} <FiClock className=\"text-primary\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div>{date}</div>\r\n        <div>\r\n          {props.day.place === \"Poza\" ? (\r\n            <TbArrowBigRightLineFilled className=\"text-success\" />\r\n          ) : (\r\n            <MdFactory className=\"text-danger\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useMonthsDataQuery,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\nimport useDatabaseValues from \"../../hooks/useDatabaseValues\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseColumns, databaseMonth, data } =\r\n    useDatabaseValues(monthURL);\r\n\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id.toString()}\r\n      index={props.index}\r\n      isDragDisabled={false}\r\n    >\r\n      {provided => {\r\n        return (\r\n          <div\r\n            className=\"bg-white card mb-2\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <DayPrintData day={props.day} />\r\n            <Button\r\n              variant=\"info\"\r\n              size=\"sm\"\r\n              className=\"rounded-top-0 w-100 fw-medium \"\r\n              onClick={() => handleUpdate(props.day.id)}\r\n            >\r\n              Usuń\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div className=\"w-100\">\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 bg-primary-subtle\"\r\n              style={{\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import { useParams } from \"react-router-dom\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\n\r\nconst HeaderColumns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n  } = useDatabaseValues(monthURL);\r\n\r\n  // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  // useEffect(() => {\r\n  //   const handleResize = () => {\r\n  //     setWindowWidth(window.innerWidth);\r\n  //   };\r\n\r\n  //   window.addEventListener(\"resize\", handleResize);\r\n\r\n  //   return () => {\r\n  //     window.removeEventListener(\"resize\", handleResize);\r\n  //   };\r\n  // }, []);\r\n\r\n  // const displayHeaderContent = windowWidth > 576;\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: dataBaseSubmitedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: databaseAcceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: databaseRejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <div\r\n            key={headerText}\r\n            className=\"p-1 bg-primary-subtle text-dark-emphasis fw-medium w-100 border-4 border-bottom border-white\"\r\n            style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderColumns;\r\n","import { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { handleDragDrop } from \"../utils\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSlice\";\r\nimport Column from \"../Column\";\r\nimport HeaderColumns from \"../headerColumns.tsx/HeaderColumns\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Columns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    data,\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    dataCurrentHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDatabaseValues(monthURL);\r\n\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n\r\n  console.log(\"\", success.isLoading);\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    data && databaseMonth && setColumns(databaseColumns);\r\n  }, [data, monthURL]);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      columns?.length > 1 &&\r\n      databaseMonth?.monthDate &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [columns, databaseAllHours, dataCurrentHours]);\r\n\r\n  const scrollableRef = useRef(null);\r\n  const [thumbPosition, setThumbPosition] = useState(0);\r\n\r\n  const handleScroll = () => {\r\n    const element = scrollableRef.current;\r\n\r\n    if (element) {\r\n      const { scrollTop, scrollHeight, clientHeight } = element;\r\n      const maxScrollTop = scrollHeight - clientHeight;\r\n      const thumbPosition = (scrollTop / maxScrollTop) * 100;\r\n      setThumbPosition(thumbPosition);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main\r\n        ref={scrollableRef}\r\n        onScroll={handleScroll}\r\n        className=\"mb-2 overflow-y-scroll \"\r\n        style={{ top: `${thumbPosition}%` }}\r\n      >\r\n        <Container className=\"mx-0 ms-sm-auto sticky-top d-flex column-gap-2\">\r\n          <HeaderColumns />\r\n        </Container>\r\n        <Container\r\n          className=\"mx-0 ms-sm-auto mb-5 d-flex column-gap-2\"\r\n          style={{ height: \"fit-content\" }}\r\n        >\r\n          <DragDropContext\r\n            onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n          >\r\n            {columns &&\r\n              columns.length > 0 &&\r\n              columns.map((column: any) => {\r\n                return <Column column={column} key={column.id} />;\r\n              })}\r\n          </DragDropContext>\r\n        </Container>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Columns;\r\n","import { useParams } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { monthURL } = useParams();\r\n  const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n\r\n  const monthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return { monthURLStringFormat };\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import useMonthURLToString from \"../../../hooks/useMonthURLToString\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  useBootstrapBreakpoints,\r\n  useBootstrapMinBreakpoint,\r\n} from \"react-bootstrap/esm/ThemeProvider\";\r\n\r\nconst MonthPanelHeaderSummary = () => {\r\n  const { monthURL } = useParams();\r\n  const { databaseAllHours, dataCurrentHours } = useDatabaseValues(monthURL);\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"text-capitalize fw-medium text-center d-sm-none\">\r\n        {monthURLStringFormat}\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-center my-2 fw-medium position-relative\">\r\n        <div className=\"text-capitalize fw-medium d-none d-sm-block  position-absolute end-0\">\r\n          {monthURLStringFormat}\r\n        </div>\r\n\r\n        <div className=\"text-end\" style={{ width: \"25%\" }}>\r\n          Wszystkie\r\n        </div>\r\n        <div className=\"text-center mx-2\" style={{}}>\r\n          {databaseAllHours} - {dataCurrentHours}\r\n        </div>\r\n        <div style={{ width: \"25%\" }}>Wolne</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderSummary;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUpdateMonthMutation } from \"../../../../services/apiSlice\";\r\nimport useDatabaseValues from \"../../../../hooks/useDatabaseValues\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { validationSchema } from \"./validationFormHeaderMonthPanel\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useFormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n  const { databaseMonth, data } = useDatabaseValues(monthURL);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async values => {\r\n      await updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          allHours: values.allHours,\r\n        },\r\n      });\r\n      //  resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useFormHeaderMonhPanel;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport \"./_formHeaderMonthPAnel.scss\";\r\nimport useFormHeaderMonhPanel from \"./useFormHeaderMonthPanel\";\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n  const { formik, success } = useFormHeaderMonhPanel();\r\n\r\n  let btnContent;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  } else {\r\n    btnContent = \"Zapisz liczbę godzin\";\r\n  }\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit} className=\"my-2\">\r\n      <Form.Control\r\n        type=\"number\"\r\n        name=\"allHours\"\r\n        min={0}\r\n        max={320}\r\n        value={formik.values.allHours}\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        placeholder=\"Liczba\"\r\n        size=\"sm\"\r\n        className=\"p-0 px-1 mx-auto mb-2 border border-primary\"\r\n        style={{ minHeight: 0, cursor: \"pointer\", width: \"fit-content\" }}\r\n      />\r\n\r\n      <Form.Group className=\"d-flex align-items-center w-100\">\r\n        <div className=\"fw-medium\">0</div>\r\n        <Form.Range\r\n          name=\"allHours\"\r\n          min={0}\r\n          max={320}\r\n          value={formik.values.allHours}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          className=\"form-range custom-range mx-2 medium\"\r\n          style={{\r\n            height: 10,\r\n            background: `linear-gradient(to right, olive 0%, red ${formik.values.allHours}%, transparent ${formik.values.allHours}%, transparent 100%)`,\r\n          }}\r\n        />\r\n        <div className=\"fw-medium\">320</div>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        variant=\"info\"\r\n        size=\"sm\"\r\n        className=\"fw-medium d-block mx-auto mt-2 col-sm-4 col-md-3 col-lg-2\"\r\n        disabled={success.isLoading}\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\nconst MonthPanelHeaderCollapse = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        variant=\"info\"\r\n        className=\"fw-medium p-1 w-100 mt-1 d-flex justify-content-center align-items-center\"\r\n      >\r\n       Liczba godzin w miesiącu\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-1 fw-medium\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div className=\"bg-primary-subtle rounded p-1\">\r\n          <FormHeaderMonhPanel />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeaderCollapse;\r\n","import Container from \"react-bootstrap/Container\";\r\nimport MonthPanelHeaderSummary from \"./MonthPanelHeaderSummary\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport MonthPanelHeaderCollapse from \"./MonthPanelHeaderCollapse\";\r\n\r\n\r\nconst MonthPanelHeader = () => {\r\n  return (\r\n    <header className=\"me-3\">\r\n      <Container className=\"mx-0 ms-sm-auto \">\r\n        <MonthPanelHeaderCollapse/>\r\n        <MonthPanelHeaderSummary />\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default MonthPanelHeader;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Columns from \"../colmns/Columns\";\r\nimport MonthPanelHeader from \"../monthPanelHeader/MonthPanelHeader\";\r\nimport useDatabaseValues from \"../../../hooks/useDatabaseValues\";\r\nimport { currMonthDateToString } from \"../../../data/dataCurrentDates\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const { databaseMonth, data, error, isLoading } = useDatabaseValues(monthURL);\r\n\r\n  let panelContent;\r\n\r\n  if (isLoading) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Spinner animation=\"border\" variant=\"secondary\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      </main>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      return (\r\n        <main\r\n          className=\"d-flex justify-content-center align-items-center\"\r\n          style={{ height: \"100vh\" }}\r\n        >\r\n          <h3 className=\"text-danger col-5\">\r\n            <> Błąd: {errMsg} </>\r\n          </h3>\r\n        </main>\r\n      );\r\n    }\r\n  } else if (!data) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h5 className=\"text-warning text-center col-5\">\r\n          Brak  miesięcy zapisanych w bazie danych. Dodaj miesiąc za pomocą formularza\r\n        </h5>\r\n      </main>\r\n    );\r\n  } else if (!databaseMonth) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h3 className=\"text-warning text-center col-5\">\r\n          Brak danych z miesiąca {currMonthDateToString}\r\n        </h3>\r\n      </main>\r\n    );\r\n  } else {\r\n    panelContent = (\r\n      <main className=\"d-flex flex-column\" style={{ height: \"100vh\" }}>\r\n        <MonthPanelHeader />\r\n        <Columns />\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return <>{panelContent}</>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\n"],"names":["today","Date","currYearNumber","Intl","DateTimeFormat","year","format","currMonthNumber","month","currDateNumber","toISOString","split","currMonthDateToString","timeZone","_databaseColumns$","_databaseColumns$2","_databaseColumns$3","monthURL","arguments","length","undefined","_useMonthsDataQuery","useMonthsDataQuery","data","error","isLoading","databaseMonthsId","Object","keys","databaseMonthsWithId","values","flat","map","item","idx","_objectSpread","id","databaseMonthsCollection","addDaysToColumns","databaseMonth","find","monthDate","databaseColumns","columns","databaseAllHours","allHours","dataCurrentHours","currentHours","dataBaseSubmitedHours","submitedHours","databaseAcceptedHours","acceptedHours","databaseRejectedHours","rejectedHours","submitedHoursSum","days","reduce","sum","day","hours","acceptedHoursSum","rejectedHoursSum","databaseMonthsDates","databaseMonthsDatesSorted","sort","date1","date2","databaseMonthsDatesToString","monthToDateFormat","props","useParams","date","slice","_jsxs","className","children","style","fontSize","_jsx","userName","FiClock","place","TbArrowBigRightLineFilled","MdFactory","_props$day","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","_slicedToArray","updateColumns","succes","_useDatabaseValues","useDatabaseValues","handleUpdate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","column","filter","stop","_x2","apply","_x","btnContent","Draggable","draggableId","toString","index","isDragDisabled","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","Button","variant","size","onClick","isError","_Fragment","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","height","Day","crypto","randomUUID","placeholder","headerText","counter","success","console","log","_useState","useState","_useState2","setColumns","useEffect","scrollableRef","useRef","_useState3","_useState4","thumbPosition","setThumbPosition","onScroll","element","current","scrollTop","scrollHeight","clientHeight","top","concat","Container","HeaderColumns","DragDropContext","onDragEnd","results","handleDragDrop","Column","monthURLToDateFormat","monthURLStringFormat","useMonthURLToString","width","validationSchema","yup","max","required","formik","useFormik","initialValues","onSubmit","_onSubmit","_useFormHeaderMonhPan","useFormHeaderMonhPanel","Spinner","animation","Form","handleSubmit","Control","type","name","min","value","onChange","handleChange","onBlur","handleBlur","minHeight","cursor","Group","Range","background","disabled","open","setOpen","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","FormHeaderMonhPanel","MonthPanelHeaderCollapse","MonthPanelHeaderSummary","panelContent","errMsg","status","MonthPanelHeader","Columns","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
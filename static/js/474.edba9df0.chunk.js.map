{"version":3,"file":"static/js/474.edba9df0.chunk.js","mappings":"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","sources":["components/sidebar/dayForm/dataDayForm.tsx","components/sidebar/dayForm/validationDayForm.tsx","components/sidebar/dayForm/useDayForm.tsx","components/sidebar/dayForm/DayForm.tsx","components/sidebar/monthForm/dataMonthForm.tsx","components/sidebar/monthForm/useMonthForm.tsx","components/sidebar/monthForm/MonthForm.tsx","components/sidebar/monthList/MonthsList.tsx","components/sidebar/IndexSidebar.tsx","data/firebaseConfig.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Podaj imię\", value => value !== \"Imię\")\r\n    .required(\"Podaj imię\"),\r\n  date: yup.string().required(\"Podaj datę\"),\r\n  hours: yup\r\n    .mixed()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Podaj liczbę złożonych godzin\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Podaj liczbę złożonych godzin\"),\r\n\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Podaj lokalizację\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Podaj lokalizację\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport { initialValues } from \"./dataDayForm\";\r\nimport { validationSchema } from \"./validationDayForm\";\r\nimport { useUpdateColumnsMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface FormValues {\r\n  date: string;\r\n  hours: number | string;\r\n  userName: string;\r\n  place: string;\r\n}\r\n\r\nconst useDayForm = () => {\r\n  const [updateColumns, success] = useUpdateColumnsMutation();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseColumns, databaseMonth, data, dataCurrentHours } =\r\n    useDataBaseValues(lastPartMonthURL);\r\n\r\n  const formik = useFormik<FormValues>({\r\n    initialValues: initialValues,\r\n    validationSchema: validationSchema,\r\n\r\n    onSubmit: async values => {\r\n      formik.setFieldValue(\"id\", crypto.randomUUID());\r\n      if (dataCurrentHours - +formik.values.hours < 0) return;\r\n\r\n      const databaseColumnsAddedDays =\r\n        data && databaseMonth && databaseColumns?.length > 0\r\n          ? [...databaseColumns]\r\n          : [];\r\n\r\n      databaseColumnsAddedDays[0] = data &&\r\n        databaseMonth &&\r\n        databaseColumns?.length > 0 && {\r\n          ...databaseColumns?.[0],\r\n          days: [\r\n            ...databaseColumns?.[0]?.days,\r\n            ...[{ ...values, hours: +values.hours }],\r\n          ],\r\n        };\r\n\r\n      await updateColumns({\r\n        id: data && databaseMonth.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: databaseColumnsAddedDays,\r\n        },\r\n      });\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useDayForm;\r\n","import { FcApproval } from \"react-icons/fc\";\r\nimport RadioInput from \"../../inputs/RadioInput\";\r\nimport TextInput from \"../../inputs/TextInput\";\r\nimport useDayForm from \"./useDayForm\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nconst DayForm = () => {\r\n  const { monthURL } = useParams();\r\n  const { formik, success } = useDayForm();\r\n  const urlParts = useLocation().pathname.split(\"/\");\r\n  const lastPartMonthURL = urlParts[urlParts.length - 1];\r\n\r\n  const { dataCurrentHours, databaseAllHours } =\r\n    useDataBaseValues(lastPartMonthURL);\r\n\r\n\r\n  let btnContent = <span>Zatwierdź dzień</span>;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <span> \"Błąd\" </span>;\r\n  }\r\n\r\n if (databaseAllHours === 0) {\r\n   btnContent = (\r\n     <span style={{ color: \"red\" }}> Podaj godziny</span>\r\n   );\r\n }\r\n\r\n  if (dataCurrentHours - +formik.values.hours < 0) {\r\n    btnContent = (\r\n      <span style={{ color: \"red\" }}>Brak godzin </span>\r\n    );\r\n  }\r\n\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit} className=\"mt-4\">\r\n      <Form.Select\r\n        name=\"userName\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        size=\"sm\"\r\n        className=\"rounded-0\"\r\n        \r\n      >\r\n        <option>Imię</option>\r\n        {[\"Jan\", \"Maria\", \"Mariola\"].map(name => {\r\n          return (\r\n            <option key={name} value={name}>\r\n              {name}\r\n            </option>\r\n          );\r\n        })}\r\n      </Form.Select>\r\n\r\n      <Form.Text\r\n        className=\"text-danger d-block mt-0 mb-1 lh-0\"\r\n        style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n      >\r\n        {formik.touched.userName &&\r\n          formik.errors.userName &&\r\n          formik.errors.userName}\r\n      </Form.Text>\r\n\r\n      <Form.Group className=\"\">\r\n        <Form.Control\r\n          id=\"date\"\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={formik.values.date}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          min={1}\r\n          placeholder=\"Liczba\"\r\n          size=\"sm\"\r\n          className=\"rounded-0\"\r\n        />\r\n        <Form.Text\r\n          className=\"text-danger d-block mt-0 mb-1 lh-0\"\r\n          style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n        >\r\n          {formik.touched.date && formik.errors.date && formik.errors.date}\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Select\r\n        name=\"hours\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        size=\"sm\"\r\n        className=\"rounded-0\"\r\n      >\r\n        <option>Liczba godzin </option>\r\n        {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(item => {\r\n          return (\r\n            <option key={item} value={+item}>\r\n              {item}\r\n            </option>\r\n          );\r\n        })}\r\n      </Form.Select>\r\n\r\n      <Form.Text\r\n        className=\"text-danger d-block mt-0 mb-1 lh-0\"\r\n        style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n      >\r\n        {formik.touched.hours && formik.errors.hours && formik.errors.hours}\r\n      </Form.Text>\r\n\r\n      <Form.Select\r\n        name=\"place\"\r\n        onChange={formik.handleChange}\r\n        onBlur={formik.handleBlur}\r\n        size=\"sm\"\r\n        className=\"rounded-0\"\r\n      >\r\n        <option>Lokalizacja</option>\r\n        <option value=\"Wewnątrz\">Wewnątrz</option>\r\n        <option value=\"Poza\">Poza</option>\r\n      </Form.Select>\r\n\r\n      <Form.Text\r\n        className=\"text-danger d-block mt-0 mb-1 lh-0\"\r\n        style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n      >\r\n        {formik.touched.place && formik.errors.place && formik.errors.place}\r\n      </Form.Text>\r\n\r\n      <div className=\"d-grid\">\r\n        <Button\r\n          variant=\"secondary\"\r\n          type=\"submit\"\r\n          className=\"rounded-0 fw-medium\"\r\n        >\r\n          {btnContent}\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","export const initialValues = {\r\n  id: crypto.randomUUID(),\r\n  date: \"\",\r\n  hours: \"\",\r\n  userName: \"\",\r\n  place: \"\",\r\n};\r\n\r\ninterface DayModel {\r\n  id?: string;\r\n  userName: string;\r\n  date: string;\r\n  hours: string | number;\r\n  place: string;\r\n}\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  columnName: string;\r\n  days?: any;\r\n}\r\n\r\nconst columns: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    columnName: \"Miesiąc\",\r\n    days: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    columnName: \"Oczekujące\",\r\n    days: [null],\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    columnName: \"Zatwierdzone\",\r\n    days: [null],\r\n  },\r\n];\r\n\r\nexport const monthPattern = {\r\n  id: \"\",\r\n  month: \"\",\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submitedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n  columns: columns,\r\n};\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { monthPattern } from \"./dataMonthForm\";\r\nimport { useAddMonthMutation } from \"../../../services/apiSlice\";\r\n\r\ninterface ModelFormValues {\r\n  monthYear: string;\r\n}\r\n\r\nconst useMonthForm = () => {\r\n  const [addMonth, success] = useAddMonthMutation();\r\n  const date = new Date();\r\n\r\n  const currYearNum = new Intl.DateTimeFormat(\"pl\", {\r\n    year: \"numeric\",\r\n  }).format(date);\r\n\r\n  const currMonthNum = new Intl.DateTimeFormat(\"pl\", {\r\n    month: \"2-digit\",\r\n  }).format(date);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { monthYear: `${currYearNum}-${currMonthNum}` },\r\n\r\n    onSubmit: async values => {\r\n      const monthToPOST = { ...monthPattern, month: values.monthYear };\r\n      await addMonth(monthToPOST);\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useMonthForm;\r\n","import React, { useState } from \"react\";\r\nimport { monthPattern } from \"./dataMonthForm\";\r\nimport { useAddMonthMutation } from \"../../../services/apiSlice\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { auth } from \"../../../data/firebaseConfig\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport useMonthForm from \"./useMonthForm\";\r\n\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst MonthForm = () => {\r\n  const { formik, success } = useMonthForm();\r\n\r\n  let btnContent = <AiOutlinePlusCircle style={{ fontSize: \"2rem\" }} />;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\"  variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <span> \"Błąd\" </span>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group className=\"d-flex\">\r\n          <Form.Control\r\n            type=\"month\"\r\n            name=\"monthYear\"\r\n            min=\"2023-06\"\r\n            max=\"2025-12\"\r\n            value={formik.values.monthYear}\r\n            onChange={formik.handleChange}\r\n            onBlur={formik.handleBlur}\r\n            size=\"sm\"\r\n            className=\"rounded-0\"\r\n          />\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            size=\"sm\"\r\n            className=\"rounded-0 d-flex align-items-center justify-content-center px-0  bg-transparent  text-dark border-0\"\r\n            style={{ width: \"25%\", height: \"100%\" }}\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n\r\n          {/* <Form.Text\r\n          className=\"text-danger py-1\"\r\n          style={{ fontSize: \"0.7rem\" }}\r\n        >uuuu</Form.Text> */}\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MonthForm;\r\n","import React from \"react\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\n\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport { useColumnsQuery } from \"../../../services/apiSlice\";\r\nimport useDataBaseValues from \"../../../pages/monthPanel/useDataBaseValues\";\r\nimport \"./monthList.scss\";\r\n\r\nconst MonthsList = () => {\r\n  const { data } = useColumnsQuery(undefined);\r\n  const { monthURL } = useParams();\r\n  const { databaseMonthsCollection } = useDataBaseValues(monthURL);\r\n\r\n  const databaseMonthsDatesSorted =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection\r\n          .map(month => month.month)\r\n          .sort((date1: any, date2: any) => {\r\n            if (date1 < date2) {\r\n              return -1;\r\n            } else if (date1 > date2) {\r\n              return 1;\r\n            } else {\r\n              return 0;\r\n            }\r\n          })\r\n      : [];\r\n\r\n  const databaseMonthsDatesToString =\r\n    data &&\r\n    databaseMonthsDatesSorted?.map((monthDate: any) => {\r\n      const monthToDateFormat =\r\n        data && databaseMonthsDatesSorted && new Date(monthDate);\r\n\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    });\r\n\r\n  return (\r\n    <ListGroup className=\"monthListContainer\">\r\n      {data === undefined || data === null ? (\r\n        <p className=\"py-1 px-2\">Brak danych</p>\r\n      ) : (\r\n        databaseMonthsDatesToString.map((month: any, idx: any) => {\r\n          return (\r\n            <ListGroup.Item key={month} className=\"border-0 p-0 px-1 \">\r\n              <Link\r\n                to={`/miesiac/${databaseMonthsDatesSorted[idx]}`}\r\n                key={month}\r\n                style={{ textDecoration: \"none\", color: \"black\" }}\r\n              >\r\n                {month}\r\n              </Link>\r\n            </ListGroup.Item>\r\n          );\r\n        })\r\n      )}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default MonthsList;\r\n","import { Link, useNavigate, useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../../pages/monthPanel/hooksMonthPanel/useDataBaseValues\";\r\nimport { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport DayForm from \"./dayForm/DayForm\";\r\nimport MonthForm from \"./monthForm/MonthForm\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport MonthsList from \"./monthList/MonthsList\";\r\n\r\nconst IndexSidebar = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const urlPrintNavBar = useLocation().pathname;\r\n\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(s => !s);\r\n\r\n  const logout = () => {\r\n    auth.signOut();\r\n    navigate(\"/\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(urlPrintNavBar) ? (\r\n        <>\r\n          <Button\r\n            variant=\"primary\"\r\n            onClick={toggleShow}\r\n            className=\"me-2\"\r\n            style={{ position: \"absolute\", right: 0, bottom:\"60%\" }}\r\n          >\r\n            <GiHamburgerMenu />\r\n          </Button>\r\n          <Offcanvas\r\n            show={show}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className=\"w-20\"\r\n            style={{ width: 200 }}\r\n          >\r\n            <Offcanvas.Header className=\"pb-0\">\r\n              <Offcanvas.Title>\r\n                <div\r\n                  onClick={logout}\r\n                  className=\"fs-6 \"\r\n                  style={{ cursor: \"pointer\" }}\r\n                >\r\n                  Wyloguj\r\n                </div>\r\n              </Offcanvas.Title>\r\n            </Offcanvas.Header>\r\n            <Offcanvas.Body>\r\n              <MonthForm />\r\n              <MonthsList />\r\n              <DayForm />\r\n            </Offcanvas.Body>\r\n          </Offcanvas>\r\n        </>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\n","import { useColumnsQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\n// const defaultValue = null;\r\ninterface DatabaseColumns {\r\n  allHours: any;\r\n  columns: any[];\r\n}\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data } = useColumnsQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n\r\n\r\n\r\n  // date transformation\r\n const databaseMonthsDates =\r\n   data && databaseMonthsCollection\r\n     ? databaseMonthsCollection.map(month => month.month)\r\n     : [];\r\n \r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["initialValues","id","crypto","randomUUID","date","hours","userName","place","validationSchema","yup","test","value","required","_useUpdateColumnsMuta","useUpdateColumnsMutation","_useUpdateColumnsMuta2","_slicedToArray","updateColumns","success","urlParts","useLocation","pathname","split","lastPartMonthURL","length","_useDataBaseValues","useParams","monthURL","useDataBaseValues","databaseColumns","databaseMonth","data","dataCurrentHours","formik","useFormik","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","_databaseColumns$","databaseColumnsAddedDays","wrap","_context","prev","next","setFieldValue","abrupt","_toConsumableArray","_objectSpread","days","concat","columns","stop","_x","apply","arguments","_useDayForm","useDayForm","databaseAllHours","btnContent","_jsx","children","isLoading","Spinner","animation","size","variant","className","isError","style","color","_jsxs","Form","handleSubmit","Select","name","onChange","handleChange","onBlur","handleBlur","map","Text","fontSize","height","touched","errors","Group","Control","type","min","placeholder","item","Button","monthPattern","month","allHours","currentHours","submitedHours","acceptedHours","rejectedHours","columnName","_useAddMonthMutation","useAddMonthMutation","_useAddMonthMutation2","addMonth","Date","currYearNum","Intl","DateTimeFormat","year","format","currMonthNum","monthYear","monthToPOST","_useMonthForm","useMonthForm","AiOutlinePlusCircle","_Fragment","max","width","useColumnsQuery","undefined","databaseMonthsCollection","databaseMonthsDatesSorted","sort","date1","date2","databaseMonthsDatesToString","monthDate","monthToDateFormat","timeZone","ListGroup","idx","Item","Link","to","textDecoration","navigate","useNavigate","urlPrintNavBar","_useState","useState","_useState2","show","setShow","includes","onClick","s","position","right","bottom","GiHamburgerMenu","Offcanvas","onHide","scroll","backdrop","Header","Title","auth","signOut","cursor","Body","MonthForm","MonthsList","DayForm","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","addDaysToColumns","find","dataBaseSubmitedHours","databaseAcceptedHours","databaseRejectedHours","submitedHoursSum","reduce","sum","day","acceptedHoursSum","rejectedHoursSum","databaseMonthsDates","string","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","column","hasOwnProperty","handleDragDrop","results","setColumns","source","destination","draggableId","droppableId","index","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
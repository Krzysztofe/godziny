{"version":3,"file":"static/js/615.f5cb1791.chunk.js","mappings":"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","sources":["components/inputs/TextInput.tsx","components/inputs/RadioInput.tsx","pages/hoursPanel/DayForm.tsx","pages/hoursPanel/Day.tsx","pages/hoursPanel/Column.tsx","pages/hoursPanel/dataHoursPanel.tsx","pages/hoursPanel/HeaderInPanel.tsx","pages/hoursPanel/utils.tsx","pages/hoursPanel/IndexHoursPanel.tsx"],"sourcesContent":["export interface Props {\r\n  type: string;\r\n  name: string;\r\n  value: string | number;\r\n  label: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextInput = (props: Props) => {\r\n  return (\r\n    <div >\r\n      <label>{props.label}</label>\r\n      <input\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        placeholder={props.placeholder}\r\n        style={{ width: 50 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { ReactNode } from \"react\";\r\n\r\ninterface Props {\r\n  value: string;\r\n  name: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  checked: boolean;\r\n  containerClass?: string;\r\n  inuptClass?: string;\r\n  labelClass?: string;\r\n  label?: ReactNode;\r\n}\r\n\r\nconst RadioInput = (props: Props) => {\r\n  return (\r\n    <div className={props.containerClass}>\r\n      <input\r\n        type=\"radio\"\r\n        name={props.name}\r\n        value={props.value}\r\n        checked={props.checked}\r\n        onChange={props.handleChange}\r\n        className={props.inuptClass}\r\n        id={props.value}\r\n      />\r\n      <label htmlFor={props.value} className={props.labelClass}>\r\n       <small> {props.label ? props.label : props.value}</small>\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RadioInput;\r\n","import { FormEvent, useState } from \"react\";\r\nimport TextInput from \"../../components/inputs/TextInput\";\r\nimport RadioInput from \"../../components/inputs/RadioInput\";\r\nimport { FaTrashAlt } from \"react-icons/fa\";\r\nimport { FcApproval } from \"react-icons/fc\";\r\n\r\nconst DayForm = () => {\r\n  const [userData, setUserData] = useState({\r\n    hours: \"\",\r\n    userName: \"\",\r\n    location: \"\",\r\n  });\r\n\r\n  const handleInputChange = () => {\r\n    return;\r\n  };\r\n\r\n  const handleSubmit = (e: FormEvent) => {\r\n    e.preventDefault();\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        {[\r\n          { type: \"number\", name: \"hours\", label: \"Godz\" },\r\n          { type: \"text\", name: \"userName\", label: \"Imię\" },\r\n        ].map(({ type, name, label }) => {\r\n          return (\r\n            <TextInput\r\n              key={name}\r\n              type={type}\r\n              name={name}\r\n              value={userData[name as keyof typeof userData]}\r\n              label={label}\r\n              placeholder={label}\r\n              handleChange={handleInputChange}\r\n            />\r\n          );\r\n        })}\r\n\r\n        {[\"Wewnątrz\", \"Poza\"].map(location => {\r\n          return (\r\n            <RadioInput\r\n              key={location}\r\n              value={location}\r\n              name={\"location\"}\r\n              handleChange={handleInputChange}\r\n              checked={userData.location === location}\r\n            />\r\n          );\r\n        })}\r\n        <button>\r\n          <FcApproval />\r\n        </button>\r\n      </form>\r\n      <button>\r\n        <FaTrashAlt />\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DayForm;\r\n","import { useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport DayForm from \"./DayForm\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n \r\n\r\n  return (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props.day.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <strong>{props.day.content}</strong>\r\n              <DayForm/>\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>{props.column.name} </h4>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: \"30vw\",\r\n                height: \"fit-content\",\r\n              }}\r\n            >\r\n              {props.column.items &&\r\n                props.column?.items?.map((day: any, index: any) => {\r\n                  return (\r\n                    <Day day={day} index={index} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","interface DayModel {\r\n  id: string;\r\n  content: string;\r\n}\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  name: string;\r\n  items?: DayModel[] | [];\r\n}\r\n\r\nexport const columnsWithDays: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    name: \"miesiac\",\r\n    items: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    name: \"oczekujące\",\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    name: \"zatwierdzone\",\r\n  },\r\n];\r\n","import TextInput from \"../../components/inputs/TextInput\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../redux/storeFeatures/hoursPanelSlice\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddReactionMutation } from \"../../services/apiSlice\";\r\nimport { createDaysInColumn } from \"./utils\";\r\nimport { columnsWithDays } from \"./dataHoursPanel\";\r\n\r\nconst HeaderInPanel = () => {\r\n  const dispatch = useDispatch();\r\n  const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const [addReaction, success] = useAddReactionMutation();\r\n\r\n  columnsWithDays[0].items = createDaysInColumn(numberOfDays);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    dispatch(handleChange(value));\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    await addReaction(columnsWithDays);\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <TextInput\r\n        type=\"number\"\r\n        name=\"numberOfDays\"\r\n        value={numberOfDays}\r\n        label=\"Liczba dni w miesiącu\"\r\n        placeholder=\"Dni\"\r\n        handleChange={handleInputChange}\r\n      />\r\n      <button onClick={handleClick}> add</button>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderInPanel;\r\n","export const createDaysInColumn = (num: number) => {\r\n  let days = [];\r\n\r\n  for (let i = 1; i <= num; i++) {\r\n    days.push({\r\n      id: crypto.randomUUID(),\r\n      content: i.toString(),\r\n      userName: \"\",\r\n      hours: \"\",\r\n      location: \"\",\r\n    });\r\n  }\r\n\r\n  return days;\r\n};\r\n\r\nexport const addDaysToEmptyColumns = (arr: any) => {\r\n  return arr?.map((obj: any) => {\r\n    if (!obj.hasOwnProperty(\"items\")) {\r\n      return { ...obj, items: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].items];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].items]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      items: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      items: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].items];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      items: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useReactionsQuery } from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderInPanel from \"./HeaderInPanel\";\r\nimport { handleDragDrop, addDaysToEmptyColumns } from \"./utils\";\r\n\r\nconst IndexHoursPanel = () => {\r\n  const { data, error } = useReactionsQuery(undefined);\r\n  const columnsFromDatabase = data && Object.values(data).flat();\r\n  const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setColumns(columnsToPrint);\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <HeaderInPanel />\r\n      <button> zatwierdz</button>\r\n      <div style={{ display: \"flex\" }}>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          {columns &&\r\n            columns.length > 0 &&\r\n            columns.map((column: any) => {\r\n              return <Column column={column} key={column.id} />;\r\n            })}\r\n        </DragDropContext>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexHoursPanel;\r\n"],"names":["props","_jsxs","children","_jsx","label","type","name","value","onChange","handleChange","placeholder","style","width","className","containerClass","checked","inuptClass","id","htmlFor","labelClass","_useState","useState","hours","userName","location","_useState2","_slicedToArray","userData","handleInputChange","_Fragment","onSubmit","e","preventDefault","map","_ref","TextInput","RadioInput","FcApproval","FaTrashAlt","border","Draggable","draggableId","day","toString","index","provided","_objectSpread","draggableProps","dragHandleProps","ref","innerRef","content","DayForm","column","Droppable","droppableId","snapshot","_props$column","_props$column$items","droppableProps","height","items","Day","crypto","randomUUID","columnsWithDays","dispatch","useDispatch","numberOfDays","useSelector","state","hoursPanel","_useAddReactionMutati","useAddReactionMutation","_useAddReactionMutati2","addReaction","num","days","i","push","createDaysInColumn","handleClick","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","target","onClick","arr","_useReactionsQuery","useReactionsQuery","undefined","data","columnsFromDatabase","error","Object","values","flat","columnsToPrint","obj","hasOwnProperty","columns","setColumns","useEffect","HeaderInPanel","display","DragDropContext","onDragEnd","results","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","length","Column"],"sourceRoot":""}
{"version":3,"file":"static/js/701.f6eb8b34.chunk.js","mappings":"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","sources":["components/sidebar/SidebarTitle.tsx","components/sidebar/sidebarDayForm/validationSidebarDayFormik.tsx","components/sidebar/sidebarDayForm/useSidebarDayFormik.tsx","components/sidebar/sidebarDayForm/useDataSidebarSelects.tsx","components/sidebar/sidebarDayForm/SidebarDayForm.tsx","components/sidebar/sidebarMonthForm/dataSidebarMonthForm.tsx","components/sidebar/sidebarMonthForm/useSidebarMonthFormik.tsx","components/sidebar/sidebarMonthForm/SidebarMonthForm.tsx","components/sidebar/sidebarMonthList/SidebarMonthsList.tsx","components/sidebar/SidebarMonthCollapse.tsx","components/sidebar/IndexSidebar.tsx","data/dataCurrentDates.tsx","data/firebaseConfig.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useURLValues.tsx"],"sourcesContent":["import { useState } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nconst SidebarTitle = () => {\r\n  const navigate = useNavigate();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const logout = () => {\r\n    setIsLoading(true);\r\n    auth\r\n      .signOut()\r\n      .then(() => {\r\n        navigate(\"/\");\r\n      })\r\n      .catch(error => {\r\n        Swal.fire({\r\n          title: \"Błąd\",\r\n          text: error.message,\r\n          confirmButtonColor: \"rgb(31, 180, 255)\",\r\n        });\r\n      })\r\n      .finally(() => {\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  let btnContent;\r\n\r\n  if (isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\" className=\"mx-auto\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else {\r\n    btnContent = <div className=\"text-start w-100\">Wyloguj</div>;\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={logout}\r\n      className=\"fw-bolder text-info p-0 bg-transparent border-0 w-50\"\r\n      style={{\r\n        cursor: \"pointer\",\r\n        fontSize: \"0.8rem\",\r\n      }}\r\n      disabled={isLoading}\r\n    >\r\n      {btnContent}\r\n    </Button>\r\n  );\r\n};\r\n\r\nexport default SidebarTitle;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  userName: yup\r\n    .string()\r\n    .test(\"is-name-valid\", \"Imię wymagane\", value => value !== \"Imię\")\r\n    .required(\"Imię wymagane\"),\r\n  hours: yup\r\n    .string()\r\n    .test(\r\n      \"is-hours-valid\",\r\n      \"Liczba godzin wymagana\",\r\n      value => value !== \"Liczba godzin\"\r\n    )\r\n    .required(\"Liczba godzin wymagana\"),\r\n  place: yup\r\n    .string()\r\n    .test(\r\n      \"is-place-valid\",\r\n      \"Lokalizacja wymagana\",\r\n      value => value !== \"Lokalizacja\"\r\n    )\r\n    .required(\"Lokalizacja wymagana\"),\r\n});\r\n","import { useFormik } from \"formik\";\r\nimport { dateInNext14Days } from \"../../../data/dataCurrentDates\";\r\nimport {\r\n  useAddDayMutation,\r\n  useCalcDataQuery,\r\n  useFirstColumnDataQuery,\r\n} from \"../../../services/apiSlice\";\r\nimport { validationSchema } from \"./validationSidebarDayFormik\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { useUsersQuery } from \"../../../services/apiSliceUsers\";\r\n\r\ninterface ModelDay {\r\n  id: string;\r\n  date: string;\r\n  hours: string;\r\n  userName: string;\r\n  place: string;\r\n  userColor: string;\r\n}\r\n\r\nconst useSidebarDayFormik = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n\r\n  const [addDay, success] = useAddDayMutation();\r\n\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const { data: dataFirstColumn } = useFirstColumnDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n// const getUser = dataUsers?.filter((user: any) => {\r\n//   return user?.userName === props.day?.userName;\r\n// });\r\n// const backgroundColor = getUser?.userColor;\r\n\r\n\r\n  const formik = useFormik<ModelDay>({\r\n    initialValues: {\r\n      id: crypto.randomUUID(),\r\n      date: dateInNext14Days,\r\n      hours: \"\",\r\n      userName: \"\",\r\n      place: \"\",\r\n      userColor:\"\"\r\n    },\r\n    validationSchema: validationSchema,\r\n\r\n\r\n\r\n    onSubmit: async values => {\r\n      formik.setFieldValue(\"id\", crypto.randomUUID());\r\n      // console.log(\"\", +formik.values.hours);\r\n      // console.log(\"\", dataCalc?.currentHours);\r\n      // console.log(\r\n      //   \"\",\r\n      //   dataCalc?.currentHours && dataCalc?.currentHours - +formik.values.hours\r\n      // );\r\n      if (\r\n        dataCalc?.currentHours &&\r\n        dataCalc?.currentHours - +formik.values.hours < 0\r\n      )\r\n        return;\r\n\r\n      const userColor = dataUsers?.find((user: any) => {\r\n        return user?.userName === values.userName;\r\n      }).userColor\r\n\r\n\r\n      const valuesToDatabase = {\r\n        ...values,\r\n        hours: +values.hours,\r\n        userColor: userColor,\r\n      };\r\n\r\n      if (dataFirstColumn?.id) {\r\n        await addDay({\r\n          year: yearFromURL,\r\n          month: monthFromURL,\r\n          firstColumnBody: {\r\n            ...dataFirstColumn,\r\n            days: dataFirstColumn?.days\r\n              ? [...dataFirstColumn.days, { ...valuesToDatabase }]\r\n              : [{ ...valuesToDatabase }],\r\n          },\r\n        });\r\n      }\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useSidebarDayFormik;\r\n","import { useUsersQuery } from \"../../../services/apiSliceUsers\";\r\nimport { ModelUser } from \"../../../pages/settings/settingsUserForm/useSettingsUserFormik\";\r\n\r\nconst useDataSidebarSelects = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers ? dataUsers : [];\r\n\r\n  const names = users?.map(({ userName }: ModelUser) => {\r\n    return userName;\r\n  });\r\n\r\n  const dataSelects = [\r\n    {\r\n      name: \"userName\",\r\n      firstOption: `${names.length === 0 ? \"Zapisz w ustawieniach\" : \"Imię\"}`,\r\n      labelText: \"Podaj imię\",\r\n      options: names,\r\n    },\r\n    {\r\n      name: \"hours\",\r\n      firstOption: \"Liczba godzin\",\r\n      labelText: \"Podaj liczbę godzin\",\r\n      options: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n    },\r\n\r\n    {\r\n      name: \"place\",\r\n      firstOption: \"Lokalizacja\",\r\n      labelText: \"Podaj lokalizację\",\r\n      options: [\"Wewnątrz\", \"Poza\"],\r\n    },\r\n  ];\r\n\r\n  return { dataSelects };\r\n};\r\nexport default useDataSidebarSelects;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport {\r\n  dateInNext14Days,\r\n  dateInNext60Days,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport {\r\n  useCalcDataQuery,\r\n  useMonthDataQuery,\r\n} from \"../../../services/apiSlice\";\r\nimport \"./_dayForm.scss\";\r\nimport useSidebarDayFormik from \"./useSidebarDayFormik\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport useDataSidebarSelects from \"./useDataSidebarSelects\";\r\n\r\nconst SidebarDayForm = () => {\r\n  const { yearFromURL, monthFromURL } = useURLValues();\r\n  const { data: dataMonth } = useMonthDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const { data: dataCalc } = useCalcDataQuery({\r\n    year: yearFromURL,\r\n    month: monthFromURL,\r\n  });\r\n\r\n  const { dataSelects } = useDataSidebarSelects();\r\n  const { formik, success } = useSidebarDayFormik();\r\n  const { btnContent } = useHTTPState(success, \"Zapisz dzień\");\r\n\r\n  return (\r\n    <Form\r\n      onSubmit={formik.handleSubmit}\r\n      className={`mt-2 ${!dataMonth ? \"d-none\" : \"\"} ${\r\n        dataCalc?.allHours === 0 ? \"formContainer\" : \"\"\r\n      }`}\r\n    >\r\n      {dataSelects.map(({ name, firstOption, labelText, options }) => {\r\n        return (\r\n          <Form.Group key={labelText}>\r\n            <Form.Label htmlFor={name} className=\"mb-0 fs-7\">\r\n              {labelText}\r\n            </Form.Label>\r\n\r\n            <Form.Select\r\n              id={name}\r\n              name={name}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className={`p-0 px-1 border border-primary ${\r\n                firstOption === \"Zapisz w ustawieniach\"\r\n                  ? \"text-danger\"\r\n                  : \"\"\r\n              }`}\r\n              style={{\r\n                cursor: \"pointer\",\r\n              }}\r\n            >\r\n              <option>{firstOption}</option>\r\n\r\n              {options?.map((option: string | number) => {\r\n                return (\r\n                  <option key={option} value={option}>\r\n                    {option}\r\n                  </option>\r\n                );\r\n              })}\r\n            </Form.Select>\r\n\r\n            <div\r\n              className=\"text-danger d-block mt-0 fs-8\"\r\n              style={{ height: \"0.7rem\" }}\r\n            >\r\n              {formik.touched[name as keyof typeof formik.touched] &&\r\n                formik.errors[name as keyof typeof formik.touched] &&\r\n                formik.errors[name as keyof typeof formik.touched]}\r\n            </div>\r\n          </Form.Group>\r\n        );\r\n      })}\r\n\r\n      <Form.Group>\r\n        <Form.Label htmlFor=\"date\" className=\"mb-0 fs-7\">\r\n          Podaj dzień\r\n        </Form.Label>\r\n        <Form.Control\r\n          id=\"date\"\r\n          type=\"date\"\r\n          name=\"date\"\r\n          value={formik.values.date}\r\n          onChange={formik.handleChange}\r\n          onBlur={formik.handleBlur}\r\n          min={dateInNext14Days}\r\n          max={dateInNext60Days}\r\n          disabled={success.isLoading}\r\n          placeholder=\"Liczba\"\r\n          size=\"sm\"\r\n          className=\"p-0 px-1 border border-primary\"\r\n          style={{ minHeight: 0, cursor: \"pointer\" }}\r\n        />\r\n        <div\r\n          className=\"text-danger d-block mt-0 fs-8\"\r\n          style={{ height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.date && formik.errors.date && formik.errors.date}\r\n        </div>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={success.isLoading}\r\n        className=\"fw-medium w-100 mt-2 bg-info text-white\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n\r\n      <div\r\n        className=\"text-danger d-block mt-0 fs-8\"\r\n        style={{ height: \"0.7rem\" }}\r\n      >\r\n        {dataCalc?.currentHours &&\r\n        dataCalc?.currentHours - +formik.values.hours < 0\r\n          ? \"Brak dostępnych godzin\"\r\n          : \"\"}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SidebarDayForm;\r\n","export interface ModelDay {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n  date: string;\r\n  hours: number;\r\n  place: string;\r\n}\r\n\r\nexport interface ModelColumn {\r\n  id: string;\r\n  days: ModelDay[];\r\n}\r\n\r\nexport interface ModelCalc {\r\n  allHours: number;\r\n  currentHours: number;\r\n  submittedHours: number;\r\n  acceptedHours: number;\r\n  rejectedHours: number;\r\n}\r\n\r\nexport interface ModelMonthPattern {\r\n  id: string;\r\n  columns: ModelColumn[];\r\n  calc: ModelCalc;\r\n}\r\n\r\nexport interface ModelMonthsPatern {\r\n  [key: string]: {\r\n    [key: string]: ModelMonthPattern\r\n  };\r\n}\r\n\r\nconst columns: ModelColumn[] = [\r\n  { id: \"submitted\", days: [] },\r\n  { id: \"accepted\", days: [] },\r\n  { id: \"rejected\", days: [] },\r\n];\r\n\r\nconst calc: ModelCalc = {\r\n  allHours: 0,\r\n  currentHours: 0,\r\n  submittedHours: 0,\r\n  acceptedHours: 0,\r\n  rejectedHours: 0,\r\n};\r\n\r\nexport const monthPattern: ModelMonthPattern = {\r\n  id: \"\",\r\n  columns,\r\n  calc,\r\n};\r\n\r\n\r\n\r\n\r\n\r\nconst years = {\r\n  2023: {\r\n    month_07: {\r\n      monthDate: \"2023-07\",\r\n      columns: {},\r\n    },\r\n    month_08: {\r\n      monthDate: \"2023-08\",\r\n      columns: [\r\n        { id: \"zatwierdzone\", days: [{ hours: 9 }, null, { hours: 7 }, null] },\r\n        { id: \"odrzucone\", days: [{ hours: 9 }, null, { hours: 7 }, null] },\r\n        { id: \"nara\", days: [{ hours: 9 }, null, { hours: 7 }, null] },\r\n      ],\r\n    },\r\n    month_09: {\r\n      monthDate: \"2023-09\",\r\n      columns: {},\r\n    },\r\n  },\r\n  2024: {\r\n    month_08: {\r\n      monthDate: \"2023-08\",\r\n      columns: {},\r\n    },\r\n    month_07: {\r\n      monthDate: \"2023-07\",\r\n      columns: {},\r\n    },\r\n  },\r\n};\r\n\r\nconst columnsx = [\r\n  { id: \"zatwierdzone\", days: [{ hours: 9 }, null, { hours: 7 }, null] },\r\n  { id: \"odrzucone\", days: [{ hours: 9 }, null, { hours: 7 }, null] },\r\n  { id: \"nara\", days: [{ hours: 9 }, null, { hours: 7 }, null] },\r\n];\r\n","import { useFormik } from \"formik\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\nimport {\r\n  currMonthDigits,\r\n  currYearDigits,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport {\r\n  useAddMonthMutation\r\n} from \"../../../services/apiSlice\";\r\nimport { ModelMonthPattern, monthPattern } from \"./dataSidebarMonthForm\";\r\n\r\ninterface ModelFormValues {\r\n  monthDate: string;\r\n}\r\n\r\nconst useSidebarMonthFormik = () => {\r\n  const navigate = useNavigate();\r\n  const { monthDates } = useMonthDates();\r\n  const [addMonth, success] = useAddMonthMutation();\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { monthDate: `${currYearDigits}-${currMonthDigits}` },\r\n    validationSchema: yup.object({\r\n      monthDate: yup\r\n        .string()\r\n        .test(\r\n          \"is-in-database\",\r\n          \"Miesiąc zapisany\",\r\n          value => value !== undefined && !monthDates?.includes(value)\r\n        ),\r\n    }),\r\n\r\n    onSubmit: async values => {\r\n      const year = values.monthDate.slice(0, 4);\r\n      const month = values.monthDate.slice(-2);\r\n      const monthBody: ModelMonthPattern = {\r\n        ...monthPattern,\r\n        id: values.monthDate,\r\n      };\r\n\r\n      await addMonth({ year, month, monthBody });\r\n      navigate(`/${values.monthDate}`);\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useSidebarMonthFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport {\r\n  currMonthDigits,\r\n  currYearDigits,\r\n} from \"../../../data/dataCurrentDates\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport useSidebarMonthFormik from \"./useSidebarMonthFormik\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\nconst SidebarMonthForm = () => {\r\n  const { formik, success } = useSidebarMonthFormik();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <AiOutlinePlusCircle className=\"text-info\" style={{ fontSize: \"1.4rem\" }} />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"mt-1\">\r\n        <Form.Group>\r\n          <Form.Label htmlFor=\"monthDate\" className=\"mb-0 fs-7\">\r\n            Podaj miesiąc\r\n          </Form.Label>\r\n          <div className=\"d-flex\">\r\n            <Form.Control\r\n              id=\"monthDate\"\r\n              type=\"month\"\r\n              name=\"monthDate\"\r\n              min={`${currYearDigits}-${currMonthDigits}`}\r\n              max=\"2025-12\"\r\n              value={formik.values.monthDate}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className=\"p-0 px-1 d-block border border-primary text-capitalize\"\r\n              style={{ minHeight: 0, height: \"fit-content\", cursor: \"pointer\" }}\r\n            />\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={success.isLoading}\r\n              className=\"col-2 d-flex justify-content-center align-items-center m-0 justify-content-center p-0 m-0 ms-1  text-info-emphasis border-0 bg-transparent\"\r\n            >\r\n              {btnContent}\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n        <Form.Text\r\n          className=\"text-danger d-block mt-0 lh-0\"\r\n          style={{ fontSize: \"0.6rem\", height: \"0.7rem\" }}\r\n        >\r\n          {formik.touched.monthDate &&\r\n            formik.errors.monthDate &&\r\n            formik.errors.monthDate}\r\n        </Form.Text>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthForm;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport useURLValues from \"../../../hooks/useURLValues\";\r\nimport { useMonthsDataQuery } from \"../../../services/apiSlice\";\r\nimport \"./_monthList.scss\";\r\n\r\nconst SidebarMonthsList = () => {\r\n  const { data } = useMonthsDataQuery(undefined);\r\n  const { monthDates } = useMonthDates();\r\n  const { monthURL } = useURLValues();\r\n\r\n  const databaseMonthsDatesToString = monthDates?.map((monthDate: string) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  const isMonthInURL = /^\\d{4}-\\d{2}$/.test(monthURL);\r\n\r\n  const monthURLToDateFormat = isMonthInURL ? new Date(monthURL) : null;\r\n\r\n  const monthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n\r\n  return (\r\n    <ListGroup className=\"monthListContainer bg-white rounded-0 border border-primary\">\r\n      {!data ? (\r\n        <p className=\"py-1 px-2 text-warning text-center\">Brak danych</p>\r\n      ) : (\r\n        databaseMonthsDatesToString?.map((month: string, idx: number) => {\r\n          return (\r\n            <ListGroup.Item key={month} className=\"border-0 p-0 px-1\">\r\n              <Link\r\n                to={`/${monthDates?.[idx]}`}\r\n                className={`${\r\n                  monthURLStringFormat !== month || !monthURLStringFormat\r\n                    ? \"text-reset\"\r\n                    : \"text-warning\"\r\n                } text-decoration-none text-capitalize`}\r\n              >\r\n                {month}\r\n              </Link>\r\n            </ListGroup.Item>\r\n          );\r\n        })\r\n      )}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthsList;\r\n","import { useState } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Collapse from \"react-bootstrap/Collapse\";\r\nimport SidebarMonthsList from \"./sidebarMonthList/SidebarMonthsList\";\r\nimport { MdOutlineKeyboardArrowDown } from \"react-icons/md\";\r\n\r\nconst SidebarMonthCollapse = () => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={() => setOpen(!open)}\r\n        aria-controls=\"example-collapse-text\"\r\n        aria-expanded={open}\r\n        size=\"sm\"\r\n        className=\"p-0 px-1 border border-primary w-100 mt-1 text-start bg-white fw-medium d-flex justify-content-between align-items-center\"\r\n      >\r\n        Wybierz miesiąc\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"fs-3 me-1\"\r\n          style={{\r\n            transform: `${open ? \"rotate(180deg)\" : \"\"} `,\r\n            transitionDuration: \"320ms\",\r\n          }}\r\n        />\r\n      </Button>\r\n      <Collapse in={open}>\r\n        <div>\r\n          <SidebarMonthsList />\r\n        </div>\r\n      </Collapse>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMonthCollapse;\r\n","import { useState, useEffect } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Offcanvas from \"react-bootstrap/Offcanvas\";\r\nimport { GiHamburgerMenu } from \"react-icons/gi\";\r\nimport { useLocation } from \"react-router-dom\";\r\nimport SidebarTitle from \"./SidebarTitle\";\r\nimport SidebarDayForm from \"./sidebarDayForm/SidebarDayForm\";\r\nimport SidebarMonthForm from \"./sidebarMonthForm/SidebarMonthForm\";\r\nimport SidebarMonthCollapse from \"./SidebarMonthCollapse\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { auth } from \"../../data/firebaseConfig\";\r\nimport { AiTwotoneSetting } from \"react-icons/ai\";\r\n\r\n\r\nconst IndexSidebar = () => {\r\n  const urlPrintNavBar = useLocation().pathname;\r\n  const [show, setShow] = useState(false);\r\n  const [user] = useAuthState(auth);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const toggleShow = () => setShow(s => !s);\r\n\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    windowWidth > 575 && setShow(true);\r\n  }, [windowWidth]);\r\n\r\n  return (\r\n    <>\r\n      {![\"/\"].includes(urlPrintNavBar) ? (\r\n        <aside>\r\n          <Button\r\n            variant=\"info\"\r\n            onClick={toggleShow}\r\n            className={`me-2 p-2 mt-1  ${\r\n              windowWidth > 575 ? \"d-none\" : \"d-block\"\r\n            }`}\r\n            style={{ position: \"absolute\", right: 0, borderRadius: \"50%\" }}\r\n          >\r\n            <GiHamburgerMenu className=\"fs-1\" />\r\n          </Button>\r\n\r\n          <Offcanvas\r\n            show={show}\r\n            onHide={handleClose}\r\n            name=\"Disable backdrop\"\r\n            scroll={true}\r\n            backdrop={false}\r\n            className=\"bg-primary-subtle\"\r\n            style={{ width: 210 }}\r\n          >\r\n            <Offcanvas.Header className=\"pb-0\">\r\n              <SidebarTitle />\r\n            </Offcanvas.Header>\r\n            <Offcanvas.Body className=\"d-flex flex-column pt-0\">\r\n              <SidebarMonthForm />\r\n              <SidebarMonthCollapse />\r\n              <SidebarDayForm />\r\n\r\n              <Link\r\n                to=\"/ustawienia\"\r\n                className=\"text-info mt-auto fw-medium text-decoration-none \"\r\n              >\r\n                <AiTwotoneSetting /> Ustawienia\r\n              </Link>\r\n            </Offcanvas.Body>\r\n          </Offcanvas>\r\n        </aside>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexSidebar;\r\n","const today = new Date();\r\n\r\nconst formatDate = (date: Date) => {\r\n  const year = date.getFullYear();\r\n  const month = String(date.getMonth() + 1).padStart(2, \"0\");\r\n  const day = String(date.getDate()).padStart(2, \"0\");\r\n  return `${year}-${month}-${day}`;\r\n};\r\n\r\nconst futureDateInNext14Days = new Date(today.getTime() + 14 * 24 * 60 * 60 * 1000);\r\nconst futureDateInNext60Days = new Date(today.getTime() + 60 * 24 * 60 * 60 * 1000);\r\n\r\nexport const currYearDigits = today.getFullYear();\r\nexport const currMonthDigits = String(today.getMonth() + 1).padStart(2, \"0\");\r\nexport const currDayDigits = String(today.getDate()).padStart(2, \"0\");\r\nexport const currDateDigits = formatDate(today);\r\n\r\nexport const dateInNext14Days = formatDate(futureDateInNext14Days);\r\nexport const dateInNext60Days = formatDate(futureDateInNext60Days);\r\n\r\n\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(today);\r\n","\r\nimport { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAvvdzLRow-8AdA5zJH6uv19MOsPLNwC3A\",\r\n  authDomain: \"godziny-3b30f.firebaseapp.com\",\r\n  projectId: \"godziny-3b30f\",\r\n  storageBucket: \"godziny-3b30f.appspot.com\",\r\n  messagingSenderId: \"367174950216\",\r\n  appId: \"1:367174950216:web:0bd1ea3c1c77b5e797677d\",\r\n};\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nexport const auth = getAuth(app); \r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        title: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useMonthsDataQuery } from \"../services/apiSlice\";\r\n\r\nconst useMonthDates = () => {\r\n    const { data } = useMonthsDataQuery(undefined);\r\n    \r\n  const monthDates =\r\n    data &&\r\n    Object.values(data).flatMap(year =>\r\n      Object.values(year).flatMap(month => month.id)\r\n    );\r\n  return { monthDates };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useLocation } from \"react-router-dom\";\r\n\r\nconst useURLValues = () => {\r\n  const { pathname } = useLocation();\r\n  const monthURL = pathname.split(\"/\").slice(-1)[0];\r\n  const yearFromURL = monthURL?.slice(0, 4);\r\n  const monthFromURL = monthURL?.slice(-2);\r\n\r\n  return { monthURL, yearFromURL, monthFromURL };\r\n};\r\n\r\nexport default useURLValues;\r\n"],"names":["btnContent","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_jsx","Spinner","animation","size","variant","className","children","Button","onClick","auth","signOut","then","catch","error","Swal","title","text","message","confirmButtonColor","finally","style","cursor","fontSize","disabled","validationSchema","yup","userName","test","value","required","hours","place","_useURLValues","useURLValues","yearFromURL","monthFromURL","_useAddDayMutation","useAddDayMutation","_useAddDayMutation2","addDay","success","dataCalc","useCalcDataQuery","year","month","data","dataFirstColumn","useFirstColumnDataQuery","dataUsers","useUsersQuery","formik","useFormik","initialValues","id","crypto","randomUUID","date","dateInNext14Days","userColor","onSubmit","_onSubmit","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","valuesToDatabase","wrap","_context","prev","next","setFieldValue","currentHours","abrupt","find","user","_objectSpread","firstColumnBody","days","concat","_toConsumableArray","stop","_x","apply","arguments","users","names","map","_ref","dataSelects","name","firstOption","length","labelText","options","dataMonth","useMonthDataQuery","useDataSidebarSelects","_useSidebarDayFormik","useSidebarDayFormik","useHTTPState","_jsxs","Form","handleSubmit","allHours","Group","Label","htmlFor","Select","onChange","handleChange","onBlur","handleBlur","option","height","touched","errors","Control","type","min","max","dateInNext60Days","placeholder","minHeight","monthPattern","columns","calc","submittedHours","acceptedHours","rejectedHours","monthDates","useMonthDates","_useAddMonthMutation","useAddMonthMutation","_useAddMonthMutation2","addMonth","monthDate","currYearDigits","currMonthDigits","undefined","includes","monthBody","slice","_useSidebarMonthFormi","useSidebarMonthFormik","AiOutlinePlusCircle","_Fragment","Text","useMonthsDataQuery","monthURL","databaseMonthsDatesToString","monthToDateFormat","Date","Intl","DateTimeFormat","timeZone","format","monthURLToDateFormat","monthURLStringFormat","ListGroup","idx","Item","Link","to","open","setOpen","MdOutlineKeyboardArrowDown","transform","transitionDuration","Collapse","in","SidebarMonthsList","urlPrintNavBar","useLocation","pathname","show","setShow","_useAuthState","useAuthState","_useState3","window","innerWidth","_useState4","windowWidth","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","s","position","right","borderRadius","GiHamburgerMenu","Offcanvas","onHide","scroll","backdrop","width","Header","SidebarTitle","Body","SidebarMonthForm","SidebarMonthCollapse","SidebarDayForm","AiTwotoneSetting","today","formatDate","getFullYear","String","getMonth","padStart","day","getDate","futureDateInNext14Days","getTime","futureDateInNext60Days","currMonthDateToString","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth","btnText","isError","errMsg","status","Object","flatMap","split"],"sourceRoot":""}
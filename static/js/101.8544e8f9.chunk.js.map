{"version":3,"file":"static/js/101.8544e8f9.chunk.js","mappings":"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","sources":["data/dataCurrentDates.tsx","hooks/useMonthURLToString.tsx","pages/monthPanel/DayPrintData.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerColumns.tsx/HeaderColumns.tsx","pages/monthPanel/colmns/Columns.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/validationFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/useFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/FormHeaderMonhPanel.tsx","hooks/useCurrentDates.tsx","pages/monthPanel/headerMonthPanel/HeaderMonthPanel.tsx","pages/monthPanel/indexMonthPanel/IndexMonthPanel.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["const date = new Date();\r\n\r\nexport const currYearNumber = new Intl.DateTimeFormat(\"pl\", {\r\n  year: \"numeric\",\r\n}).format(date);\r\n\r\nexport const currMonthNumber = new Intl.DateTimeFormat(\"pl\", {\r\n  month: \"2-digit\",\r\n}).format(date);\r\n\r\nexport const currMonthDateToString = new Intl.DateTimeFormat(\"pl-PL\", {\r\n  year: \"numeric\",\r\n  month: \"long\",\r\n  timeZone: \"UTC\",\r\n}).format(date);\r\n","import { useMonthsDataQuery } from \"../services/apiSlice\";\r\nimport { addDaysToColumns } from \"../pages/monthPanel/utils\";\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  error?: {};\r\n  isLoading: boolean;\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  databaseMonthsDates: string[];\r\n  databaseMonthsDatesSorted: any;\r\n  databaseMonthsDatesToString: string[];\r\n}\r\n\r\nconst useDatabaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data, error, isLoading } = useMonthsDataQuery(undefined);\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find(\r\n          (month: any) => month.monthDate === monthURL\r\n        )\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  // dates transformation\r\n  const databaseMonthsDates =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection.map(month => month.monthDate)\r\n      : [];\r\n\r\n  const databaseMonthsDatesSorted = data\r\n    ? databaseMonthsDates.sort((date1: any, date2: any) => {\r\n        if (date1 < date2) {\r\n          return -1;\r\n        } else if (date1 > date2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      })\r\n    : [];\r\n\r\n\r\n  const databaseMonthsDatesToString = databaseMonthsDatesSorted.map(\r\n    (monthDate: any) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    isLoading,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n    databaseMonthsDatesSorted,\r\n    databaseMonthsDatesToString,\r\n  };\r\n};\r\n\r\nexport default useDatabaseValues;\r\n","import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  const { monthURL } = useParams();\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    })\r\n      .format(monthToDateFormat)\r\n      .slice(0, -5);\r\n\r\n  const date = props.day.date.slice(5);\r\n  const dateToPrint = date[0] === \"0\" ? date.slice(1) : date;\r\n\r\n  // console.log(\"\", monthToString);\r\n\r\n  return (\r\n    <div className=\"px-1 py-2 py-sm-1\">\r\n      <div\r\n        className=\"d-flex justify-content-between\"\r\n        style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n      >\r\n        <div>{props.day.userName}</div>\r\n        <div>\r\n          {props.day.hours} <FiClock className=\"text-primary\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div>{date}</div>\r\n        <div>\r\n          {props.day.place === \"Poza\" ? (\r\n            <TbArrowBigRightLineFilled className=\"text-success\" />\r\n          ) : (\r\n            <MdFactory className=\"text-danger\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useMonthsDataQuery,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\nimport useDatabaseValues from \"../../hooks/useMonthURLToString\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  // const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useMonthsDataQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    databaseMonth,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  } = useDatabaseValues(monthURL);\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id.toString()}\r\n      index={props.index}\r\n    >\r\n      {provided => {\r\n        return (\r\n          <div\r\n            className=\"bg-white card mb-2\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <DayPrintData day={props.day} />\r\n            <Button\r\n              variant=\"info\"\r\n              size=\"sm\"\r\n              className=\"rounded-top-0 w-100 fw-medium \"\r\n              onClick={() => handleUpdate(props.day.id)}\r\n            >\r\n              Usuń\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div className=\"w-100\">\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 bg-primary-subtle\"\r\n              style={{\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import { useParams } from \"react-router-dom\";\r\nimport useDatabaseValues from \"../../../hooks/useMonthURLToString\";\r\n\r\nconst HeaderColumns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n  } = useDatabaseValues(monthURL);\r\n\r\n  // const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  // useEffect(() => {\r\n  //   const handleResize = () => {\r\n  //     setWindowWidth(window.innerWidth);\r\n  //   };\r\n\r\n  //   window.addEventListener(\"resize\", handleResize);\r\n\r\n  //   return () => {\r\n  //     window.removeEventListener(\"resize\", handleResize);\r\n  //   };\r\n  // }, []);\r\n\r\n  // const displayHeaderContent = windowWidth > 576;\r\n\r\n  return (\r\n    <>\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          counter: dataBaseSubmitedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyznane:\",\r\n          counter: databaseAcceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          counter: databaseRejectedHours,\r\n        },\r\n      ].map(({ headerText, counter }) => {\r\n        return (\r\n          <div\r\n            key={headerText}\r\n            className=\"p-1 bg-primary-subtle text-dark-emphasis fw-medium w-100 \"\r\n            style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1rem)\" }}\r\n          >\r\n            {headerText} {\"\"}\r\n            {counter}\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderColumns;\r\n","import { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { handleDragDrop } from \"../utils\";\r\nimport useDatabaseValues from \"../../../hooks/useMonthURLToString\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSlice\";\r\nimport Column from \"../Column\";\r\nimport HeaderColumns from \"../headerColumns.tsx/HeaderColumns\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nconst Columns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    data,\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    dataCurrentHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDatabaseValues(monthURL);\r\n\r\n  // console.log(\"\", databaseMonth);\r\n\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n\r\n  useEffect(() => {\r\n    data && databaseMonth && setColumns(databaseColumns);\r\n  }, [data, monthURL]);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      columns?.length > 1 &&\r\n      databaseMonth?.monthDate &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [columns, databaseAllHours, dataCurrentHours]);\r\n\r\n  return (\r\n    <>\r\n      <main className=\"mb-2 overflow-y-scroll \">\r\n        <Container className=\"mx-0 ms-sm-auto sticky-top d-flex column-gap-2\">\r\n          <HeaderColumns />\r\n        </Container>\r\n        <Container\r\n          className=\"mx-0 ms-sm-auto mb-5 d-flex column-gap-2\"\r\n          style={{ height: \"fit-content\" }}\r\n        >\r\n          <DragDropContext\r\n            onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n          >\r\n            {columns &&\r\n              columns.length > 0 &&\r\n              columns.map((column: any) => {\r\n                return <Column column={column} key={column.id} />;\r\n              })}\r\n          </DragDropContext>\r\n        </Container>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Columns;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUpdateMonthMutation } from \"../../../../services/apiSlice\";\r\nimport useDatabaseValues from \"../../../../hooks/useMonthURLToString\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { validationSchema } from \"./validationFormHeaderMonthPanel\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useFormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n  const { databaseMonth, data } = useDatabaseValues(monthURL);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async values => {\r\n      await updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          allHours: values.allHours,\r\n        },\r\n      });\r\n      //  resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useFormHeaderMonhPanel;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useFormHeaderMonhPanel from \"./useFormHeaderMonthPanel\";\r\nimport React, { useState } from \"react\";\r\nimport \"./_formHeaderMonthPAnel.scss\";\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n  const { formik, success } = useFormHeaderMonhPanel();\r\n\r\n  let btnContent = (\r\n    <div className={formik.values.allHours === 0 ? \"text-danger\" : \"\"}>\r\n      Zapisz liczbę godzin\r\n    </div>\r\n  );\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group className=\"my-1\">\r\n          <div className=\"text-center fw-medium\">{formik.values.allHours}</div>\r\n          <div className=\"d-flex align-items-center w-100\">\r\n            <div className=\"fw-medium\">0</div>\r\n            <Form.Range\r\n              name=\"allHours\"\r\n              min={0}\r\n              max={320}\r\n              value={formik.values.allHours}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              className=\"form-range custom-range mx-2 medium\"\r\n              style={{\r\n                height: 10,\r\n                background: `linear-gradient(to right, olive 0%, red ${formik.values.allHours}%, transparent ${formik.values.allHours}%, transparent 100%)`,\r\n              }}\r\n            />\r\n            <div className=\"fw-medium\">320</div>\r\n          </div>\r\n          <div className=\"text-center\">\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"info\"\r\n              size=\"sm\"\r\n              className=\"fw-medium mx-auto\"\r\n            >\r\n              {btnContent}\r\n            </Button>\r\n          </div>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useParams } from \"react-router-dom\";\r\n\r\nconst useMonthURLToString = () => {\r\n  const { monthURL } = useParams();\r\n  const monthURLToDateFormat = monthURL && new Date(monthURL);\r\n\r\n  const monthURLStringFormat =\r\n    monthURLToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthURLToDateFormat);\r\n  console.log(\"x\", monthURLToDateFormat);\r\n\r\n  return { monthURLStringFormat };\r\n};\r\n\r\nexport default useMonthURLToString;\r\n","import { useParams } from \"react-router-dom\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport useDatabaseValues from \"../../../hooks/useMonthURLToString\";\r\nimport useMonthURLToString from \"../../../hooks/useCurrentDates\";\r\n\r\nconst HeaderMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseAllHours, dataCurrentHours } = useDatabaseValues(monthURL);\r\n  const { monthURLStringFormat } = useMonthURLToString();\r\n\r\n  return (\r\n    <header className=\"me-3\">\r\n      <Container className=\"mx-0 ms-sm-auto\">\r\n        <FormHeaderMonhPanel />\r\n        <div className=\"d-flex justify-content-center mb-1 fw-medium\">\r\n          <div className=\"text-end\" style={{ width: \"25%\" }}>\r\n            Wszystkie\r\n          </div>\r\n          <div className=\"text-center mx-2\" style={{}}>\r\n            {databaseAllHours} - {dataCurrentHours}\r\n          </div>\r\n          <div style={{ width: \"25%\" }}>Wolne</div>\r\n          <small className=\"text-capitalize\">{monthURLStringFormat}</small>\r\n        </div>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMonthPanel;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Columns from \"../colmns/Columns\";\r\nimport HeaderMonthPanel from \"../headerMonthPanel/HeaderMonthPanel\";\r\nimport useDatabaseValues from \"../../../hooks/useMonthURLToString\";\r\nimport { currMonthDateToString } from \"../../../data/dataCurrentDates\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const { databaseMonth, data, error, isLoading } = useDatabaseValues(monthURL);\r\n\r\n  let panelContent;\r\n\r\n  if (isLoading) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <Spinner animation=\"border\" variant=\"secondary\">\r\n          <span className=\"visually-hidden\">Loading...</span>\r\n        </Spinner>\r\n      </main>\r\n    );\r\n  } else if (error) {\r\n    if (\"status\" in error) {\r\n      const errMsg = \"status\" in error && error.status;\r\n\r\n      return (\r\n        <main\r\n          className=\"d-flex justify-content-center align-items-center\"\r\n          style={{ height: \"100vh\" }}\r\n        >\r\n          <h3 className=\"text-danger\">\r\n            <> Błąd: {errMsg} </>\r\n          </h3>\r\n        </main>\r\n      );\r\n    }\r\n  } else if (!data) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h3 className=\"text-warning text-center\">\r\n          Brak miesięcy zapisanych w bazie danych. Zapisz miesiąc w formularzu\r\n        </h3>\r\n      </main>\r\n    );\r\n  } else if (!databaseMonth) {\r\n    panelContent = (\r\n      <main\r\n        className=\"d-flex justify-content-center align-items-center text-center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <h3 className=\"text-warning text-center\">\r\n          Brak danych z miesiąca {currMonthDateToString}\r\n        </h3>\r\n      </main>\r\n    );\r\n  } else {\r\n    panelContent = (\r\n      <main className=\"d-flex flex-column\" style={{ height: \"100vh\" }}>\r\n        <HeaderMonthPanel />\r\n        <Columns />\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return <>{panelContent}</>;\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["date","Date","currYearNumber","Intl","DateTimeFormat","year","format","currMonthNumber","month","currMonthDateToString","timeZone","monthURL","arguments","length","undefined","_useMonthsDataQuery","useMonthsDataQuery","data","error","isLoading","databaseMonthsId","Object","keys","databaseMonthsWithId","values","flat","map","item","idx","_objectSpread","id","databaseMonthsCollection","addDaysToColumns","databaseMonth","find","monthDate","databaseColumns","columns","databaseAllHours","allHours","dataCurrentHours","currentHours","dataBaseSubmitedHours","submitedHours","databaseAcceptedHours","acceptedHours","databaseRejectedHours","rejectedHours","submitedHoursSum","days","reduce","sum","day","hours","acceptedHoursSum","rejectedHoursSum","databaseMonthsDates","databaseMonthsDatesSorted","sort","date1","date2","databaseMonthsDatesToString","monthToDateFormat","props","useParams","slice","_jsxs","className","children","style","fontSize","_jsx","userName","FiClock","place","TbArrowBigRightLineFilled","MdFactory","_props$day","_useUpdateMonthMutati","useUpdateMonthMutation","_useUpdateMonthMutati2","_slicedToArray","updateColumns","succes","_useDatabaseValues","useDatabaseValues","handleUpdate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","column","filter","stop","_x2","apply","_x","btnContent","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","Button","variant","size","onClick","isError","_Fragment","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","height","Day","crypto","randomUUID","placeholder","headerText","counter","_useState","useState","_useState2","setColumns","useEffect","Container","HeaderColumns","DragDropContext","onDragEnd","results","handleDragDrop","Column","validationSchema","yup","max","required","success","formik","useFormik","initialValues","onSubmit","_onSubmit","_useFormHeaderMonhPan","useFormHeaderMonhPanel","Spinner","animation","Form","handleSubmit","Group","Range","name","min","value","onChange","handleChange","onBlur","handleBlur","background","concat","type","monthURLToDateFormat","monthURLStringFormat","console","log","useMonthURLToString","FormHeaderMonhPanel","width","panelContent","errMsg","status","HeaderMonthPanel","Columns","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
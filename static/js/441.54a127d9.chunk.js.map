{"version":3,"file":"static/js/441.54a127d9.chunk.js","mappings":"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","sources":["components/IndexContainer.tsx","hooks/updateReduxDatabase/useReduxListMonths.tsx","hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","hooks/useWindowWidth.tsx","pages/settings/settingsMonthsList/SettingsMonthsListItem.tsx","pages/settings/settingsMonthsList/SettingsMonthsList.tsx","pages/settings/settingsUsersList/SettingsUsersListItem.tsx","pages/settings/settingsUsersList/SettingsUsersList.tsx","pages/settings/indexSettings/SettinsContent.tsx","pages/settings/indexSettings/useRequestSettings.tsx","pages/settings/indexSettings/IndexSettings.tsx","utils/alertHelpers.tsx","utils/printPanelContent.tsx","../node_modules/warning/warning.js"],"sourcesContent":["import { ReactNode } from \"react\";\r\nimport useWindowWidth from \"../hooks/useWindowWidth\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nconst IndexContainer = (props: Props) => {\r\n\r\n\r\n  const { windowWidth } = useWindowWidth();\r\n  return (\r\n    <main\r\n      className=\"d-flex backgroundImage m-0\"\r\n      style={{ height: \"100dvh\", overflow: \"hidden\" }}\r\n    >\r\n      <aside\r\n        style={{\r\n          width: windowWidth >= 500 ? \"30%\" : 0,\r\n          maxWidth: \"250px\",\r\n          height: \"100%\",\r\n        }}\r\n      ></aside>\r\n      <div\r\n        className=\"d-flex ps-1 flex-fill\"\r\n        style={{\r\n          width: windowWidth >= 500 ? \"70%\" : \"100%\",\r\n        }}\r\n      >\r\n        {props.children}\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexContainer;\r\n","import { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n    getInfoMonthError,\r\n    getInfoMonthIsLoading,\r\n    getInfoMonths,\r\n} from \"../../redux/storeFeatures/infoMonthsSlice\";\r\nimport { useMonthsListQuery } from \"../../services/apiSliceMonths\";\r\n\r\nconst useReduxListMonths = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    data: dataInfoMonths,\r\n    error: errorInfoMonths,\r\n    isLoading: isLoadingInfoMonths,\r\n  } = useMonthsListQuery();\r\n\r\n  useEffect(() => {\r\n    dispatch(getInfoMonths(dataInfoMonths));\r\n    dispatch(getInfoMonthError(errorInfoMonths));\r\n    dispatch(getInfoMonthIsLoading(isLoadingInfoMonths));\r\n  }, [dataInfoMonths, errorInfoMonths, isLoadingInfoMonths, dispatch]);\r\n};\r\n\r\nexport default useReduxListMonths;\r\n","import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const sortedInfoMonths = infoMonths && [...infoMonths]?.sort(\r\n    (a: string, b: string) => {\r\n      const dateA = new Date(a).getTime();\r\n      const dateB = new Date(b).getTime();\r\n\r\n      return dateA - dateB;\r\n    }\r\n  );\r\n\r\n \r\n\r\n  const databaseMonthsDatesToString = sortedInfoMonths?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { sortedInfoMonths, databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nconst useWindowWidth = () => {\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  return { windowWidth };\r\n};\r\n\r\nexport default useWindowWidth;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateMonthInfoMutation,\r\n} from \"../../../services/apiSliceMonths\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\n\r\ninterface Props {\r\n  monthDateToString: string;\r\n  monthDate: string;\r\n}\r\n\r\nconst SettingsMonthsListItem = (props: Props) => {\r\n  const [deleteMonth, success] = useDeleteMonthMutation();\r\n  const [updateMonthInfo, successInfo] = useUpdateMonthInfoMutation();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-6 ms-auto\" />\r\n  );\r\n\r\n  const handleDelete = async () => {\r\n    Swal.fire(alertHelper(\"Usunąć miesiąc?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const year = props.monthDate.slice(0, 4);\r\n        const month = props.monthDate.slice(-2);\r\n\r\n        const updatedMonthsInfo = infoMonths.filter((infoMonth: string) => {\r\n          return infoMonth !== `${year}-${month}`;\r\n        });\r\n\r\n        await deleteMonth({ year: year, month: month });\r\n        await updateMonthInfo(updatedMonthsInfo);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item className=\"d-flex justify-content-between align-items-center shadow-sm p-0 mb-2 px-1 rounded\">\r\n      {\" \"}\r\n      {props.monthDateToString}{\" \"}\r\n      <Button\r\n        onClick={handleDelete}\r\n        disabled={success.isLoading}\r\n        className=\"d-flex justify-content-between align-items-center px-1 bg-white border-0 text-capitalize\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport SettingsMonthsListItem from \"./SettingsMonthsListItem\";\r\n\r\nconst SettingsMonthsList = () => {\r\n  const { sortedInfoMonths, databaseMonthsDatesToString } = useMonthDates();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"h6\">Zapisane miesiące</h3>\r\n      <ListGroup className=\"border-0 p-0\">\r\n        {!infoMonths && <p className=\"py-1 px-2 text-warning\">Brak danych</p>}\r\n\r\n        {databaseMonthsDatesToString\r\n          ?.reverse()\r\n          .map((monthDateToString: string, idx: number) => {\r\n            return (\r\n              <SettingsMonthsListItem\r\n                monthDateToString={monthDateToString}\r\n                monthDate={sortedInfoMonths[idx]}\r\n                key={monthDateToString}\r\n              />\r\n            );\r\n          })}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsList;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { useDeleteUserMutation } from \"../../../services/apiSliceUsers\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\nimport { ModelUser } from \"../../../components/formUser/ModelUser\";\r\n\r\ninterface Props {\r\n  user: ModelUser;\r\n}\r\n\r\nconst SettingsUsersListItem = (props: Props) => {\r\n  const [deleteUser, success] = useDeleteUserMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n\r\n  const handleDelete = async (id: string) => {\r\n    Swal.fire(alertHelper(\"Usunąć użytkownika?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const userBodyPUTRequest = users?.filter((user: ModelUser) => {\r\n          return user?.id !== id;\r\n        });\r\n\r\n        await deleteUser(userBodyPUTRequest);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      onClick={() => handleDelete(props.user.id)}\r\n      className=\"shadow-sm p-0 mb-2 ps-2 pe-0 rounded-1\"\r\n      style={{ backgroundColor: props.user.userColor, overflow: \"hidden\" }}\r\n    >\r\n      <Button\r\n        disabled={success.isLoading}\r\n        className=\"w-100 d-flex justify-content-between align-items-center px-1 text-capitalize rounded-0 bg-white border-0\"\r\n        style={{ color: props.user.userColor }}\r\n      >\r\n        {props.user.userName}\r\n        {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { ModelUser } from \"../../../components/formUser/ModelUser\";\r\nimport SettingsUsersListItem from \"./SettingsUsersListItem\";\r\n\r\nconst SettingsUsersList = () => {\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n\r\n\r\nconsole.log('',users)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"h6\">Zapisani użytkownicy</h3>\r\n      <ListGroup className=\"border-0 p-0\">\r\n        {!users && <p className=\"py-1 px-2 text-warning\">Brak danych</p>}\r\n        {users?.map((user: ModelUser) => {\r\n          return <SettingsUsersListItem user={user} key={user.id} />;\r\n        })}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersList;\r\n","import useReduxListMonths from \"../../../hooks/updateReduxDatabase/useReduxListMonths\";\r\nimport SettingsMonthsList from \"../settingsMonthsList/SettingsMonthsList\";\r\nimport SettingsUsersList from \"../settingsUsersList/SettingsUsersList\";\r\n\r\nconst SettinsContent = () => {\r\nuseReduxListMonths()\r\n\r\n    return (\r\n      <div\r\n        className=\"bg-white p-2 py-4 p-sm-4 w-100\"\r\n        style={{\r\n          height: \"100%\",\r\n          overflow: \"hidden auto\",\r\n          outline: \"4px solid white\",\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            maxWidth: \"480px\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          \r\n          <SettingsMonthsList />\r\n          <div className=\"border my-4\"></div>\r\n          <SettingsUsersList />\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default SettinsContent;","import { Spinner } from \"react-bootstrap\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { printPanelContent } from \"../../../utils/printPanelContent\";\r\nimport SettinsContent from \"./SettinsContent\";\r\n\r\nconst useRequestSettings = () => {\r\n  const { usersError, usersIsLoading } = useSelector(\r\n    (state: RootState) => state.users\r\n  );\r\n  const { infoMonthsError, infoMonthsIsLoading } = useSelector(\r\n    (state: RootState) => state.infoMonths\r\n  );\r\n\r\n\r\n  let requestState;\r\n\r\n  if (usersIsLoading || infoMonthsIsLoading) {\r\n    requestState = printPanelContent(\r\n      <Spinner animation=\"border\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (usersError) {\r\n    if (\"status\" in usersError) {\r\n      const errMsg = \"status\" in usersError && usersError.status;\r\n\r\n      requestState = printPanelContent(\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else if (infoMonthsError) {\r\n    if (\"status\" in infoMonthsError) {\r\n      const errMsg = \"status\" in infoMonthsError && infoMonthsError.status;\r\n\r\n      requestState = printPanelContent(\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else {\r\n    requestState = <SettinsContent />;\r\n  }\r\n\r\n  return { requestState };\r\n};\r\nexport default useRequestSettings;\r\n","import IndexContainer from \"../../../components/IndexContainer\";\r\nimport useRequestSettings from \"./useRequestSettings\";\r\n\r\nconst IndexSettings = () => {\r\n  const { requestState } = useRequestSettings();\r\n\r\n  return <IndexContainer>{requestState}</IndexContainer>;\r\n};\r\n\r\nexport default IndexSettings;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n","export const printPanelContent = (contentJSX: React.ReactNode) => (\r\n  <div\r\n    className=\" d-flex justify-content-center align-items-center fs-3 text-warning text-center\"\r\n    style={{\r\n      maxWidth: \"1000px\",\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n    }}\r\n  >\r\n    {contentJSX}\r\n  </div>\r\n);","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n"],"names":["props","windowWidth","useWindowWidth","_jsxs","className","style","height","overflow","children","_jsx","width","maxWidth","dispatch","useDispatch","_useMonthsListQuery","useMonthsListQuery","dataInfoMonths","data","errorInfoMonths","error","isLoadingInfoMonths","isLoading","useEffect","getInfoMonths","getInfoMonthError","getInfoMonthIsLoading","success","btnText","isError","errMsg","status","Swal","text","concat","confirmButtonColor","btnContent","Spinner","animation","size","variant","_ref","infoMonths","useSelector","state","sortedInfoMonths","_toConsumableArray","sort","a","b","Date","getTime","databaseMonthsDatesToString","map","monthDate","monthToDateFormat","Intl","DateTimeFormat","year","month","timeZone","format","_useState","useState","window","innerWidth","_useState2","_slicedToArray","setWindowWidth","handleResize","addEventListener","removeEventListener","_useDeleteMonthMutati","useDeleteMonthMutation","_useDeleteMonthMutati2","deleteMonth","_useUpdateMonthInfoMu","useUpdateMonthInfoMutation","_useUpdateMonthInfoMu2","updateMonthInfo","useHTTPState","RiDeleteBin6Line","handleDelete","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","alertHelper","then","_ref2","_callee","result","updatedMonthsInfo","_context","isConfirmed","slice","filter","infoMonth","stop","_x","apply","arguments","ListGroup","Item","monthDateToString","Button","onClick","disabled","_useMonthDates","useMonthDates","_Fragment","reverse","idx","SettingsMonthsListItem","_useDeleteUserMutatio","useDeleteUserMutation","_useDeleteUserMutatio2","deleteUser","users","id","userBodyPUTRequest","user","_x2","backgroundColor","userColor","color","userName","console","log","SettingsUsersListItem","useReduxListMonths","outline","SettingsMonthsList","SettingsUsersList","requestState","_useSelector","usersError","usersIsLoading","_useSelector2","infoMonthsError","infoMonthsIsLoading","printPanelContent","SettinsContent","useRequestSettings","IndexContainer","message","title","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","alert","contentJSX","warning","module","exports"],"sourceRoot":""}
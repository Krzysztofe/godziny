{"version":3,"file":"static/js/868.104151f9.chunk.js","mappings":"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","sources":["pages/monthPanel/DayPrintData.tsx","pages/monthPanel/Day.tsx","pages/monthPanel/Column.tsx","pages/monthPanel/headerColumns.tsx/HeaderColumns.tsx","pages/monthPanel/colmns/Columns.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/validationFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/useFormHeaderMonthPanel.tsx","pages/monthPanel/headerMonthPanel/formHeaderMonthPanel/FormHeaderMonhPanel.tsx","pages/monthPanel/headerMonthPanel/HeaderMonthPanel.tsx","pages/monthPanel/IndexMonthPanel.tsx","pages/monthPanel/useDataBaseValues.tsx","pages/monthPanel/utils.tsx"],"sourcesContent":["import { MdFactory } from \"react-icons/md\";\r\nimport { TbArrowBigRightLineFilled } from \"react-icons/tb\";\r\nimport { FiClock } from \"react-icons/fi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  day: any;\r\n}\r\n\r\nconst DayPrintData = (props: Props) => {\r\n  const { monthURL } = useParams();\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    })\r\n      .format(monthToDateFormat)\r\n      .slice(0, -5);\r\n\r\n  const date = props.day.date.slice(5);\r\n  const dateToPrint = date[0] === \"0\" ? date.slice(1) : date;\r\n\r\n  console.log(\"\", monthToString);\r\n\r\n  return (\r\n    <div className=\"px-1 py-2\">\r\n      <div\r\n        className=\"d-flex justify-content-between\"\r\n        style={{ fontSize: \"clamp(0.8rem, 3.4vw, 1.2rem)\" }}\r\n      >\r\n        <div>{props.day.userName}</div>\r\n        <div>\r\n          {props.day.hours} <FiClock className=\"text-secondary\" />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"d-flex justify-content-between\">\r\n        <div>{date}</div>\r\n        <div>\r\n          {props.day.place === \"Poza\" ? (\r\n            <TbArrowBigRightLineFilled className=\"text-success\" />\r\n          ) : (\r\n            <MdFactory className=\"text-danger\" />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DayPrintData;\r\n","import { Draggable } from \"react-beautiful-dnd\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Swal from \"sweetalert2\";\r\nimport {\r\n  useMonthsDataQuery,\r\n  useUpdateMonthMutation,\r\n} from \"../../services/apiSlice\";\r\nimport DayPrintData from \"./DayPrintData\";\r\nimport useDataBaseValues from \"./useDataBaseValues\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  // const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const { data, error } = useMonthsDataQuery(undefined);\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n  const { monthURL } = useParams();\r\n\r\n  const {\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    databaseMonth,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const handleUpdate = async (id: any) => {\r\n    Swal.fire({\r\n      title: \"Chcesz usunąć dzień?\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"#3085d6\",\r\n      cancelButtonColor: \"#d33\",\r\n      confirmButtonText: \"Tak\",\r\n      cancelButtonText: \"Nie\",\r\n    }).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const updatedColumnsWithDeletedDays = [...databaseColumns].map(\r\n          (column: any) => {\r\n            if (column && column.days) {\r\n              return {\r\n                ...column,\r\n                days: column.days.filter((day: any) => day.id !== id),\r\n              };\r\n            }\r\n            return column;\r\n          }\r\n        );\r\n\r\n        await updateColumns({\r\n          id: data && databaseMonth?.id,\r\n          columns: { ...databaseMonth, columns: updatedColumnsWithDeletedDays },\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  let btnContent = (\r\n    <Draggable\r\n      draggableId={props.day && props?.day?.id.toString()}\r\n      index={props.index}\r\n    >\r\n      {provided => {\r\n        return (\r\n          <div\r\n            className=\"bg-white mb-2\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            <DayPrintData day={props.day} />\r\n            <Button\r\n              variant=\"secondary\"\r\n              size=\"sm\"\r\n              className=\"rounded-0 w-100 fw-medium\"\r\n              onClick={() => handleUpdate(props.day.id)}\r\n            >\r\n              Usuń\r\n            </Button>\r\n          </div>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n\r\n  if (succes.isLoading) {\r\n    btnContent = <div> \"Loading\" </div>;\r\n  }\r\n  if (succes.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return <>{btnContent}</>;\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n      }}\r\n    >\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              className=\"p-1 bg-secondary-subtle\"\r\n              style={{\r\n                height: \"100%\",\r\n              }}\r\n            >\r\n              {props.column.days &&\r\n                props.column.days.length > 0 &&\r\n                props.column?.days?.map((day: any, idx: any) => {\r\n                  return (\r\n                    <Day day={day} index={idx} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\nimport { BsFillSendFill } from \"react-icons/bs\";\r\nimport { FaThumbsUp } from \"react-icons/fa\";\r\nimport { FaThumbsDown } from \"react-icons/fa\";\r\n\r\nconst HeaderColumns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowWidth(window.innerWidth);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const displayHeaderContent = windowWidth > 576;\r\n\r\n  return (\r\n    <div className=\"d-flex grid gap-0 column-gap-2\">\r\n      {[\r\n        {\r\n          headerText: \"Złożone:\",\r\n          headerIcon: <BsFillSendFill />,\r\n          counter: dataBaseSubmitedHours,\r\n        },\r\n        {\r\n          headerText: \"Przyjęte:\",\r\n          headerIcon: <FaThumbsUp />,\r\n          counter: databaseAcceptedHours,\r\n        },\r\n        {\r\n          headerText: \"Odrzucone:\",\r\n          headerIcon: <FaThumbsDown className=\"secondary\" />,\r\n          counter: databaseRejectedHours,\r\n        },\r\n      ].map(({ headerText, counter, headerIcon }) => {\r\n        return (\r\n          <div\r\n            key={headerText}\r\n            className=\" mb-0 p-1 bg-secondary-subtle text-dark-emphasis fw-medium fs-6\"\r\n            style={{ width: \"100%\" }}\r\n          >\r\n            {displayHeaderContent ? (\r\n              <>\r\n                {headerText} {counter}\r\n              </>\r\n            ) : (\r\n              <>\r\n                {headerIcon} {counter}{\" \"}\r\n              </>\r\n            )}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HeaderColumns;\r\n","import { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { handleDragDrop } from \"../utils\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useUpdateMonthMutation } from \"../../../services/apiSlice\";\r\nimport Column from \"../Column\";\r\nimport \"./_columns.scss\";\r\nimport HeaderColumns from \"../headerColumns.tsx/HeaderColumns\";\r\n\r\nconst Columns = () => {\r\n  const { monthURL } = useParams();\r\n  const {\r\n    data,\r\n    error,\r\n    databaseAllHours,\r\n    databaseColumns,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    databaseMonth,\r\n    submitedHoursSum,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n  } = useDataBaseValues(monthURL);\r\n\r\n  const [updateColumns, succes] = useUpdateMonthMutation();\r\n\r\n  const [columns, setColumns] = useState<any[]>([]);\r\n  useEffect(() => {\r\n    data && databaseMonth && setColumns(databaseColumns);\r\n  }, [data, monthURL]);\r\n\r\n  useEffect(() => {\r\n    data &&\r\n      columns?.length > 1 &&\r\n      databaseMonth?.month &&\r\n      updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          columns: columns,\r\n          currentHours:\r\n            databaseAllHours -\r\n            submitedHoursSum -\r\n            acceptedHoursSum -\r\n            rejectedHoursSum +\r\n            rejectedHoursSum,\r\n          submitedHours: submitedHoursSum,\r\n          acceptedHours: acceptedHoursSum,\r\n          rejectedHours: rejectedHoursSum,\r\n        },\r\n      });\r\n  }, [columns]);\r\n\r\n  return (\r\n    <DragDropContext\r\n      onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n    >\r\n      <section className=\"monthColumns\">\r\n        <HeaderColumns />\r\n        <div className=\"d-flex grid gap-0 column-gap-2\" style={{height:\"fit-content\"}}>\r\n          {columns &&\r\n            columns.length > 0 &&\r\n            columns.map((column: any, idx: any) => {\r\n              return <Column column={column} key={column.id} />;\r\n            })}\r\n        </div>\r\n      </section>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Columns;\r\n","import * as yup from \"yup\";\r\n\r\nexport const validationSchema = yup.object({\r\n  allHours: yup\r\n    .number()\r\n    .max(320, \"Max. 320\")\r\n    .required(\"Podaj liczbę godzin\"),\r\n});\r\n","import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useUpdateMonthMutation } from \"../../../../services/apiSlice\";\r\nimport useDataBaseValues from \"../../useDataBaseValues\";\r\nimport { RootState } from \"../../../../redux/store\";\r\nimport { useParams, useLocation } from \"react-router-dom\";\r\nimport { validationSchema } from \"./validationFormHeaderMonthPanel\";\r\n\r\ninterface ModelFormValues {\r\n  allHours: number;\r\n}\r\n\r\nconst useFormHeaderMonhPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const [updateColumns, success] = useUpdateMonthMutation();\r\n  const { databaseMonth, data } = useDataBaseValues(monthURL);\r\n\r\n  const formik = useFormik<ModelFormValues>({\r\n    initialValues: { allHours: 0 },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, {resetForm}) => {\r\n      await updateColumns({\r\n        id: data && databaseMonth?.id,\r\n        columns: {\r\n          ...databaseMonth,\r\n          allHours: values.allHours,\r\n        },\r\n      });\r\n       resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useFormHeaderMonhPanel;\r\n","\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport useFormHeaderMonhPanel from \"./useFormHeaderMonthPanel\";\r\nimport React, { useState } from \"react\";\r\n\r\n\r\nconst FormHeaderMonhPanel = () => {\r\n\r\n  const { formik, success } = useFormHeaderMonhPanel();\r\n\r\n\r\n\r\n    const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (e:React.ChangeEvent<HTMLInputElement>) => {\r\n    const newValue = parseInt(e.target.value);\r\n    setValue(newValue);\r\n  };\r\n\r\n  let btnContent = (\r\n    <AiOutlinePlusCircle style={{ fontSize: \"2rem\" }} />\r\n  );\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\"  variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  if (success.isError) {\r\n    btnContent = <div> \"Błąd\" </div>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={formik.handleSubmit} className=\"\">\r\n        <Form.Group\r\n          className=\"d-flex align-items-end my-3\"\r\n          style={{ height: \"2rem\" }}\r\n        >\r\n          {/* <Form.Label htmlFor=\"allHours\" className=\"mb-0\">\r\n            Podaj ilość godzin\r\n          </Form.Label>\r\n          <div className=\"align-self-start\">\r\n            <Form.Control\r\n              id=\"allHours\"\r\n              type=\"number\"\r\n              name=\"allHours\"\r\n              min={1}\r\n              value={formik.values.allHours}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              size=\"sm\"\r\n              className=\"rounded-0 ms-2\"\r\n              style={{ width: \"4rem\" }}\r\n            />\r\n            <Form.Text\r\n              className=\"text-danger d-block mt-0 mb-1 lh-0 ms-2\"\r\n              style={{ fontSize: \"0.7rem\", height: \"1rem\" }}\r\n            >\r\n              {formik.touched.allHours &&\r\n                formik.errors.allHours &&\r\n                formik.errors.allHours}\r\n            </Form.Text>\r\n          </div> */}\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"secondary\"\r\n            className=\"rounded-0 d-flex align-items-center justify-content-center px-0  bg-transparent  text-dark border-0\"\r\n            style={{ width: \"10%\", height: \"100%\" }}\r\n          >\r\n            {btnContent}\r\n          </Button>\r\n\r\n          <Form.Range\r\n            min={0}\r\n            max={300}\r\n            value={value}\r\n            onChange={handleChange}\r\n            className=\"form-range\"\r\n            style={{ height: \"2px\", backgroundColor: \"red\" }}\r\n          />\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FormHeaderMonhPanel;\r\n","import { useParams } from \"react-router-dom\";\r\n// import useDataBaseValues from \"../hooksMonthPanel/useDataBaseValues\";\r\nimport FormHeaderMonhPanel from \"./formHeaderMonthPanel/FormHeaderMonhPanel\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport useDataBaseValues from \"../useDataBaseValues\";\r\n\r\nconst HeaderMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n\r\n  const { databaseAllHours, dataCurrentHours } = useDataBaseValues(monthURL);\r\n\r\n  const monthToDateFormat = monthURL && new Date(monthURL);\r\n  const monthToString =\r\n    monthToDateFormat &&\r\n    new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n\r\n  return (\r\n    <header>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={7} className=\"order-1 order-sm-2 px-0\">\r\n            <FormHeaderMonhPanel />\r\n          </Col>\r\n\r\n          <Col sm={5} className=\"order-2 order-sm-1 px-0\">\r\n            <div className=\"d-flex my-3\">\r\n              <div>Wszystkie: {databaseAllHours}</div>\r\n\r\n              <div className=\"ms-4\">Wolne: {dataCurrentHours}</div>\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMonthPanel;\r\n","import { useParams } from \"react-router-dom\";\r\nimport Columns from \"./colmns/Columns\";\r\nimport HeaderMonthPanel from \"./headerMonthPanel/HeaderMonthPanel\";\r\nimport useDataBaseValues from \"./useDataBaseValues\";\r\n\r\nconst IndexMonthPanel = () => {\r\n  const { monthURL } = useParams();\r\n  const { databaseMonth } = useDataBaseValues(monthURL);\r\n\r\n  return (\r\n    <>\r\n      {!databaseMonth || databaseMonth === null ? (\r\n        <main style={{ textAlign: \"center\" }}>Brak danych, wybierz miesiąc</main>\r\n      ) : (\r\n        <main>\r\n          <HeaderMonthPanel />\r\n          <Columns />\r\n        </main>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexMonthPanel;\r\n","import { useMonthsDataQuery } from \"../../services/apiSlice\";\r\nimport { addDaysToColumns } from \"./utils\";\r\n\r\ninterface DatabaseValues {\r\n  data: any;\r\n  error?: {};\r\n  databaseMonthsId: any;\r\n  databaseMonthsCollection: any[];\r\n  databaseMonth: any;\r\n  databaseColumns: any;\r\n  databaseAllHours: any;\r\n  dataCurrentHours: any;\r\n  databaseAcceptedHours: any;\r\n  databaseRejectedHours: any;\r\n  dataBaseSubmitedHours: any;\r\n  acceptedHoursSum: any;\r\n  rejectedHoursSum: any;\r\n  submitedHoursSum: any;\r\n  string: any[];\r\n  databaseMonthsDates: any[];\r\n}\r\n\r\nconst useDataBaseValues = (monthURL: any = null): DatabaseValues => {\r\n  const { data, error } = useMonthsDataQuery(undefined)\r\n\r\n  const databaseMonthsId = data && Object.keys(data);\r\n\r\n  const databaseMonthsWithId =\r\n    databaseMonthsId &&\r\n    Object.values(data)\r\n      .flat()\r\n      .map((item: any, idx) => {\r\n        return { ...item, id: databaseMonthsId[idx] };\r\n      });\r\n\r\n  const databaseMonthsCollection = addDaysToColumns(databaseMonthsWithId);\r\n\r\n  const databaseMonth: any =\r\n    data && databaseMonthsCollection.length > 0\r\n      ? databaseMonthsCollection?.find((month: any) => month.month === monthURL)\r\n      : undefined;\r\n\r\n  const databaseColumns = data && databaseMonth?.columns;\r\n\r\n  // hours values\r\n\r\n  const databaseAllHours = data ? databaseMonth?.allHours : \"\";\r\n  const dataCurrentHours = data ? databaseMonth?.currentHours : \"\";\r\n  const dataBaseSubmitedHours = data ? databaseMonth?.submitedHours : \"\";\r\n  const databaseAcceptedHours = data ? databaseMonth?.acceptedHours : \"\";\r\n  const databaseRejectedHours = data ? databaseMonth?.rejectedHours : \"\";\r\n\r\n  // hours sums\r\n\r\n  const submitedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[0].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const acceptedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[1].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  const rejectedHoursSum =\r\n    data && databaseMonthsCollection.length > 0 && databaseColumns?.[0].days\r\n      ? databaseColumns?.[2].days.reduce((sum: any, day: any) => {\r\n          return sum + day.hours;\r\n        }, 0)\r\n      : 0;\r\n\r\n  // date transformation\r\n  const databaseMonthsDates =\r\n    data && databaseMonthsCollection\r\n      ? databaseMonthsCollection.map(month => month.month)\r\n      : [];\r\n\r\n  const string = databaseMonthsDates.map((monthDate: any) => {\r\n    const monthToDateFormat = new Date(monthDate);\r\n    return new Intl.DateTimeFormat(\"pl-PL\", {\r\n      year: \"numeric\",\r\n      month: \"long\",\r\n      timeZone: \"UTC\",\r\n    }).format(monthToDateFormat);\r\n  });\r\n\r\n  return {\r\n    string,\r\n    data,\r\n    error,\r\n    databaseMonthsId,\r\n    databaseMonthsCollection,\r\n    databaseMonth,\r\n    databaseColumns,\r\n    databaseAllHours,\r\n    dataCurrentHours,\r\n    databaseAcceptedHours,\r\n    databaseRejectedHours,\r\n    dataBaseSubmitedHours,\r\n    acceptedHoursSum,\r\n    rejectedHoursSum,\r\n    submitedHoursSum,\r\n    databaseMonthsDates,\r\n  };\r\n};\r\n\r\nexport default useDataBaseValues;\r\n","export const addDaysToEmptyColumns = (arr: any) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n  return arr?.map((obj: any) => {\r\n    if (!obj?.hasOwnProperty(\"days\")) {\r\n      return { ...obj, days: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (arr: any[]) => {\r\n//   if (!Array.isArray(arr)) {\r\n//     return [];\r\n//   }\r\n\r\n//   return arr?.map((obj: any) => {\r\n//     if (obj?.columns?.map((column:any) => column.hasOwnProperty(\"days\"))) {\r\n//       return {\r\n//         ...obj,\r\n//         columns: obj?.columns?.map((column: any) => {\r\n//           return { ...column, days: [] };\r\n//         }),\r\n//       };\r\n//     }\r\n\r\n//     return obj\r\n//   });\r\n  \r\n// };\r\n\r\n\r\nexport const addDaysToColumns = (arr: any[]) => {\r\n  if (!Array.isArray(arr)) {\r\n    return [];\r\n  }\r\n\r\n  return arr?.map((obj: any) => {\r\n    const hasDaysProperty = obj?.columns?.every((column: any) =>\r\n      column.hasOwnProperty(\"days\")\r\n    );\r\n\r\n    if (!hasDaysProperty) {\r\n      return {\r\n        ...obj,\r\n        columns: obj?.columns?.map((column: any) => ({\r\n          ...column,\r\n          days: column.days || [],\r\n        })),\r\n      };\r\n    }\r\n\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// export const addDaysToColumns = (data:any) => {\r\n//   for (const key in data) {\r\n//     if (data.hasOwnProperty(key)) {\r\n//       const item = data[key];\r\n//       if (item.columns) {\r\n//         item.columns.forEach((column:any) => {\r\n//           if (!column.hasOwnProperty(\"days\")) {\r\n//             column.days = [];\r\n//           }\r\n//         });\r\n//       }\r\n//     }\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].days];\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].days]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      days: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].days];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      days: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n\r\nconst firebasey = {\r\n  uwrahts: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n\r\n  xx: {\r\n    allHours: 50,\r\n    columns: [\r\n      {\r\n        name: \"ppp\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n      {\r\n        name: \"zatwierdzone\",\r\n        id: \"22\",\r\n        days: [\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 20 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n          { data: \"222\", name: \"olo\", hours: 3 },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\n// const count = (obj: any) => {\r\n//   const allHours = obj.uwrahts.allHours;\r\n\r\n// if (\r\n//   obj &&\r\n//   obj.uwrahts &&\r\n//   obj.uwrahts.columns &&\r\n//   obj.uwrahts.columns.length > 1\r\n// ) {\r\n//   const secondObject = obj.uwrahts.columns[1];\r\n//   if (secondObject && secondObject.days) {\r\n//     return secondObject.days.reduce((sum:any, day:any) => sum + day.hours, 0);\r\n//   }\r\n// }\r\n\r\n// return 0;\r\n// };\r\n\r\n// console.log(\"ooo\", count(firebasey));\r\n"],"names":["props","monthURL","useParams","monthToDateFormat","Date","monthToString","Intl","DateTimeFormat","year","month","timeZone","format","slice","date","day","console","log","_jsxs","className","children","style","fontSize","_jsx","userName","hours","FiClock","place","TbArrowBigRightLineFilled","MdFactory","_props$day","_useMonthsDataQuery","useMonthsDataQuery","undefined","data","_useUpdateMonthMutati","error","useUpdateMonthMutation","_useUpdateMonthMutati2","_slicedToArray","updateColumns","succes","_useDataBaseValues","useDataBaseValues","databaseColumns","databaseMonth","databaseAllHours","handleUpdate","acceptedHoursSum","rejectedHoursSum","submitedHoursSum","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","id","wrap","_context2","prev","next","Swal","title","showCancelButton","confirmButtonColor","cancelButtonColor","confirmButtonText","cancelButtonText","then","_ref2","_callee","result","updatedColumnsWithDeletedDays","_context","isConfirmed","_toConsumableArray","map","column","days","_objectSpread","filter","columns","stop","_x2","apply","arguments","_x","btnContent","Draggable","draggableId","toString","index","provided","draggableProps","dragHandleProps","ref","innerRef","DayPrintData","Button","variant","size","onClick","isLoading","isError","_Fragment","width","Droppable","droppableId","snapshot","_props$column","_props$column$days","droppableProps","height","length","idx","Day","crypto","randomUUID","placeholder","databaseAcceptedHours","databaseRejectedHours","dataBaseSubmitedHours","_useState","useState","window","innerWidth","_useState2","windowWidth","setWindowWidth","useEffect","handleResize","addEventListener","removeEventListener","displayHeaderContent","headerText","headerIcon","BsFillSendFill","counter","FaThumbsUp","FaThumbsDown","setColumns","currentHours","submitedHours","acceptedHours","rejectedHours","DragDropContext","onDragEnd","results","handleDragDrop","HeaderColumns","Column","validationSchema","yup","allHours","max","required","success","formik","useFormik","initialValues","onSubmit","_onSubmit","values","resetForm","_useFormHeaderMonhPan","useFormHeaderMonhPanel","value","setValue","AiOutlinePlusCircle","Spinner","animation","Form","handleSubmit","Group","type","Range","min","onChange","e","newValue","parseInt","target","backgroundColor","dataCurrentHours","Container","Row","Col","sm","FormHeaderMonhPanel","HeaderMonthPanel","Columns","textAlign","databaseMonthsId","Object","keys","databaseMonthsWithId","flat","item","databaseMonthsCollection","addDaysToColumns","find","reduce","sum","databaseMonthsDates","string","monthDate","arr","Array","isArray","obj","_obj$columns","_obj$columns2","every","hasOwnProperty","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns"],"sourceRoot":""}
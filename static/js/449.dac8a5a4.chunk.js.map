{"version":3,"file":"static/js/449.dac8a5a4.chunk.js","mappings":"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","sources":["data/inputs/TextInput.tsx","pages/hoursPanel/Day.tsx","pages/hoursPanel/Column.tsx","pages/hoursPanel/dataHoursPanel.tsx","pages/hoursPanel/HeaderInPanel.tsx","pages/hoursPanel/utils.tsx","pages/hoursPanel/IndexHoursPanel.tsx"],"sourcesContent":["export interface Props {\r\n  type: string;\r\n  name: string;\r\n  value: string | number;\r\n  label: string;\r\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n}\r\n\r\nconst TextInput = (props: Props) => {\r\n  return (\r\n    <div >\r\n      <label>{props.label}</label>\r\n      <input\r\n        type={props.type}\r\n        name={props.name}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        placeholder={props.placeholder}\r\n        style={{ width: 50 }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import { useState } from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport TextInput from \"../../data/inputs/TextInput\";\r\ninterface Props {\r\n  day: any;\r\n  index: any;\r\n}\r\n\r\nconst Day = (props: Props) => {\r\n  const [userData, setUserData] = useState({ hours: \"\", userName: \"\" });\r\n\r\n  const handleInputChange = () => {\r\n    return;\r\n  };\r\n\r\n  return (\r\n    <div style={{ border: \"1px solid black\" }}>\r\n      <Draggable\r\n        draggableId={props.day && props.day.id.toString()}\r\n        index={props.index}\r\n      >\r\n        {provided => {\r\n          return (\r\n            <div\r\n              {...provided.draggableProps}\r\n              {...provided.dragHandleProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              <strong>{props.day.content}</strong>\r\n              <TextInput\r\n                type=\"number\"\r\n                name=\"hours\"\r\n                value={userData.hours}\r\n                label=\"Godz.\"\r\n                placeholder=\"Godz.\"\r\n                handleChange={handleInputChange}\r\n              />\r\n              <TextInput\r\n                type=\"text\"\r\n                name=\"userName\"\r\n                value={userData.userName}\r\n                label=\"Imię\"\r\n                placeholder=\"Imię\"\r\n                handleChange={handleInputChange}\r\n              />\r\n            </div>\r\n          );\r\n        }}\r\n      </Draggable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Day;\r\n","import { Droppable } from \"react-beautiful-dnd\";\r\nimport Day from \"./Day\";\r\n\r\ninterface Props {\r\n  column: any;\r\n}\r\n\r\nconst Column = (props: Props) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h4>{props.column.name} </h4>\r\n      <Droppable droppableId={props.column.id}>\r\n        {(provided, snapshot) => {\r\n          return (\r\n            <div\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n              style={{\r\n                border: \"1px solid black\",\r\n                width: 100,\r\n                height: \"50vh\",\r\n              }}\r\n            >\r\n              {props.column.items &&\r\n                props.column?.items?.map((day: any, index: any) => {\r\n                  return (\r\n                    <Day day={day} index={index} key={crypto.randomUUID()} />\r\n                  );\r\n                })}\r\n              {provided.placeholder}\r\n            </div>\r\n          );\r\n        }}\r\n      </Droppable>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Column;\r\n","interface DayModel {\r\n  id: string;\r\n  content: string;\r\n}\r\n\r\ninterface ColumnModel {\r\n  id: string;\r\n  name: string;\r\n  items?: DayModel[] | [];\r\n}\r\n\r\nexport const columnsWithDays: ColumnModel[] = [\r\n  {\r\n    id: \"miesiac\",\r\n    name: \"miesiac\",\r\n    items: [],\r\n  },\r\n  {\r\n    id: \"oczekujące\",\r\n    name: \"oczekujące\",\r\n  },\r\n  {\r\n    id: \"zatwierdzone\",\r\n    name: \"zatwierdzone\",\r\n  },\r\n];\r\n","import TextInput from \"../../data/inputs/TextInput\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { handleChange } from \"../../redux/storeFeatures/hoursPanelSlice\";\r\nimport { RootState } from \"../../redux/store\";\r\nimport { useAddReactionMutation } from \"../../services/apiSlice\";\r\nimport { createDaysInColumn } from \"./utils\";\r\nimport { columnsWithDays } from \"./dataHoursPanel\";\r\n\r\nconst HeaderInPanel = () => {\r\n  const dispatch = useDispatch();\r\n  const { numberOfDays } = useSelector((state: RootState) => state.hoursPanel);\r\n\r\n  const [addReaction, success] = useAddReactionMutation();\r\n\r\n  columnsWithDays[0].items = createDaysInColumn(numberOfDays);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    dispatch(handleChange(value));\r\n  };\r\n\r\n  const handleClick = async () => {\r\n    await addReaction(columnsWithDays);\r\n  };\r\n\r\n  return (\r\n    <header>\r\n      <TextInput\r\n        type=\"number\"\r\n        name=\"numberOfDays\"\r\n        value={numberOfDays}\r\n        label=\"Liczba dni w miesiącu\"\r\n        placeholder=\"Dni\"\r\n        handleChange={handleInputChange}\r\n      />\r\n      <button onClick={handleClick}> add</button>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderInPanel;\r\n","\r\nexport const createDaysInColumn = (num: number) => {\r\n  let days = [];\r\n\r\n  for (let i = 1; i <= num; i++) {\r\n    days.push({ id: crypto.randomUUID(), content: i.toString() });\r\n  }\r\n\r\n  return days;\r\n};\r\n\r\nexport const addDaysToEmptyColumns = (arr: any) => {\r\n  return arr?.map((obj: any) => {\r\n    if (!obj.hasOwnProperty(\"items\")) {\r\n      return { ...obj, items: [] };\r\n    }\r\n    return obj;\r\n  });\r\n};\r\n\r\n\r\n\r\nexport const handleDragDrop = (results: any, columns: any, setColumns: any) => {\r\n  const { source, destination } = results;\r\n\r\n  if (!destination) return;\r\n  if (\r\n    source.draggableId === destination.droppableId &&\r\n    source.index !== destination.index\r\n  )\r\n    return;\r\n\r\n  if (source.droppableId !== destination.droppableId) {\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const destinationColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === destination.droppableId;\r\n    });\r\n\r\n    const newSourceDays = [...columns[sourceColumnIdx].items];\r\n\r\n\r\n    const newDestinationDays =\r\n      source.droppableId !== destination.dropableId\r\n        ? [...columns[destinationColumnIdx].items]\r\n        : newSourceDays;\r\n\r\n    const [deletedDay] = newSourceDays.splice(source.index, 1);\r\n    newDestinationDays.splice(destination.index, 0, deletedDay);\r\n\r\n    const newCoulmns = [...columns];\r\n\r\n    newCoulmns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      items: newSourceDays,\r\n    };\r\n\r\n    newCoulmns[destinationColumnIdx] = {\r\n      ...columns[destinationColumnIdx],\r\n      items: newDestinationDays,\r\n    };\r\n\r\n    setColumns(newCoulmns);\r\n  } else {\r\n    const destintionIdx = destination.index;\r\n\r\n    const sourceColumnIdx = columns.findIndex((column: any) => {\r\n      return column.id === source.droppableId;\r\n    });\r\n\r\n    const days = [...columns[sourceColumnIdx].items];\r\n    const [deletedDay] = days.splice(source.index, 1);\r\n    days.splice(destintionIdx, 0, deletedDay);\r\n\r\n    const newColumns = [...columns];\r\n\r\n    newColumns[sourceColumnIdx] = {\r\n      ...columns[sourceColumnIdx],\r\n      items: days,\r\n    };\r\n\r\n    setColumns(newColumns);\r\n  }\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { useReactionsQuery } from \"../../services/apiSlice\";\r\nimport Column from \"./Column\";\r\nimport HeaderInPanel from \"./HeaderInPanel\";\r\nimport { handleDragDrop, addDaysToEmptyColumns } from \"./utils\";\r\n\r\nconst IndexHoursPanel = () => {\r\n  const { data, error } = useReactionsQuery(undefined);\r\n  const columnsFromDatabase = data && Object.values(data).flat();\r\n  const columnsToPrint = addDaysToEmptyColumns(columnsFromDatabase);\r\n\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  useEffect(() => {\r\n    setColumns(columnsToPrint);\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <HeaderInPanel />\r\n      <button> zatwierdz</button>\r\n      <div style={{ display: \"flex\" }}>\r\n        <DragDropContext\r\n          onDragEnd={results => handleDragDrop(results, columns, setColumns)}\r\n        >\r\n          {columns &&\r\n            columns.length > 0 &&\r\n            columns.map((column: any) => {\r\n              return <Column column={column} key={column.id} />;\r\n            })}\r\n        </DragDropContext>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexHoursPanel;\r\n"],"names":["props","_jsxs","children","_jsx","label","type","name","value","onChange","handleChange","placeholder","style","width","_useState","useState","hours","userName","_useState2","_slicedToArray","userData","handleInputChange","border","Draggable","draggableId","day","id","toString","index","provided","_objectSpread","draggableProps","dragHandleProps","ref","innerRef","content","TextInput","column","Droppable","droppableId","snapshot","_props$column","_props$column$items","droppableProps","height","items","map","Day","crypto","randomUUID","columnsWithDays","dispatch","useDispatch","numberOfDays","useSelector","state","hoursPanel","_useAddReactionMutati","useAddReactionMutation","_useAddReactionMutati2","addReaction","num","days","i","push","createDaysInColumn","handleClick","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","apply","arguments","e","target","onClick","arr","_useReactionsQuery","useReactionsQuery","undefined","data","columnsFromDatabase","error","Object","values","flat","columnsToPrint","obj","hasOwnProperty","columns","setColumns","useEffect","_Fragment","HeaderInPanel","display","DragDropContext","onDragEnd","results","source","destination","sourceColumnIdx","findIndex","destinationColumnIdx","newSourceDays","_toConsumableArray","newDestinationDays","dropableId","_newSourceDays$splice","splice","deletedDay","newCoulmns","destintionIdx","_days$splice","newColumns","handleDragDrop","length","Column"],"sourceRoot":""}
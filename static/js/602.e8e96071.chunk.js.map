{"version":3,"file":"static/js/602.e8e96071.chunk.js","mappings":"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","sources":["hooks/useHTTPState.tsx","hooks/useMonthDates.tsx","pages/settings/settingsMonthsList/SettingsMonthsListItem.tsx","pages/settings/settingsMonthsList/SettingsMonthsList.tsx","pages/settings/settingsUserForm/dataSettingsUserForm.tsx","pages/settings/settingsUserForm/useValidationSettingsUserForm.tsx","pages/settings/settingsUserForm/useSettingsUserFormik.tsx","pages/settings/settingsUserForm/SettingsUserForm.tsx","pages/settings/settingsUsersList/SettingsUsersListItem.tsx","pages/settings/settingsUsersList/SettingsUsersList.tsx","pages/settings/indexSettings/useHTTPIndexSettings.tsx","pages/settings/indexSettings/IndexSettings.tsx","utils/alertHelpers.tsx","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js"],"sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { useEffect } from \"react\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport { ReactNode } from \"react\";\r\n\r\ninterface ModelSuccess {\r\n  isLoading: boolean;\r\n  isError: boolean;\r\n  error?: any;\r\n}\r\n\r\nconst useHTTPState = (success: ModelSuccess, btnText: string | ReactNode) => {\r\n  useEffect(() => {\r\n    if (success.isError) {\r\n      const error = success.error;\r\n      const errMsg = error && \"status\" in error && error.status && error.status;\r\n\r\n      Swal.fire({\r\n        text: `Błąd: ${errMsg || \"\"}`,\r\n        confirmButtonColor: \"rgb(31, 180, 255)\",\r\n      });\r\n    }\r\n  }, [success.isError]);\r\n\r\n  let btnContent: string | ReactNode = btnText;\r\n\r\n  if (success.isLoading) {\r\n    btnContent = (\r\n      <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  }\r\n\r\n  return { btnContent };\r\n};\r\n\r\nexport default useHTTPState;\r\n","import { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\n\r\nconst useMonthDates = () => {\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const sortedInfoMonths = infoMonths && [...infoMonths]?.sort(\r\n    (a: string, b: string) => {\r\n      const dateA = new Date(a).getTime();\r\n      const dateB = new Date(b).getTime();\r\n\r\n      return dateA - dateB;\r\n    }\r\n  );\r\n\r\n \r\n\r\n  const databaseMonthsDatesToString = sortedInfoMonths?.map(\r\n    (monthDate: string) => {\r\n      const monthToDateFormat = new Date(monthDate);\r\n      return new Intl.DateTimeFormat(\"pl-PL\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        timeZone: \"UTC\",\r\n      }).format(monthToDateFormat);\r\n    }\r\n  );\r\n\r\n  return { sortedInfoMonths, databaseMonthsDatesToString };\r\n};\r\n\r\nexport default useMonthDates;\r\n","import Swal from \"sweetalert2\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\nimport {\r\n  useDeleteMonthMutation,\r\n  useUpdateMonthInfoMutation,\r\n} from \"../../../services/apiSliceMonths\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\ninterface Props {\r\n  monthDateToString: string;\r\n  monthDate: string;\r\n}\r\n\r\nconst SettingsMonthsListItem = (props: Props) => {\r\n  const [deleteMonth, success] = useDeleteMonthMutation();\r\n  const [updateMonthInfo, successInfo] = useUpdateMonthInfoMutation();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n\r\n  const handleDelete = async () => {\r\n    Swal.fire(alertHelper(\"Chcesz usuniąć miesiąc?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const year = props.monthDate.slice(0, 4);\r\n        const month = props.monthDate.slice(-2);\r\n\r\n        const updatedMonthsInfo = infoMonths.filter((infoMonth: string) => {\r\n          return infoMonth !== `${year}-${month}`;\r\n        });\r\n\r\n        await deleteMonth({ year: year, month: month });\r\n        await updateMonthInfo(updatedMonthsInfo);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item onClick={handleDelete} className=\"border-0 p-0 px-1 \">\r\n      <Button\r\n        disabled={success.isLoading}\r\n        className=\"w-100 d-flex justify-content-between align-items-center px-1 bg-primary-subtle text-capitalize border-0 fs-5\"\r\n      >\r\n        {props.monthDateToString} {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport useMonthDates from \"../../../hooks/useMonthDates\";\r\nimport SettingsMonthsListItem from \"./SettingsMonthsListItem\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst SettingsMonthsList = () => {\r\n  const {sortedInfoMonths, databaseMonthsDatesToString } = useMonthDates();\r\n  const { infoMonths } = useSelector((state: RootState) => state.infoMonths);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"h4\">Usuń miesiąc</h3>\r\n      <ListGroup className=\"border-0 bg-primary-subtle p-0\">\r\n        {!infoMonths ? (\r\n          <p className=\"py-1 px-2 fs-4 text-warning\">Brak danych</p>\r\n        ) : (\r\n          databaseMonthsDatesToString?.map(\r\n            (monthDateToString: string, idx: number) => {\r\n              return (\r\n                <SettingsMonthsListItem\r\n                  monthDateToString={monthDateToString}\r\n                  monthDate={sortedInfoMonths[idx]}\r\n                  key={monthDateToString}\r\n                />\r\n              );\r\n            }\r\n          )\r\n        )}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsMonthsList;\r\n","export const dataUserInputs = [\r\n  {\r\n    labelText: \"Podaj imię\",\r\n    name: \"userName\",\r\n    type: \"text\",\r\n    placeholder: \"Imię\",\r\n  },\r\n  {\r\n    labelText: \"Podaj kolor\",\r\n    name: \"userColor\",\r\n    type: \"color\",\r\n    placeholder: \"\",\r\n  },\r\n];\r\n","import { useUsersQuery } from '../../../services/apiSliceUsers';\r\nimport { ModelUser } from './useSettingsUserFormik';\r\nimport * as yup from \"yup\";\r\n\r\nconst useValidationSettingsUserForm = () => {\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const usersNames = dataUsers?.map(({ userName }: ModelUser) => userName);\r\n  const UsersColors = dataUsers?.map(({ userColor }: ModelUser) => userColor);\r\n\r\n\r\n   const validationSchema = yup.object({\r\n     userName: yup\r\n       .string()\r\n       .min(3, \"Min. 3 litery\")\r\n       .max(10, \"Max. 10 liter\")\r\n       .test(\r\n         \"is-in-database\",\r\n         \"Imię zajęte\",\r\n         value => value !== undefined && !usersNames?.includes(value)\r\n       )\r\n       .required(\"Imię wymagane\"),\r\n     userColor: yup\r\n       .string()\r\n       .test(\r\n         \"is-in-database\",\r\n         \"Kolor zajęty\",\r\n         value => value !== undefined && !UsersColors?.includes(value)\r\n       ),\r\n   });\r\n\r\n\r\n    return { validationSchema };\r\n};\r\n\r\nexport default useValidationSettingsUserForm;","import { useFormik } from \"formik\";\r\nimport {\r\n  useAddUserMutation,\r\n  useUsersQuery,\r\n} from \"../../../services/apiSliceUsers\";\r\nimport useValidationSettingsUserForm from \"./useValidationSettingsUserForm\";\r\n\r\nexport interface ModelUser {\r\n  id: string;\r\n  userName: string;\r\n  userColor: string;\r\n}\r\n\r\nconst useUserSettingsFormik = () => {\r\n  const [addUser, success] = useAddUserMutation();\r\n  const { validationSchema } = useValidationSettingsUserForm();\r\n  const { data: dataUsers } = useUsersQuery();\r\n\r\n  const users = dataUsers || []\r\n\r\n  const formik = useFormik<ModelUser>({\r\n    initialValues: {\r\n      id: \"\",\r\n      userName: \"\",\r\n      userColor: \"#e0cce1\",\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      const updatedValues = {\r\n        ...values,\r\n        id: crypto.randomUUID(),\r\n      };\r\n\r\n      if (dataUsers) {\r\n        await addUser([...users, updatedValues]);\r\n      } else {\r\n        await addUser([updatedValues]);\r\n      }\r\n      resetForm();\r\n    },\r\n  });\r\n\r\n  return { formik, success };\r\n};\r\n\r\nexport default useUserSettingsFormik;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { dataUserInputs } from \"./dataSettingsUserForm\";\r\nimport useUserSettingsFormik from \"./useSettingsUserFormik\";\r\n\r\nconst SettingsUserForm = () => {\r\n  const { formik, success } = useUserSettingsFormik();\r\n  const { btnContent } = useHTTPState(success, \"Zapisz użytkowanika\");\r\n\r\n  return (\r\n    <Form onSubmit={formik.handleSubmit}>\r\n      <Row>\r\n        {dataUserInputs.map(({ labelText, name, type, placeholder }, idx) => {\r\n          return (\r\n            <Col key={name} className={`${idx === 0 ? \"col-8\" : \"col-4\"}`}>\r\n              <Form.Group className=\"\">\r\n                <Form.Label htmlFor={name} className=\"fw-medium\">\r\n                  {labelText}\r\n                </Form.Label>\r\n\r\n                <Form.Control\r\n                  id={name}\r\n                  type={type}\r\n                  name={name}\r\n                  value={formik.values[name as keyof typeof formik.values]}\r\n                  onChange={formik.handleChange}\r\n                  onBlur={formik.handleBlur}\r\n                  placeholder={placeholder}\r\n                />\r\n\r\n                <Form.Text\r\n                  className=\"text-danger d-block mt-0 mb-4 fs-8\"\r\n                  style={{ height: \"0.7rem\" }}\r\n                >\r\n                  {formik.touched[name as keyof typeof formik.touched] &&\r\n                    formik.errors[name as keyof typeof formik.touched] &&\r\n                    formik.errors[name as keyof typeof formik.touched]}\r\n                </Form.Text>\r\n              </Form.Group>\r\n            </Col>\r\n          );\r\n        })}\r\n      </Row>\r\n\r\n      <Button\r\n        disabled={success.isLoading}\r\n        type=\"submit\"\r\n        className=\"col-8 col-sm-7  bg-info text-white fw-medium\"\r\n      >\r\n        {btnContent}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default SettingsUserForm;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { RiDeleteBin6Line } from \"react-icons/ri\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Swal from \"sweetalert2\";\r\nimport useHTTPState from \"../../../hooks/useHTTPState\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport {\r\n  useDeleteUserMutation\r\n} from \"../../../services/apiSliceUsers\";\r\nimport { alertHelper } from \"../../../utils/alertHelpers\";\r\nimport { ModelUser } from \"../settingsUserForm/useSettingsUserFormik\";\r\n\r\ninterface Props {\r\n  user: ModelUser;\r\n}\r\n\r\nconst SettingsUsersListItem = (props: Props) => {\r\n  const [deleteUser, success] = useDeleteUserMutation();\r\n  const { btnContent } = useHTTPState(\r\n    success,\r\n    <RiDeleteBin6Line className=\"text-danger fs-5 ms-auto\" />\r\n  );\r\n\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n\r\n  const handleDelete = async (id: string) => {\r\n    Swal.fire(alertHelper(\"Chcesz usuniąć użytkownika?\")).then(async result => {\r\n      if (result.isConfirmed) {\r\n        const userBodyPUTRequest = users?.filter((user: ModelUser) => {\r\n          return user?.id !== id;\r\n        });\r\n\r\n        await deleteUser(userBodyPUTRequest);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ListGroup.Item\r\n      onClick={() => handleDelete(props.user.id)}\r\n      className=\"border-0 p-0\"\r\n      style={{ color: props.user.userColor }}\r\n    >\r\n      <Button\r\n        disabled={success.isLoading}\r\n        className=\"w-100 d-flex justify-content-between align-items-center px-1 bg-primary-subtle text-capitalize border-0 fs-5\"\r\n        style={{ color: props.user.userColor }}\r\n      >\r\n        {props.user.userName}\r\n        {btnContent}\r\n      </Button>\r\n    </ListGroup.Item>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersListItem;\r\n","import ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport { ModelUser } from \"../settingsUserForm/useSettingsUserFormik\";\r\nimport SettingsUsersListItem from \"./SettingsUsersListItem\";\r\n\r\nconst SettingsUsersList = () => {\r\n  const { users } = useSelector((state: RootState) => state.users);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"h4\">Usuń użytkownika</h3>\r\n      <ListGroup className=\"border-0 bg-primary-subtle p-0\">\r\n        {!users ? (\r\n          <p className=\"py-1 px-2 fs-4 text-warning\">Brak danych</p>\r\n        ) : (\r\n          users?.map((user: ModelUser) => {\r\n            return <SettingsUsersListItem user={user} key={user.id} />;\r\n          })\r\n        )}\r\n      </ListGroup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SettingsUsersList;\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\nimport SettingsMonthsList from \"../settingsMonthsList/SettingsMonthsList\";\r\nimport SettingsUserForm from \"../settingsUserForm/SettingsUserForm\";\r\nimport SettingsUsersList from \"../settingsUsersList/SettingsUsersList\";\r\n\r\nconst useHTTPIndexSettings = () => {\r\n  const { usersError, usersIsLoading } = useSelector(\r\n    (state: RootState) => state.users\r\n  );\r\n  const { infoMonthsError, infoMonthsIsLoading } = useSelector(\r\n    (state: RootState) => state.infoMonths\r\n  );\r\n\r\n  const rowStyles =\r\n    \"col-sm-8 col-md-9 col-xl-8 col-xxl-8 ms-sm-auto mx-xl-auto px-1 pt-4\";\r\n\r\n     const cc = true;\r\n  let settingsContent \r\n\r\n  if (usersIsLoading || infoMonthsIsLoading) {\r\n    settingsContent = (\r\n      <Spinner animation=\"border\" variant=\"secondary\">\r\n        <span className=\"visually-hidden\">Loading...</span>\r\n      </Spinner>\r\n    );\r\n  } else if (usersError) {\r\n    if (\"status\" in usersError) {\r\n      const errMsg = \"status\" in usersError && usersError.status;\r\n\r\n      settingsContent = (\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else if (infoMonthsError) {\r\n    if (\"status\" in infoMonthsError) {\r\n      const errMsg = \"status\" in infoMonthsError && infoMonthsError.status;\r\n\r\n      settingsContent = (\r\n        <h3 className=\"text-danger mx-auto \">\r\n          <> Błąd: {errMsg} </>\r\n        </h3>\r\n      );\r\n    }\r\n  } else {\r\n    settingsContent = (\r\n      <Container fluid>\r\n        <Row className={rowStyles}>\r\n          <SettingsUserForm />\r\n        </Row>\r\n        <Row className={rowStyles}>\r\n          <SettingsUsersList />\r\n        </Row>\r\n        <Row className={rowStyles}>\r\n          <SettingsMonthsList />\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return { settingsContent };\r\n};\r\nexport default useHTTPIndexSettings;\r\n","import { useUsersQuery } from \"../../../services/apiSliceUsers\";\r\nimport useHTTPIndexSettings from \"./useHTTPIndexSettings\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../redux/store\";\r\n\r\nconst IndexSettings = () => {\r\n  const { settingsContent } = useHTTPIndexSettings();\r\n  const { users, usersError, usersIsLoading } = useSelector(\r\n    (state: RootState) => state.users\r\n  );\r\n  const { infoMonths, infoMonthsError, infoMonthsIsLoading } = useSelector(\r\n    (state: RootState) => state.infoMonths\r\n  );\r\n  const cc = true;\r\n  let mainStyles = \"bg-primary-subtle\";\r\n\r\n  if ((infoMonthsIsLoading && !infoMonths) || (usersIsLoading && !users)) {\r\n    mainStyles = \"d-flex align-items-center justify-content-center vh-100\";\r\n  }\r\n\r\n  if (\r\n    !infoMonths ||\r\n    infoMonthsError ||\r\n    infoMonthsIsLoading ||\r\n    !users ||\r\n    usersError ||\r\n    usersIsLoading \r\n  ) {\r\n    mainStyles =\r\n      \"d-flex justify-content-end align-items-center p-1 pe-sm-5 col-sm-7 col-md-8 ms-auto mx-xxl-auto\";\r\n  }\r\n\r\n  return (\r\n    <main className={mainStyles} style={{ minHeight: \"100vh\" }}>\r\n      {settingsContent}\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default IndexSettings;\r\n","import Swal from \"sweetalert2\";\r\n\r\nexport const alertHelper = (message: string) => {\r\n  return {\r\n    title: message,\r\n    showCancelButton: true,\r\n    confirmButtonColor: \"#3085d6\",\r\n    cancelButtonColor: \"#d33\",\r\n    confirmButtonText: \"Tak\",\r\n    cancelButtonText: \"Nie\",\r\n  };\r\n};\r\n\r\nexport const alert = (error:string) => {\r\n  Swal.fire({\r\n    text: `Błąd ${error}`,\r\n    confirmButtonColor: \"rgb(31, 180, 255)\",\r\n  });\r\n}\r\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}"],"names":["success","btnText","useEffect","isError","error","errMsg","status","Swal","text","concat","confirmButtonColor","btnContent","isLoading","_jsx","Spinner","animation","size","variant","children","className","_ref","infoMonths","useSelector","state","sortedInfoMonths","_toConsumableArray","sort","a","b","Date","getTime","databaseMonthsDatesToString","map","monthDate","monthToDateFormat","Intl","DateTimeFormat","year","month","timeZone","format","props","_useDeleteMonthMutati","useDeleteMonthMutation","_useDeleteMonthMutati2","_slicedToArray","deleteMonth","_useUpdateMonthInfoMu","useUpdateMonthInfoMutation","_useUpdateMonthInfoMu2","updateMonthInfo","useHTTPState","RiDeleteBin6Line","handleDelete","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","alertHelper","then","_ref2","_callee","result","updatedMonthsInfo","_context","isConfirmed","slice","filter","infoMonth","stop","_x","apply","arguments","ListGroup","Item","onClick","_jsxs","Button","disabled","monthDateToString","_useMonthDates","useMonthDates","_Fragment","idx","SettingsMonthsListItem","dataUserInputs","labelText","name","type","placeholder","dataUsers","useUsersQuery","data","usersNames","userName","UsersColors","userColor","validationSchema","yup","min","max","test","value","undefined","includes","required","_useAddUserMutation","useAddUserMutation","_useAddUserMutation2","addUser","useValidationSettingsUserForm","users","formik","useFormik","initialValues","id","onSubmit","_onSubmit","values","resetForm","updatedValues","_objectSpread","crypto","randomUUID","_x2","_useUserSettingsFormi","useUserSettingsFormik","Form","handleSubmit","Row","Col","Group","Label","htmlFor","Control","onChange","handleChange","onBlur","handleBlur","Text","style","height","touched","errors","_useDeleteUserMutatio","useDeleteUserMutation","_useDeleteUserMutatio2","deleteUser","userBodyPUTRequest","user","color","SettingsUsersListItem","settingsContent","_useSelector","usersError","usersIsLoading","_useSelector2","infoMonthsError","infoMonthsIsLoading","rowStyles","Container","fluid","SettingsUserForm","SettingsUsersList","SettingsMonthsList","useHTTPIndexSettings","mainStyles","minHeight","message","title","showCancelButton","cancelButtonColor","confirmButtonText","cancelButtonText","alert","_get","Reflect","get","bind","target","property","receiver","base","object","Object","prototype","hasOwnProperty","call","getPrototypeOf","desc","getOwnPropertyDescriptor","length","this"],"sourceRoot":""}